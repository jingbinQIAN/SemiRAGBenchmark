{
  "doc_id": "semi_docs_045",
  "chunk_id": 1,
  "content": "SEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # 8.4.9.1  XML Schema Types\n\n8.4.9.1.1  This section describes the XML mappings for the classes defined in SEMI E132 for the SessionClosed operation.  See GetDefinedPrivileges operation regarding schema conventions used.  This operation is just a notification only so there is no response defined.\n\nSEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # 8.4.9.1.2  SessionClosed Notification\n\n8.4.9.1.2.1  The SessionClosed notification is mapped to the XML Schema element SessionClosedNotification of type SessionClosedNotificationType.  Table 91 shows how the input parameters are mapped to XML.\n\nSEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # 8.4.9.2  WSDL Message(s)\n\n8.4.9.2.1  Two messages are defined for this operation corresponding to the SEMI E132 Hash Header, and the Notification message.  See the message definitions for “E132HashHeaderMessage”, and “SessionClosedInMessage” in E132-1-V0305-SessionClient-PortType.wsdl.  Key information is shown for convenience in Table 92.\n\nSEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # 8.4.9.3  WSDL Operation\n\n8.4.9.3.1  See the portType operation definition for “SessionClosed” in E132-1-V0305-SessionClientPortType.wsdl.  Key information is shown for convenience in Table 93.  There is no output message defined for notifications.\n\nSEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # 8.4.9.4  WSDL Operation Binding\n\n8.4.9.4.1  See the operation binding for “SessionClosed” in E132-1-V0305-SessionClient-Binding.wsdl.  Key information is shown for convenience in Table 94.\n\nSEMI E132.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT CLIENT AUTHENTICATION AND AUTHORIZATION (ECA) - # Table 94  SessionClosed Operation Binding\n\nNOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice.  \nBy publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE\n\nThis provisional specification was technically approved by the global Information & Control Committee. This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005. It was available at www.semi.org in June 2005 and on CD-ROM in July 2005.  Originally published March 2004; previously published November 2004.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 1  Purpose\n\n1.1  In order to more efficiently facilitate the integration of Process Control Systems (PCS) such as run-to-run (R2R) control, fault detection (FD), fault classification (FC), fault prediction (FP), statistical process control (SPC), etc. into current and future fabs, there is a need to define interfaces for Process Control Systems that enable them to interact effectively and share data 1) among themselves and 2) with the other interdependent factory systems (including equipment data collection).  This standard is intended for use by equipment suppliers, semiconductor manufacturers, equipment subsystem suppliers and control system suppliers who will utilize the PCS standards in future developed products.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope\n\nContent: 2.1 This standard focuses on defining PCS capabilities, functional groups, and functional group interfaces. The standard is structured so that new functional groups can be added to the standard through future balloting. The components in this document include: • Definitions of key terms and concepts pertinent to this domain, • Description of the specification conventions used, • Identification of the major functional groups within the scope of PCS, Description of the capabilities expected in each functional group (required and optional), and • Definition of interfaces for these functional groups, including: • Data that is available across these interfaces. This includes the interface data descriptions (inputs and outputs). Future enhancements to this specification will include detailed data structures in the form of inheritance and aggregation models that are common to all PCS functional groups, as well as specific models for each, • Services supported and Interface behavior assumed, and • Description of an approach\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope\n\nContent: for compliance verification testing. 2.2 The specific format and protocol implementation of these interface specifications, which are technology specific, will be delineated in supporting “dot” specifications to this standard. As an example a possible format is XML (which would include data type definitions and metamodel schemas). $2 . 3 ~ \\mathrm { I n }$ addition to the information embodied in this standard, the PCS TF will describe a validation process (prototyping) for the standard to identify and address real implementation issues as early as possible; results of this work will be included in future versions. 2.4 The provisional status of this specification will be removed when the following enhancements are added: • Interface data structures and services specifications for the R2R, FD, FC, FP and SPC functional groups, and • Additional compliance verification procedures for the R2R, FD, FC, FP and SPC functional groups. 2.5 Note that conformance with this standard as defined in $\\ S 1 1$ is not enforceable until\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 2  Scope\n\nContent: the complete data structures have been defined for at least one functional group. NOTICE: This standard does not purport to address safety issues, if any, associated with its use. It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 3  Limitations\n\n3.1  The proposed PCS standards will not focus on:  \n• Low-level communication mechanisms (for example, hardware connection schemes, transport layer software, etc.) between PCS functional groups,\n• Methodology for implementing actual equipment or factory level control strategies,\n• Specifying internal structure or implementation methods of PCS functional groups,\n• Capabilities of complementary applications (recipe management, data collection, engineering analysis, data storage, scheduling, change control, …),\n• The management of information and collaboration between functional groups.  This is left to implementation,\n• Communications within equipment or within factory systems,\n• Determination of the proper control algorithm, model, or runtime selectable behavior.  It is optional for a PCS function to contain “context matching”,\n• The creation and management of Process Control System Jobs, or\n• Defining test procedures required for validating the standard.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 4.1  SEMI Standards (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 4.1  SEMI Standards\n\nContent: SEMI E81 — Provisional Specification for CIM Framework Domain Architecture SEMI E121 — Guide for Style & Usage of XML for Semiconductor Manufacturing Applications SEMI E125 — Provisional Specification for Equipment Self Description (ESD) SEMI E134 — Specification for Data Collection Management 4.2 Other Sources The Unified Modeling Language Reference Manual, James Rumbaugh, Ivar Jacobson, Grady Booch, 1999 / 0-201- 30988-X / Addison Wesley Professional. The Unified Modeling Language User Guide, Grady Booch, James Rumbaugh, Ivar Jacobson, 1999 / 0-201-57168-4 / Addison Wesley Professional. Object-Oriented Modeling and Design, Prentice Hall, Englewood Cliffs, NJ, 1991 by James Rumbaugh, et. al. Equipment Engineering Capabilities (EEC) Guidelines (Phase 2.0), Version 2.5, International SEMATECH, July 2002. IEC 61158-5, “Digital data communications for measurement and control – Fieldbus for use in industrial control systems – Part 5: Application layer service definition,” Final Draft International Standard,\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 4.1  SEMI Standards (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 4.1  SEMI Standards\n\nContent: 2003. ISO 8601 — Data elements and interchange formats—Information interchange—Representation of dates and times, International Organization for Standardization, (December 2000). NOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5  Terminology\n\n5.1  Abbreviations & Acronyms  \n5.1.1  XML — eXtensible Markup Language\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions\n\nContent: 5.2.1 Advanced Process Control $( A P C ) ^ { 1 }$ — the manufacturing discipline for applying control strategies and/or employing analysis and computation mechanisms to recommend optimized machine settings and detect faults and determine their cause. 5.2.2 Analysis Engine $( A E ) - \\mathrm { ~ a ~ }$ process that utilizes data and possibly operational instructions to produce a response. In the context of this standard, this term is used to encompass the characteristics common to all PCS functional groups. 5.2.3 context — a series of attributes that uniquely identifies a manufacturing entity (e.g., wafer, lot, module, tool, reticle) and its status in the manufacturing operation. 5.2.4 Context Matching (CM) — the process of comparing and matching the values of a set of attributes that represent the state of a system (e.g., process, product and equipment) to a set of stored or computed values. This is usually done so that a unique action can be specified by the context matching system. 5.2.5 Fault\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions\n\nContent: Classification $( F C )$ — the technique of determining the cause of a fault once it has been detected. 5.2.6 Fault Detection $( F D )$ — the technique of monitoring and analyzing variations in tool and/or process data to detect anomalies. Fault detection includes both univariate and multivariate statistical analysis techniques. 5.2.7 Fault Detection and Classification (FDC) — combination of FD & FC. 5.2.8 Fault Prediction (or Prognosis) $( F P )$ — the technique of monitoring and analyzing variations in process data to predict anomalies. 5.2.9 Functional Group (FG) — a collection of closely related software capabilities that one would expect to be provided as an integrated product. 5.2.10 Process Control System Job (PCSJob) — a unit of work that could be tracked and have data associated with it. In the context of this standard a process control system job is associated with a unit of work that a PCS Analysis Engine performs; a unique identifier such as an ID number is often utilized to track the process\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 5.2  Definitions\n\nContent: control system job. 5.2.11 Process Control System $( P C S ) ^ { 1 }$ — a system capable of performing Process Control, which includes one or more of R2R Control, FD, FC, FP, SPC, or any future Process Control functionality defined in this standard for a PCS functional group. 5.2.12 Run-to-Run (R2R) Control — the technique of modifying recipe parameters or the selection of control parameters between runs to improve processing performance. A “run” can be a batch, lot, or an individual wafer. 5.2.13 Statistical Process Control (SPC) — the technique of using statistical methods to analyze process or product metrics to take appropriate actions to achieve and maintain a state of statistical control and continuously improve the process capability.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 6  Background\n\n6.1  With the development of process control system applications at the factory level and inside the equipment, it is now apparent that the lack of interface standards for these applications has inhibited widespread adoption of process control at the factory level.  Moreover, adding process control and integrated metrology capabilities inside the tool requires the ability for the factory level applications to collaborate with tool level applications.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions\n\nContent: 7.1 This section defines conventions followed in this document. 7.2 Object Modeling 7.2.1 Unified Modeling Language (UML) — This specification uses UML notation for all class diagrams and for object diagrams provided as examples. No other types of diagrams are used in this specification. 7.2.2 UML class diagrams have clearly defined meanings and are a part of this specification. Detail contained in these diagrams is not always repeated in the text. 7.2.3 Class Diagrams — UML Class Charts. 7.2.4 Name of a Class — The text capitalizes class names. 7.2.5 Abstract and Concrete Classes — Each class is specified as Abstract or Concrete. Abstract classes are not directly implemented. In this specification “implemented” means represented to the factory through the communications interface. All classes defined as concrete may be directly implemented. This specification does not attempt to define equipment control system implementation. In UML class diagrams, abstract class names are shown in italics. 7.2.6 Class\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions\n\nContent: Attribute Definition — The attributes of a class are defined in table format as illustrated in the table below. Note that the $\" + \"$ sign in front of attributes in UML class diagrams indicates “public” attributes. All attributes defined in this specification are public. Table 1 Attribute Table Format 7.2.6.1 Access — Attributes may be settable (ReadWrite or RW) or not settable (ReadOnly or RO) through the interface services. If the attribute refers to a component of a message (e.g., that is communicated to/from a PCS analysis engine), the concept of access does not apply and “Not Applicable” (NA) is used in the Access field. 7.2.6.2 Reqd — Is this attribute required? Y — Yes, or N — No. 7.2.6.3 Form — Defines the data type of the attribute. Data types specified in the Process Control Systems specification are described in the subsections that follow. Data types in this specification are high-level definitions and should be mapped to the data types of a specific technology as appropriate. Extensions to the\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7  Conventions\n\nContent: Process Control System interface specifications are not limited to the list of data types defined in this specification. See the definition of “Form” in the SEMI Compilation of Terms for other Form values commonly used in SEMI documents.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.2.6.4  Constraints\n\n7.2.6.4.1  Constraints in UML are shown with dotted lines, typically with a note attached to explain the constraint. Constraints shown in this way tend to clutter large UML diagrams.  Therefore, in this specification, constraints are shown only on the diagrams focusing on individual classes.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.2.7  UML Associations (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.2.7  UML Associations\n\nContent: 7.2.7.1 The mechanism used for representing associations in UML between classes is implementation dependent. This document is abstract in nature, and does not specify or imply any such mechanism. Any adjunct standard that provides an implementation of this specification must include a description of the mechanism used for representing UML associations used in this document. 7.2.8 Class Association Table — This table provides an example of the tables used to list and describe associations between classes defined in this specification. Table 2 Association Table Format 7.2.8.1 Association Role Name — The name of the association role being defined. 7.2.8.2 Role Definition — Describes the function or purpose of the association. 7.2.8.3 Comments — Any additional comments or notes regarding the association. 7.2.9 Method Definition — The methods (in other words, the messages that comprise the external interface to an object) supported by a PCS functional group are defined in table format as illustrated below.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.2.7  UML Associations (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.2.7  UML Associations\n\nContent: Table 3 Method Definition Table Format 7.2.9.1 Method — Method name. 7.2.9.2 Arguments — Input parameters. 7.2.9.3 Returns — Output parameters. 7.2.9.4 Requirement — Is this method required of a compliant implementation? Y – Yes, or N – No. 7.2.9.5 Behavior/Comment — Summary description of the method’s purpose and behavior, explanation of expected system response to this method, etc.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types\n\nContent: 7.3.1 The following data types may be used in this specification to describe the form of an attribute or other similar high level definitions. Note that extensions to the Process Control System interface specifications are not limited to the list of data types defined in this specification. • Any — The format may be any of the others listed in this section. Format is determined by the implementation. • Binary — A sequence of bytes that may have any value. Binary values are sometimes called “unformatted” because their structure is not apparent. • Boolean — Takes the value of “true” or “false.” • Checksum — A checksum value calculated on a specific stream of data using a specific method of calculation. Enumeration — A format that allows a specified list of possible values. In this document, these values are represented as text strings, but may be implemented differently (e.g. as integers that correspond to the named values). Status – The Status type is a structure that contains information about whether or not an\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types\n\nContent: error that has occurred in a transmission and information on the type of error. The form of the structure is given in $\\ S 9$ . Integer — A numeric value, Integers are always whole numbers. The form and number of bytes is left to the implementation definition. • list of xxx — An item that can hold multiple instances of a specified type (where xxx is the data type). Real — A numeric value that may represent any whole or fractional number. The form and number of bytes is left to the implementation definition. • Text — A text string. Limitations on length are left to the implementation technology unless otherwise specified in this document. Strings are recommended to be implemented as UTF-8. Time — Representation of the date and time of the occurrence of interest. The structure and form of items of this type is left to the implementation. 7.4 Sequence Behavior 7.4.1 Sequence behavior description is specified in the form of UML Sequence Diagrams. 7.5 State Behavior 7.5.1 State behavior description is specified in\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 7.3  Data Types\n\nContent: the form of UML State Charts.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview\n\nContent: 8.1 Using the simple definition of a Functional Group given in the Terminology section, the initial set of PCS functional groups has been identified. To identify the proper scope (and therefore the boundaries) for these groups, the following criteria are applied to test whether or not a given set of capabilities constitutes a valid PCS functional group. Specifically, a functional group should satisfy one or more of the following requirements: • Support a coherent set of tasks • Share common set of data and must use it under similar constraints (performance, retention, etc.) • Internal objects are tightly coupled Legacy implementation/integration constraints exist (for example, the capabilities are inseparable because an external system must interact with them as an integrated whole) Strong associations exist in the market (that is, one would expect these capabilities to be provided as an integrated product) 8.2 Based on theses criteria, and the stated implementation priorities of the semiconductor manufacturers and\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview\n\nContent: suppliers involved on the task force, the following initial PCS functional groups have been identified: R2R (Run-to-Run) Control FD (Fault Detection) FC (Fault Classification) FP (Fault Prediction) SPC (Statistical Process Control) 8.3 Note that it is understood that other PCS functional groups can be added as needed. Future versions of the document will describe procedures for adding a new group. 8.4 The aforementioned groups can be implemented at the tool or factory level or both. As a requirement, functional group interfaces should be defined in a consistent way. The following diagram represents the proposed functional groups and an example of their interactions within the factory and tool environments. 8.4.1 Process Control Systems may consist of a variety of capabilities or functions at both the factory and equipment level as shown in Figure 1. Moreover, this may include multiple instances of the same function type from different suppliers. In the example above, several run-to-run controllers are running at\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 8  Overview\n\nContent: the factory level with differences that are only visible as internal special capabilities. This interface standard will facilitate easier collaboration between the tool level functions and factory level systems independent of the supplier that developed the internal function’s capabilities.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.1  Functional Group Partitioning (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.1  Functional Group Partitioning\n\nContent: 9.1.1 Process control systems are partitioned into functional groups using the criteria defined in $\\ S 8$ . This standard defines the interface data structures, services and behavior associated with these functional groups. In this section the capabilities of the PCS functional groups are defined in more detail. First of all, the basic capabilities common to all functional groups are presented. Then the additional basic capabilities unique to each functional group are presented. A high level description of the specifications of data structures, services and behavior are described in $\\ S 1 0$ . 9.1.2 It is important to note that the specific implementations of these various functional groups may differ greatly in the level of capability delivered, performance, quality of service, and internal architecture. Moreover, in a given factory, there may be multiple instances of the same functional group running concurrently, from one or more suppliers. Some functional groups may be completely\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.1  Functional Group Partitioning (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.1  Functional Group Partitioning\n\nContent: independent of other PCS functional groups (in other words, they can operate in relative isolation, depending only on information from systems external to PCS); others may depend heavily on other functional groups, collaborating closely to provide a higher level of capability than they could on their own. 9.1.3 The goal of the PCS interface standards is to enable all of these implementation scenarios (and more) withou dictating internal product architectures.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2  PCS Analysis Engine\n\n9.2.1  As defined in $^ { \\ S 8 }$ , all functional groups can be thought of as specializations of a PCS Analysis Engine and therefore inherit the structure and behavior of a PCS Analysis Engine.  This section defines the common capabilities of a PCS Analysis Engine.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.2  General Capability Description (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.2  General Capability Description\n\nContent: 9.2.2.1 All PCS Analysis Engines shall have inputs and outputs as shown in Figure 2. This means that the PCS Analysis Engines shall support the consumption of the specified inputs and production of the specified outputs as necessary to achieve the required capabilities of that analysis engine as specified in this standard. These inputs and outputs are specified as aggregate data structures. The structures are aggregated into “collection types” according to the category of data. A definition of these collection types is provided in Table 4. The PCS Analysis Engine shall have the general behavior of utilizing specified inputs, performing tasks based to some degree on these inputs, and generating outputs. Any additional structure and behavior of various PCS Analysis Engines are outlined in the remainder of this section and specified in detail in $\\ P 1 0 . 4$ . 9.2.2.2 Note that, in addition to limitations of specification defined in $\\ S 4$ , the following are beyond the scope of definition\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.2  General Capability Description (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.2  General Capability Description\n\nContent: of the PCS Analysis Engine: • the level of synchronization of inputs with performance of tasks and/or generation of outputs, and • the specification of any internal states of the PCS Analysis Engine. 9.2.2.3 All PCS Analysis Engines belonging to this functional group shall have the capabilities listed in Table 5. 9.2.2.4 Note that based on the simple data model shown in Figure 2, Inputs are available as an Output from an Analysis Engine. Data provided as input to an Analysis Engine should be accessible as output from the Analysis Engine for historical purposes. Table 4 PCS Analysis Engine Inputs and Outputs Collection Type Definitions Table 5 PCS Analysis Engine Functional Group Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: 9.2.3.1 Common Data Model Overview — The common interface data structures from which all PCS functional groups may inherit are shown in Figure 3. This figure shows the basic types of information (“classes” in object terminology) that can be supported by the interface. This model applies to the structure of inputs as well as outputs of a PCS analysis engine as shown in Figure 2. This model applies to a complete message associated with a PCS Job. That is it applies to the complete set of information communicated to or from a PCS AE for a PCS job. Note that a complete message into or out of a PCS AE may be broken into multiple application-to-application communications as defined in ${ \\ P } { \\cdot } 2 . 3 . 5$ . 9.2.3.2 Class Definitions — Class definitions consist of a brief description of each class, a table defining any attributes belonging to that class, and further text as necessary to fully define the class. 9.2.3.2.1 AnalysisEngineDataSet — A composite data structure that represents\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: the data associated with a single input or output message of an AE. Table 6 Attributes of AnalysisEngineDataSet 9.2.3.2.1.1 PCSJobID — The specification that PCSJobID is a required attribute of AnalysisEngineDataSet along with the specification that it is a unique identifier of a PCS Job means that a unique PCSJobID shall be associated with each PCS Job. The management of the uniqueness of the PCSJobID can be performed by an AE or by an application that wishes to utilize the capabilities of an AE. The application communicating with the AE is assumed to generate and manage PCSJobIDs for all PCS jobs, however the AE is required to provide this functionality in the event that the application does not wish to provide it. The existence of the PCSJobID attribute is conditional upon the following: If the application communicating with the AE is managing a PCSJobID for a PCS job, then that PCSJobID shall be provided as the value of the PCSJobID attribute for all interface data structures of type\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: AnalysisEngineDataSet associated with that PCS Job. If the AE is providing the functionality of generating a PCSJobID for a PCS job, then the PCSJobID shall be provided in the first communication from the AE (to any consuming application) for this job and all subsequent communications associated with this job. The PCSJobID is not required for transactions that do not involve the AE executing a Process Control Job such as status checks, or pre-processing queries. 9.2.3.2.1.2 PCSAETargets — This attribute indicates a list of AE types targeted by the AnalysisEngineDataSet; it is structured as an ordered list of type PCSAETarget (see below). At most one PCSAETargets value shall be associated with Each PCSJobID. Thus any two messages received by a PCS AE with the same PCSJobID will have at most one value for PCSAETargets, which could be provided in either or both messages. Each AE that receives this parameter in an input AnalysisEngineDataSet will echo the parameter and its value for all\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 4)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: output AnalysisEngineDataSet messages with that PCSJobID. 9.2.3.2.1.2.1 PCSAETarget — This attribute class represents an AE targeted by the current PCSJob. The PCSAETarget attribute is used to differentiate PCS AE targets when a single message travels between multiple AE’s (often referred to as a “daisy chain”). In this case the AEType and AEInstance attributes of the PCSAETarget (see below) can be utilized to identify a particular consumer for the AnalysisEngineDataSet data. Note that in many cases, such as point-to-point communications between an AE client and a single AE, the PCSAETarget attribute may not be necessary. 9.2.3.2.1.2.1.1 This attribute has the following form: Figure 4 PCSAETarget Data Structure Table 7 PCSAETarget Attribute Definition 9.2.3.2.1.2.1.2 The specification of how the AEs will consume the information is beyond the scope of this standard. 9.2.3.2.1.2.1.3 The AEType enumeration of “PCS” is used to indicate a generic PCS type, or is an unspecified type\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 5)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: 9.2.3.2.1.2.1.4 An AEInstance value is not specified indicates that the instance of AEType is unspecified. 9.2.3.2.1.2.1.5 When multiple PCSAETarget instance values are specified, the target PCS application to which these values refer should execute the PCSJob associated with the PCSJobID in sequence. The mechanism for ensuring this behavior is beyond the scope of this standard. 9.2.3.2.1.2.1.6 Instructions is an ordered list of elements, each of which is an instruction and is of type text. Note that no two elements in the ordered list can have the same value. An instruction is an attribute that relates a specific task that is being requested to be carried out by a targeted AEInstance. 9.2.3.2.1.3 Status — This conditional attribute class relates properties of the success or failure of a PCS AE, identified in PCSAETargets, to execute a PCSJob. The attribute has the following form: Table 8 StatusElement Attribute Definition 9.2.3.2.1.3.1 The existence of the StatusElement attribute is\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 6)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: conditional on the properties of the message containing a data structure of type AnalysisEngineDataSet. The StatusElement attribute shall exist if and only if the following conditions apply: The message is an output from an AE. • The message is a response to a request for service(s) from that AE, e.g., a reply message. 9.2.3.2.2 DataCollection — A set of data and associated context for that data that conforms to the PCS AE common input/output structure as defined in $\\ P { \\cdot } 2 . 2 . 1$ Table 9 Attributes of DataCollection 9.2.3.2.2.1 CollectionType — An enumeration of BinCategory as defined in Table 4. 9.2.3.2.3 DataItem — An individual component of a data collection that has meaning in the PCS environment. Each data item has a role of either “context” or “data” as determined by the client of the PCS AE. Table 10 Attributes of DataItem 9.2.3.2.3.1 Name — This attribute is used to provide a level of understanding of the meaning and purpose of the DataItem. Names shall consist of\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 7)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: alphanumeric characters, spaces, hyphens and underscores. Names shall start with an alpha character, and shall not contain leading or trailing spaces. 9.2.3.2.3.2 Value — AbstractValue as defined in SEMI E134 is an abstract base class that is used to represent standard types including: Integer, Real, Boolean, String, Binary, Structure, Array, and Enumerations. In this way, parameter values collected via SEMI E134 may be passed directly into the PCS compliant AE via the value attribute of a DataItem. Refer to SEMI E134 for further definition of the AbstractValue type. AbstractValue base class allows for arbitrarily complex data items to be passed into the AE. 9.2.3.2.3.3 A DataItem that belongs to a DataCollection whose CollectionType is “Globals” may not serve a role of data (i.e., it can only serve the role of context). 9.2.3.2.3.4 It is not required that the PCS AE utilize a data item in the same role (Data or Context) as is specified by the PCS AE client, however the PCS AE is\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 8)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: required to maintain the role representation in I/O data structures produced or consumed across a PCS AE interface. 9.2.3.3 Ordering of Elements Within An AnalysisEngineDataSet — In addition to compliance with a data structure model, this standard also defines rules governing ordering of classes and attributes within each AnalysisEngineDataSet instance, corresponding to the data content of an AE I/O message. Figure 4 provides a general illustration of this ordering. The following are rules governing that ordering. 9.2.3.3.1 The first attribute of any AnalysisEngineDataSet shall be the Process Control System Job ID (PCSJobID), if the PCSJobID value has been determined as defined in ¶9.2.3.2.1. 9.2.3.3.2 The first attribute of any DataCollection shall be BinCategory. 9.2.3.3.3 The first DataCollection shall be of BinCategory “Globals” if the AnalysisEngineDataSet contains a DataCollection of that kind. At most one DataCollection shall be of BinCategory “Globals” in any\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures (Part 9)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3  Common Interface Data Structures\n\nContent: AnalysisEngineDataSet. 9.2.3.3.4 In each DataCollection all DataItems whose role is “Context” shall occur before the first DataItem whose role is “Data” occurs.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet\n\nContent: 9.2.3.4.1 If multiple AnalysisEngineDataSet instances are “related”, as defined in $\\ P 9 . 2 . 3 . 2 . 1 \\$ and both contain the same DataCollection with the same value of BinCategory, and further contain the same DataItem (with the same “Name”) within that DataCollection, the last DataItem shall be assumed to be correct. The interpretation of ordering of information as communicated by the underlying protocol is beyond the scope of this document. 9.2.3.4.2 Within an AnalysisEngineDataSet instance or a group of instances that are “related”, as defined in ${ \\ P } \\{ 9 . 2 . 2 . 1$ , a DataItem may exist within multiple DataCollections that has a role of context. If this condition exists, the following rules shall apply. 9.2.3.4.2.1 Any Context DataItems defined in a DataCollection with BinCategory $\\mathbf { \\tau } = \\mathbf { \\tau }$ “Globals” should be used as Context DataItems for all other BinCategorys in any related message except as defined in ¶9.2.3.3.2.2\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet\n\nContent: below. 9.2.3.4.2.2 If a DataCollection with a BinCategory other than “Globals” defines a Context DataItem that is also defined in the Global BinCategory of the current message or a related message, the local BinCategory DataItem value should be used as context, i.e., the local Context DataItem overrides the Global value inside this DataCollection. 9.2.3.5 Utilizing multiple application-to-applications to communicate a PCS — A PCS message may be broken into a number of application-to-application communications or partitions, however it is not required that a PCS AE support this partitioning capability. Each of these communication partitions must conform to the data model of Figure 3, with the following modifications: 9.2.3.5.1 PCSAETarget minimum cardinality is zero. 9.2.4 Common Interface Services 9.2.4.1 All PCS Analysis Engines shall support the following common interface services: A set of services shall exist to support input of data into the engine, A set of\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet\n\nContent: services shall exist to support access to data from the engine, A set of services shall exist to support logging and exception handling, and A set of services shall exist to support execution and model update. 9.2.4.2 These services will be defined further in $\\ S 1 0$ . Each class in the interface could be part of an input or an output message. 9.2.5 Common Behavior 9.2.5.1 All PCS Analysis Engines shall support the following common behavior: Accept inputs, and Provide outputs. 9.2.6 Analysis Engine General Capability Description 9.2.6.1 An AE module should accept the following inputs and outputs using the common interface structure described in Figure 3. Not all inputs and outputs are required depending on the functionality needed by the AE. 9.2.7 Inputs—The following data types and data values are used in AE input messages. 9.2.7.1 No data types or data values are specified for the general AE. 9.2.8 Outputs—The following data types and data values are used in AE\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet (Part 4)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.2.3.4  Additional Requirements of an AnalysisEngineDataSet\n\nContent: output messages. 9.2.8.1 No data types or data values are specified for the general AE. 9.3 Run-to-Run Control Functional Group 9.3.1 This section defines the common capabilities and interface data structures of the R2R Control functional group. 9.3.2 Table 9 below describes the specialization for the R2R Control functional group of each inherited general capability described in Table 5. 9.3.3 Table 10 describes the additional capabilities unique to the R2R Control functional group. Table 11 R2R Control Functional Group Inherited Capabilities Table 12 Additional R2R Control Functional Group Capabilities #1 C indicates “conditional” with the conditions specified in the Comment column.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.3.4  R2R General Capability Description\n\n9.3.4.1  A R2R module should accept the following inputs and outputs using the common interface structure described in Figure 5.  Not all inputs and outputs are required depending on the functionality needed by the R2R model.  For example, R2R function may only need feedback data in the form of Substrate Data.  \n9.3.5  Inputs—The following data types and data values are used in R2R control input messages:  \n9.3.5.1  The R2R Controller analysis engine inherits the input data structure and data structure requirements from the PCS Analysis Engine.  \n9.3.5.2  The following data types and data type values shall be supported by a R2R control analysis engine when included in an input data structure, where supported means that the AE will be able to utilize the information provided by the data type and perform any indicated action associated with that data:\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.3.5.2.1  PCSAETarget Class (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.3.5.2.1  PCSAETarget Class\n\nContent: 9.3.5.2.1.1 Attribute AEType with a value of “R2R” 9.3.5.2.1.2 A list element of attribute Instructions with a value of “R2RCalculateControlAdvice” 9.3.5.2.1.3 A list element of attribute Instructions with a value of “R2RUpdateModel”. 9.3.6 Outputs — The following data types and data type values are used in R2R control output messages 9.3.6.1 The R2R Controller analysis engine inherits the output data structure and data structure requirements from the PCS Analysis Engine. 9.3.6.2 The following data types and data type values shall be supported by a R2R control analysis engine when included in an output data structure, where supported means that the AE will be able to provide these data types and values when behavioral conditions warrant, as indicated below. 9.3.6.2.1 DataCollection Class — The following DataItem Names or Name/Value pairs shall be supported for DataItems in the specified BinCategory. Table 13 Data Types Required to be Supported by an Input Message for an Analysis Engine #1 Where, in\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.3.5.2.1  PCSAETarget Class (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.3.5.2.1  PCSAETarget Class\n\nContent: the Role column, ‘D’ indicates “data” and $\\mathbf { \\cdot } \\mathbf { \\vec { C } } \\mathbf { \\cdot } \\mathbf { \\vec { \\mu } }$ indicated “context” #2 N.A. indicates “not applicable”, because specification is on DataItem as opposed to a specific value of DataItem. 9.3.6.2.2 ControlAdvice — This attribute contains the control advice, structured as an unordered list of name-value pairs. The method in which the control advice is utilized is beyond the scope of this document. 9.4 Fault Detection Functional Group 9.4.1 This section defines the common capabilities of the FD functional group. 9.4.2 Table 11 describes the specialization for FD of each inherited general capability described in Table 5. 9.4.3 Table 12 describes the additional capabilities unique to the FD functional group. Table 14 FD Functional Group Inherited Capabilities Table 15 Additional FD Functional Group Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.5  Fault Classification Functional Group\n\n9.5.1  This section defines the common capabilities of the FC functional group.\n9.5.2  Table 13 describes the specialization for FC of each inherited general capability described in Table 5 above.\n9.5.3  Table 14 describes the additional capabilities unique to the FC functional group.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 16  FC Functional Group Inherited Capabilities\n\nTable 17  Additional FC Functional Group Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.6  Fault Prediction Functional Group\n\n9.6.1  This section defines the common capabilities of the FP functional group.  \n9.6.2  Table 15 describes the specialization for FP of each inherited general capability described in Table 5 above.  \n9.6.3  Table 16 describes the additional capabilities unique to the FP functional group.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 18  FP Functional Group Inherited Capabilities\n\nTable 19  Additional FP Functional Group Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 9.7  Statistical Process Control Functional Group\n\n9.7.1  This section defines the common capabilities of the SPC functional group.  \n9.7.2  Table 17 below describes the specialization for SPC of each inherited general capability described in Table 5 above.  \n9.7.3  Table 18 describes the additional capabilities unique to the SPC functional group.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 20  SPC Functional Group Inherited Capabilities\n\nTable 21  Additional SPC Functional Group Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10  Method Capabilities and Behavior (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10  Method Capabilities and Behavior\n\nContent: 10.1 All PCS functional groups inherit certain capabilities, methods, and behavior from the general PCS Interface. This interface provides support primarily for general execution and publish/subscribe communications. Publish/subscribe is a type of communications where data produced by an application process can be consumed by a number of application processes that belong or “subscribe to” the communication environment. Additional information on the publish/subscribe communications approach can be found in reference $\\ S 4$ . 10.2 This standard specifies both required ‘methods’ as well as ‘capabilities’, which must be supported by any PCS Analysis Engine. Support for the required methods must use the defined method names, as well as the specified argument and return data types. Most Arguments and Returns must be of the type AnalysisEngineDataSet. The AnalysisEngineDataSet type is a set of aggregate data structures as defined in $\\ S 9$ . Support for the stated “methods” must be provided as\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10  Method Capabilities and Behavior (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10  Method Capabilities and Behavior\n\nContent: specified. Support for “method capabilities” must be provided by any PCS-conformant functional group, but how these capabilities are supplied – including specific arguments and returns, method, argument and return names, and argument and return data types - are either beyond the scope of this standard or specified elsewhere in this standard, e.g., in specification of the interface data structure. The data types used as the Arguments and Returns for each capability are general data types, and are guidelines only. 10.3 The general PCS Interface required methods and capabilities are summarized in the table below and described more fully in the accompanying sections.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.4.1  Common Analysis Engine Method Capabilities\n\n10.4.1.1  The capabilities described in the following section and Table XYZ are required in any PCS-compliant Analysis Engine. However, the form of their implementation is not a part of this standard. The approach by which the method capability is accessed by a client, be it via method invocation, database queries and triggers, etc, is subject to the decisions of the implementer. Also, the exact data types used for the Arguments and Returns are up to the developer.  Additional arguments or return types may also be required depending on the implementation technology.  \n10.4.1.2  These method capabilities are generalizations of “Publish/Subscribe” interfaces.  Note that there is not necessarily a one-to-one correspondence between method capabilities as defined herein and methods in an implementation of these capabilities.  \nTable 22  Common PCS Analysis Engine Method Capabilities\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.4.2  Common Analysis Engine behavior\n\n10.4.2.1  No additional common AE behavior is specified.  \n10.5  R2R Control AE Method Capabilities and Behavior\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.5.1  R2R Control AE Method Capabilities\n\n10.5.1.1  No method capabilities for this AE type are specified.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.5.2  R2R Control AE Behavior (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.5.2  R2R Control AE Behavior\n\nContent: 10.5.2.1 The R2R control behavior defines the operation of the R2R Control AE in providing capabilities. The interface (methods, capabilities and behavior) is inherited from the common PCS interface. Inherited methods are identical in form to the methods required in the Analysis Engine interface. However, their implementation is specific to R2R Control analysis engines. 10.5.2.2 If a R2R AE receives an input message of type AnalysisEngineDataSet for a process control job, and, in a PCSAETarget attribute of that message, one of the list of instructions in the Instructions attribute has a value of “R2RCalculateControlAdvice”, then the R2R control AE shall provide an output message of type AnalysisEngineDataSet that contains the data item name “ControlAdvice” in a DataCollection where BinCategory $\\scriptstyle = =$ “CalculatedOutputs”. 10.5.2.3 If a R2R AE receives an input message of type AnalysisEngineDataSet for a process control job, and, in a PCSAETarget attribute of that message, one of the\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.5.2  R2R Control AE Behavior (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 10.5.2  R2R Control AE Behavior\n\nContent: list of instructions in the Instructions attribute has a value of “R2RUpdateModel”, then the R2R control AE shall utilize information provided as part of the associated PCS job to update control models as necessary. The determination of need to update models and the method in which these models are updated is beyond the scope of this standard.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11  Compliance to PCS Standard\n\n11.1  This section defines requirements placed on process control systems for claiming compliance with this standard and verifying compliance with this standard.  The standard does NOT include specific verification test plans, but there should be enough information in the standard to generate these.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach\n\nContent: 11.2.1 This standard specifies the interfaces for PCS functional groups. Compliance with this standard is verified through testing these interfaces to verify compliance of data structures and behavior to the extent specified in this standard. 11.2.2 As noted in $\\ S 9$ , all PCS Analysis Engines are characterized as having a set of capabilities, and a collection of inputs and outputs, with the outputs being a function of the inputs. The general approach to compliance testing then is to first document the capabilities, and then test the inputs and outputs by (1) generating inputs for the PCS Analysis Engine to consume and (2) observing corresponding outputs of the engine. It is understood that there are a number of behavior models that an Analysis Engine shall use to consume inputs and produce outputs, such as active polling by the engine or a request message from an outside source to the Analysis Engine. The compliance testing method should utilize a mechanism that works with the behavioral model of the Analysis\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach\n\nContent: Engine for subscription to (i.e., consumption of) inputs and publication of (i.e., production of) outputs. 11.2.3 Note also that all PCS Analysis Engines inherit a set of common requirements. Thus, the approach for testing any PCS Analysis Engine should be to first verify compliance to the common requirements, and then verify compliance to the requirements specific to the particular functional group. 11.3 Scope of Compliance Verification 11.3.1 Compliance Verification shall address the following: Documentation of functional group capabilities 11.3.2 Future version of this standard will also address the following compliance verification: • Capability to accept all required inputs • Capability to accept properly formatted interface data structures • Capability to produce all required outputs; these outputs may be in response to the inputs as specified herein • Capability to produce properly formatted output data structures 11.3.3 Compliance verification will not address the following: • Engine response to\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.2  Approach\n\nContent: improperly formatted inputs • Quality of Service (QoS) of data in output structures produced by engine • Quality of Performance (QoP) of engine in producing output structures (e.g., in response to receipt of input structures) 11.4 Statement of Compliance (SoC): Functional Group Capabilities Data Sheet 11.4.1 All PCS Analysis Engines claiming compliance with this standard are required to be delivered with a statement of compliance sheet on functional group capabilities. This sheet specifies for the user which functional capabilities, specified as required or conditional in this standard, are available with this engine. The format of the SoC sheet is given in Table 21, which includes a description of the fields of this sheet:\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet\n\nContent: 11.4.2 Company — Name of company supplying product. 11.4.3 Product — Name of product being supplied. 11.4.4 Version — Any additional descriptors that supplier applies to product (such as software revision number) that, along with Product Name, uniquely identifies product. 11.4.5 Functional Group(s) — The functional groups, as defined in this standard, to which compliance is being claimed. 11.4.6 Functional Group Capabilities — The functional group capabilities as specified in this standard for the functional group(s) to which compliance is being claimed (as indicated in the “Functional Group(s)” field). Note that all capabilities specified in this standard for the functional groups, to which compliance is being claimed, must be listed, and are organized by the fields below. 11.4.7 Functional Group #n — The name of the ‘n-th’ functional group to which compliance is being claimed, e.g., “R2R”, “FD”, “FC”, “FP”, or “SPC”. 11.4.8 # — The index number\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet\n\nContent: (copied from the “#” field for that capability). 11.4.9 Description — The functional group capability description copied verbatim from this standard (copied from the “Description” field for that capability), for the PCS analysis engine functional group listed. 11.4.10 Requirement — The requirement of the capability as defined in this standard (copied from the “Requirement” field for that capability). 11.4.11 Supported — This field contains the PCS analysis engine provider’s claim of support of this capability. The claim could be “Yes” (“Y”), “No” (“N”), “Conditional” (“C”), or “Optional” (“O”). Note that if the capability is listed as a requirement then it must be supported. 11.4.12 Comment — This field contains any additional information that the PCS analysis engine provider may wish to provide. Note that if the “Supported” field is listed as “Conditional” or “Optional”, the conditionality or optionality conditions must be delineated in this field.\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet (Part 3)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet\n\nContent: 11.5 PCS Analysis Engine Compliance Verification Procedure 11.5.1 The following procedure should be applied to all PCS Analysis Engines: 11.5.2 Compliance: Functional Group Capabilities Data Sheet Verification Test: Is a properly formatted SoC data sheet supplied with product? Pass Criteria: • A properly formatted SoC data sheet, as specified in $\\ P 1 1 . 3$ is provided with product. • The Product $^ +$ Version fields uniquely identify product. • At least one functional group is claimed, i.e., the engine declares to belong to at least one functional group as specified in this standard. All functional group capabilities for each functional group claimed in the “Functional Group” field are listed as defined in $\\ S 9$ , and the requirement field matches that provided for each capability in $\\ S 9$ . • For each capability listed as required, it must also be supported (i.e., if Requirement $\\mathrm { \\Omega = - \\Gamma \\mathcal { Y } ^ { \\prime } }$ , then\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet (Part 4)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # Table 23  PCS Analysis Engine SoC Functional Group Capabilities Data Sheet\n\nContent: Supported $\\mathrm { { \\Omega } = \\mathrm { { \\vec { \\Gamma } Y } ^ { \\prime } } }$ ). • For each capability listed as conditional, the conditions, defined in $\\ S 9$ , must be met. • For each capability listed as optional (i.e., not required), a declaration of whether the requirement is supported must be made (i.e., the “Supported” field for this requirement must be filled in).\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.6  Condition of Compliance (Part 1)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.6  Condition of Compliance\n\nContent: 11.6.1 A PCS Analysis Engine can be considered to be compliant with this standard if and only if it passes all of the compliance tests for the Analysis Engine in $\\ P 1 1 . 5$ . NOTICE: SEMI makes no warranties or representations as to the suitability of the guidelines set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this guideline, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this guideline. Users of this guideline are expressly advised that determination of any such patent rights or copyrights, and the risk of\n\nSEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.6  Condition of Compliance (Part 2)\n\nTitle: SEMI E133-0705PROVISIONAL SPECIFICATION FOR AUTOMATED PROCESSCONTROL SYSTEMS INTERFACE - # 11.6  Condition of Compliance\n\nContent: infringement of such rights are entirely their own responsibility.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT\n\nContent: This specification was technically approved by the Global Information & Control Committee and is the direct responsibility of the North American Information & Control Committee. Current edition approved by the North American Regional Standards Committee on July 11, 2004 and August 16, 2004. Initially available at www.semi.org September 2004; to be published November 2004. Originally published July 2004. E This standard was editorially modified in November 2004 to correct editorial errors in Figures 21 and 22. NOTICE: The designation of SEMI E134 was updated during the 0305 publishing cycle to reflect the creation of SEMI E134.1. 1 Purpose . 2 Scope ... 2 2.1 In-scope 2.2 Out-of-scope . 2 3 Limitations.. 2 3.1 Abstract Model . .2 4 Referenced Standards . 4.1 Non-SEMI Standards. 4.2 SEMI Standards. 5 Terminology 3 5.1 Abbreviations and Acronyms. 5.2 Definitions . 6 Conventions. 6.1 Terms .4 6.2 Notation . 7 Background. .6 7.1 Equipment Data Collection 6 8 Overview .8 8.1 Data Collection Concepts. 8 8.2 Trace Data. 8.3 Events .8 8.4 Exceptions. .9 8.5 Data\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT\n\nContent: Collection Plans. 9 8.6 Equipment Operational Performance Monitoring. .9 8.7 Ad-hoc Data Requests. .9 9 Data Collection Plan Management ....10 9.1 DataCollectionManager Interface. ....10 10 DCP Privilege Model. .27 10.1 Privileges ... .27 11 Data Collection Plan Definition. ..29 11.1 DataCollectionPlan .. .29 12 Data Collection Plan State Models . ..35 12.1 DataCollectionPlan State Model. ..35 12.2 DataCollectionPlan-Active State Model. ...38 12.3 Trace Request State Model . ...41 13 Operational Performance Monitoring ..44 13.1 Operational Performance Conditions State Model ..44 14 Data Collection Report Formats ...45 14.1 Data Collection Reports . ...45 14.2 Parameter Values . ..50 14.3 Primitive Parameter Values.. .51 14.4 Structured and Enumerated Parameter Values ..53 14.5 Time Format . ..55 15 DCP Consumer Interface. 56 15.2 DCPConsumer 56 16 Requirements for Compliance . .60\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 1  Purpose\n\n1.1  This specification describes a method for data acquisition consumers to request process and operational data from equipment to be communicated in an automated fashion by the equipment, or in an ad-hoc request from the consumer. It includes a mechanism for organizing related data into groups to make it more straightforward for enabling or disabling a large number of data sources, and to allow consumers to organize related data into groups according to their purpose.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 2.1  In-scope\n\n2.1.1  This specification provides a means to acquire event, exception, and trace data from semiconductor equipment through the use of a named data collection plan.  This specification defines what form a data collection plan takes, the meaning of its contents, and an interface for managing them that is to be supported by the equipment.  \n2.1.2  This specification defines the behavior associated with the execution of data collection plans in the form of finite state machines.  The formats for data produced as a result of executing a data collection plan are also defined, as is the interface that must be supported by consumers of data collection plan output.  \n2.1.3  This specification defines a way for the equipment to notify consumers when the combination of activities on the equipment, including data acquisition, are causing the equipment to perform below supplier-defined criteria.  \n2.1.4  This specification defines a way for consumers to make ad-hoc on-demand requests for data from the equipment, outside of a data collection plan.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 2.2  Out-of-scope\n\nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 3.1  Abstract Model (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 3.1  Abstract Model\n\nContent: 3.1.1 This specification does not define a convention for naming or identifying sources, parameters, events, or exceptions. This document assumes that all such entities can be identified separately and represented as text. Such conventions shall be fully specified by any implementation mapping of this specification. 3.1.2 This specification does not define the mechanism used for identifying or authenticating consumers or enforcing privileges. It assumes that consumers can be uniquely identified by a text value, and that the equipment is capable of enforcing the standard privileges defined in this document. Such mechanisms shall be fully specified by any implementation mapping of this specification. 3.1.3 This specification does not define the mechanism used for determining how to locate consumers that are to receive the events defined by this specification. It assumes that the equipment has established a communications context with any consumers that can submit requests and has provided any context necessary to send events to those\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 3.1  Abstract Model (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 3.1  Abstract Model\n\nContent: consumers. Such mechanisms shall be fully specified by any implementation mapping of this specification. 3.1.4 This specification does not define any algorithms or heuristics to use for detecting degrading equipment operational performance. Such techniques are specific to the equipment’s internal hardware and software architecture and will very likely be unique to each class and/or model of equipment. It assumes that it is possible to detect such conditions and to identify which systems comprising the equipment are affected. 3.1.5 This specification is an abstract model only. Adjunct specifications must be developed to map this specification to an implementation technology.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 4  Referenced Standards\n\n4.1  SEMI Standards  \nSEMI E30 — Generic Model for Communications and Control of Manufacturing Equipment (GEM)  \nSEMI E40 — Standard for Processing Management  \nSEMI E94 — Provisional Specification for Control Job Management  \n4.2  Non-SEMI Standards  \nInternational Standards Organization (ISO) 11578:19961  — Information technology Open Systems Interconnection – Remote Procedure Call definition of UUID  \nISO $8 6 0 1 ^ { 2 }$ — Representations of dates and times, 1988-06-15  \nISO 8601 Draft Revision — Representations of dates and times, draft revision, 2000  \nUnified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-673  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 5  Terminology (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 5  Terminology\n\nContent: 5.1 Abbreviations and Acronyms 5.1.1 Descriptions of many of the abbreviations and acronyms used in this specification may be found in the SEMI Compilation of Terms, available on the SEMI web site, http://www.semi.org/. In most cases, these terms are not included in this section. 5.1.2 DCP — Data Collection Plan 5.1.3 UML — Unified Modeling Language 5.2 Definitions 5.2.1 Definitions or descriptions of many of the terms used in this specification may be found in the SEMI Compilation of Terms, available on the SEMI web site, http://www.semi.org/. In most cases, these terms are not included in this section. 5.2.2 Related Information, Section 1, contains useful definitions of UML terms taken directly from the UML standard. UML terms used in this document conform to these definitions. Please refer to this Section as needed. 5.2.3 collection result — the set of data values obtained during trace data collection. 5.2.4 collection frequency — the rate at which the collection of one or more data values is performed. This is not the same as the\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 5  Terminology (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 5  Terminology\n\nContent: frequency with which the equipment internally samples these data from its components. 5.2.5 data source — a physical or logical entity associated with the equipment that is capable of providing data values independently of other equipment entities. 5.2.6 event source — a physical or logical entity associated with the equipment that is capable of generating events independently of other equipment entities 5.2.7 exception source — a physical or logical entity associated with the equipment that is capable of generating exceptions independently of other equipment entities 5.2.8 parameter source — a physical or logical entity associated with the equipment that is capable of providing parameters independently of other sources. This term may be used interchangeably with ‘data source’. 5.2.9 source id — a name or other token that uniquely identifies a specific origin or producer of information from among possible sources.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.1  Terms\n\n6.1.1  Class, Data Type, Stereotype Name — This specification uses the terms “class”, “data type”, “type”, or the class stereotype name interchangeably to refer to a UML class.  \n6.1.2  Consumer — This specification uses the term “consumer” to refer to any software entity that uses the DataCollectionManager interface to manage data collection on the equipment.  \n6.1.3  Built-in DCP — This specification uses the term “built-in” DCP to refer to pre-defined DCPs that are provided with the equipment.  Built-in DCPs can be activated by any consumer, but can not be changed or deleted by any consumer.  See Section 11.1.2.1 for details.  \n6.1.4  Reporting, Buffering, Sending — This specification uses the term “reporting” to refer to the act of collecting event, exception, or trace data values to later be sent to a consumer.  The term “buffering” is used to refer to the act of storing a data report on the equipment for some period of time before sending to a consumer.  The term “sending” is used to refer to the act of sending a report to a consumer.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: 6.2.1 Unified Modeling Language Notation — All class and sequence diagrams in this specification make use of the Unified Modeling Language notation. 6.2.1.1 UML Stereotypes — This specification uses the following stereotypes in class diagrams: <<privilege>> — Classes with this stereotype identify an abstract privilege concept that grants permission to a consumer to perform an activity or operation. <<interface>> — Classes with this stereotype define a collection of operations and their semantics. It is the responsibility of the equipment and its consumers, where specified, to provide implementations of these classes. <<enumeration>> — Classes with this stereotype identify data types that have a finite set of discrete values that can be assumed by instances of the class. 6.2.2 UML Associations — The mechanism used for realizing UML associations between classes is implementation dependent. This document is abstract in nature, and does not specify or imply any such mechanism. Any adjunct standard that provides an implementation of this\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: specification must include a description of the mechanism used for representing the UML associations shown in this document. 6.2.3 Association Notation — This document uses the UML aggregation diamond adornment, role names, end multiplicities, and navigability in all class diagrams specifying associations. Unadorned associations are not used, for economy of notation. All role names are public by default, therefore the visibility symbols are not used. See the UML 1.4 specification, Section 3.43 for details. 6.2.3.1 Open diamond adornments indicate that instances of the target class may be shared among aggregate classes. Closed diamond adornments indicate that target instances belong to at most one composite class. The partwhole semantics of the aggregation/composition symbol is not significant in this specification. See the UML 1.4 specification, Sections 3.43.2.5 and 3.48 for further information. 6.2.3.2 Some diagrams use the UML “ordered” or “XOR” constraints where applicable. An “ordered” constraint on an association indicates that the\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: order in which the target instances appear in the aggregation is semantically significant, and is described in the supporting text of the diagram. See the UML 1.4 specification, Section 3.43.2.2 for further information. 6.2.3.3 An “XOR” constraint indicates that only one of many possible associations can be instantiated at any one time for a given instance of the association class. See the UML 1.4 specification, Section 3.42.5.1 for further information. 6.2.4 Association Tables — The table below provides an example of the tables used to list and describe associations between classes defined in this specification. Table 1 Association Table Format 6.2.4.1 Association Role Name — The name of the association role being specified. 6.2.4.2 Definition — Describes the function or purpose of the association. 6.2.4.3 Comments — Any additional comments or notes regarding the association. 6.2.5 Attribute Tables — The table below provides an example of the tables used to list and describe attributes of classes defined in this specification. Table 2\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 4)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: Attribute Table Format 6.2.5.1 Form — Defines the data type of the attribute. The terms used to describe data types in this column are defined in the SEMI Compilation of Terms, or are included as part of the specification. Refer to the compilation of terms for the definition of SEMI type name meanings. 6.2.6 Operation Definition Tables — The table below provides an example of the tables used to list and describe the interface operations defined in this specification. Table 3 Operation Definition 6.2.6.1 Operation — Specifies the name of the operation. 6.2.6.2 Type — Specifies the messaging semantics of the operation. Only Request-Reply (RR) and Fire-and-Forget (FF) semantics are used in this specification. Request-Reply messages are messages that involve an initiator and a receiver. In a Request-Reply exchange, the initiator sends a single request message to the receiver, and the receiver sends a single reply message to that request back to the initiator. Fire-and-Forget messages are messages that involve a sender and a receiver. In a\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 5)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: Fire-and-Forget exchange, the sender sends a single message to the receiver, with no associated response. 6.2.6.3 Requestor/Sender — For RR semantics, identifies the entity that makes the request, for FF semantics, identifies the entity that sends the message. Can be either ‘consumer’ or ‘equipment’. 6.2.6.4 Responder/Receiver — For RR semantics, identifies the entity that responds to the request, for FF semantics, identifies the entity that receives the message. Can be either ‘consumer’ or ‘equipment’. 6.2.7 Operation Argument Definition Table — The table below provides an example of the tables used to list and describe arguments for interface operations defined in this specification. Table 4 Operation Argument Definitions 6.2.7.1 Argument — Specifies the name of the argument. 6.2.7.2 Kind — Specifies whether the argument is an ‘in’, ‘out’, or ‘error’ argument for the operation. ‘error’ arguments always function as ‘out’ arguments, but indicate that the operation did not complete successfully. All possible errors that could be returned by\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation (Part 6)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 6.2  Notation\n\nContent: an operation are listed in these tables. Unless otherwise indicated, only one of the listed errors can be returned by an operation in a single invocation. 6.2.7.3 Form — Defines the data type of the argument. The terms used to describe data types in this column are defined in the SEMI Compilation of Terms, or are included as part of the specification. Refer to the compilation of terms for the definition of SEMI type name meanings.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection\n\nContent: 7.1.1 Manufacturing equipment can be comprised of hundreds or thousands of components that interoperate in order for the equipment to perform its intended function. The volume of information that such equipment can produce, and the variation among equipment users in the data used for process control and other applications, makes it impractical to send all equipment data off-tool all the time, or to agree on a fixed set of data to make available for each equipment type. It is therefore important for the equipment to support the ability for consumers to dynamically define the data that is of interest to them (see Figure 2). 7.1.2 In addition to declaring interest in specific data that a consumer is interested in, different consumers have different requirements for the acceptable latency with which data should be reported off-tool. For example, a consumer that is monitoring a trace of several process variables in order to detect an excursion needs to have this data available off-tool almost as quickly as the equipment can\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection\n\nContent: produce it (see Figure 3). A consumer that is monitoring low-level sensor/actuator activity for later diagnosis prefers not to have all of this data transmitted as it is produced, but buffered on the tool and transmitted at periodic intervals (see Figure 4). 7.1.3 Because a single tool is likely to have more than one consumer simultaneously interested in these different styles of data collection, a method for managing groups of related data as a unit can make it easier for consumers to define, enable, and disable the transmission of data. An example of this organization is shown in Figure 5. 7.1.4 It is possible for consumers to submit data collection requests which, when executing together, significantly tax the equipment’s computing resources. When the equipment detects that this is occurring, it should be able to provide a warning to consumers that a performance threshold is being reached. Consumers can respond to these warnings by adjusting or disabling the active data collection requests. In the worst case, if the\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 7.1  Equipment Data Collection\n\nContent: equipment determines that continuing to operate under degraded performance conditions may seriously jeopardize its ability to perform its intended function, the equipment can terminate all data collection activity. 7.1.5 This specification describes the concepts and behaviors necessary to facilitate these capabilities on equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.1  Data Collection Concepts\n\n8.1.1  This specification allows consumers to describe a set of data in which they are interested, and to ask the equipment to send only that data off-tool, according to a buffering policy specified by the consumer.  The types of data that are supported by this specification are described in the following sections.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.2  Trace Data (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.2  Trace Data\n\nContent: 8.2.1 Trace data allows data acquisition consumers to request the collection of data values that are continuously changing, or that change frequently such as pressure, temperature, RF power, magnetic field strength, or individual actuator state changes, etc. This document defines a mechanism for specifying when trace data collection begins and ends, what the collection frequency is, and what variables are to be collected in the trace (see Section 11.1.5). 8.2.2 This specification defines a mechanism for specifying when to start tracing (see Section 11.1.5.6): On the occurrence of a specific event or exception from a set of possible events and exceptions As soon as enabled 8.2.3 This specification defines a mechanism for specifying when to stop tracing (see Section 11.1.5.7): • On the occurrence of a specific event or exception from a set of possible events and exceptions After a specified number of collection results have been accumulated As soon as disabled 8.2.4 This specification defines a mechanism for identifying parameters to be\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.2  Trace Data (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.2  Trace Data\n\nContent: included in trace data collection (see Section 11.1.9). Consumers can use any naming convention supported by the equipment, provided that such conventions can support the concept of a parameter source and a parameter name represented as text fields. 8.2.5 This specification defines a mechanism to support on-tool buffering, allowing trace reports containing many collection results to be sent off-tool at a regular interval (see Sections 11.1.2.3 and 11.1.5.3).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.3  Events (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.3  Events\n\nContent: 8.3.1 Events allow data acquisition consumers to determine when a subsystem, process job, sensor/actuator, or other modeled system undergoes a state transition. Events may have data variables associated with the occurrence of the event. Such variables can include process data such as pressures, temperatures, or voltages, or context data such as job related data, recipe ID’s, equipment configuration or offset values. Typical consumers need to be able to specify which variables are to be provided with the event when it is communicated. 8.3.2 This specification defines a mechanism for identifying events and parameters to be included in data collection. Consumers can use any naming convention that is supported by the equipment, provided that such convention can support the concept of event sources and event id’s, and parameter sources and parameter names, each represented as text fields (see Sections 11.1.3 and 14.1.3). 8.3.3 This specification defines a mechanism to support on-tool buffering of events, allowing a periodic report of any events\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.3  Events (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.3  Events\n\nContent: that occurred during a specified interval to be sent off-tool (see Section 11.1.2.3).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.4  Exceptions\n\n8.4.1  Exceptions allow data acquisition consumers to know when errors, warnings, or alarms occur on the equipment.  These may indicate conditions which affect processing, safety, or the proper operation of the equipment. Exceptions may have data variables associated with the occurrence of the exception.  The list of these variables will be fixed by the equipment implementation.  \n8.4.2  This specification defines a mechanism for identifying exceptions to be included in data collection. Consumers can use any naming convention that is supported by the equipment, provided that such convention can support the concept of exception sources and exception id’s, each represented as text fields (see Sections 11.1.4 and 14.1.4).  \n8.4.3  This specification defines a mechanism to support on-tool buffering of exceptions, allowing a periodic report of any exceptions that occurred during a specified interval to be sent off-tool (see Section 11.1.2.3).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.5  Data Collection Plans (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.5  Data Collection Plans\n\nContent: 8.5.1 A data collection plan assembles all of the related trace, event, and exception data that may be required for a specific consumer’s purpose. For example, a consumer interested in tracking the utilization of the equipment may only be interested in specific events that mark actions the equipment takes that indicate how it is being exercised, certain exceptions that may interrupt the equipment, and no trace data. Such a data collection plan might be in effect at all times the equipment is running. 8.5.2 A fault detection consumer may be interested in trace, event, and exception data for a specific processing run, and may change the collected data depending on the recipe used. Such data collection plans may only be in effect while specific jobs are in process on the equipment. Coordination of data collection plan activation with job activity on the equipment is the consumers’ responsibility, and is not specified in this document. 8.5.3 This document specifies a mechanism for consumers to define one or more data collection\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.5  Data Collection Plans (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.5  Data Collection Plans\n\nContent: plans off-tool and submit those definitions to the equipment (see Sections 9.1.2.2 and 11). This document specifies a mechanism for determining what plans have been created on the equipment, how they are defined, and whether or not they are activated (see Sections 9.1.2.3, 9.1.2.4, and 9.1.2.6). A mechanism for activating, deactivating, and deleting individual plans is also specified (see Sections 9.1.2.5, 9.1.2.7, and 9.1.2.8). The required behavior of data collection plans is specified in Section 12.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.6  Equipment Operational Performance Monitoring\n\n8.6.1  It is possible for consumers to submit data collection requests which, when executing together, significantly tax the equipment’s computing resources, in addition to any load placed on the equipment by jobs that are in progress.  This document specifies a mechanism for notifying all DCP consumers when such a condition has been detected, to identify what DCPs and jobs are in progress at the time, and to identify the specific equipment components that are being adversely affected (see Sections 9.1.2.11, 13, 15.1.5, and 15.1.6).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 8.7  Ad-hoc Data Requests\n\n8.7.1  Ad-hoc data requests are used in cases where the value of some data items is needed at a specific instance in time, and which may not be associated with a specific event or exception.  As a simple example, consider an application that monitors equipment utilization.  Such an application may have an initialization procedure that includes determining the current state of each monitored component on the equipment.  Without a mechanism for requesting this information at initialization, the application would instead have to wait for state change events from each component before it could determine their state.  This may not be acceptable if the application provides a  \nvisualization of the equipment to an end user who relies on the application to call attention to problem conditions on the equipment.  \n8.7.2  This document specifies a mechanism for consumers to issue ad-hoc requests for data in order to support these uses, through the GetObjectInstanceIds and GetParameterValue operations of the DataCollectionManager interface (see Sections 9.1.2.9 and 9.1.2.10).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9  Data Collection Plan Management\n\n9.1  DataCollectionManager Interface  \n9.1.1  Figure 6 shows the interface used to manage data collection plans on the equipment, as well as making ad-hoc requests for specific data, and for determining the current performance conditions on the equipment.  \nFigure 6 The Data CollectionManager Interface  \n9.1.2  DataCollectionManager — The DataCollectionManager interface provides consumers with operations to manage data collection activities on the equipment.  The interface provides operations for consumers to submit new DCP’s, activate and deactivate them, look up existing plans, and delete defined plans.  The DataCollectionManager interface also provides operations to request the current equipment performance status as well as requesting ad-hoc data on demand.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.1  DataCollectionManager Operations (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.1  DataCollectionManager Operations\n\nContent: Table 5 DataCollectionManager Operation Definition 9.1.2.2 DefinePlan — Upon receiving this request, the equipment shall first verify that the consumer has sufficient privilege (see Section 10) to define a new DCP. If so, the equipment shall then validate the plan name for uniqueness and all referenced events, exceptions, parameters, and trace reports for existence and correctness. The equipment shall place no a-priori limitation on the number of plans that can be defined. 9.1.2.2.1 Any hard limitations imposed by constraints on available storage capacity shall be documented by the equipment supplier. If such limitations are encountered at runtime, the equipment shall return an equipment-defined error indicating that the DCP was not successfully defined, and a human-readable description of the reason. The mechanism for supporting such errors shall be fully specified in implementation mappings provided for this specification. 9.1.2.2.2 If there are any issues with the submitted plan, the equipment shall return a\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.1  DataCollectionManager Operations (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.1  DataCollectionManager Operations\n\nContent: description of all problems detected with the plan (see Section 9.1.2.2.6 for a description of possible DCP definition problems), and the plan shall not be defined on the equipment. 9.1.2.2.3 If there are no issues with the submitted plan, the equipment shall record the date and time at which the plan definition was submitted and the id of the consumer that submitted the plan. The equipment shall store this information and the plan definition in non-volatile storage. It shall thereafter be legal for DCP requests to refer to the submitted plan by its id field.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.4  DefinePlan Operation Arguments\n\nTable 6  DefinePlan Argument Definitions  \n9.1.2.2.5  DCPDefined — This class describes a DCP that has been successfully defined on the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.5.1  DCPDefined Attribute Definition Table\n\nTable 7  DCPDefined Attribute Definition  \n9.1.2.2.6  UnauthorizedOperation — This class describes an authorization error associated with a specific operation.  \n9.1.2.2.6.1  UnauthorizedOperation Attribute Definition Table  \nTable 8  UnauthorizedOperation Attribute Definition  \n9.1.2.2.7  InvalidPlan — This class provides an overall description of all errors detected with a submitted DCP.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.7.1  InvalidPlan Attribute Definition Table\n\nTable 9  InvalidPlan Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 10  InvalidPlan Association Definition\n\n9.1.2.2.8  InvalidEventRequest — this class describes errors detected in requested events in a submitted plan definition.  An event request can be invalid if 1) the equipment does not recognize the sourceId, 2) the equipment does not recognize the eventId, 3) the sourceId and eventId are both recognized by the equipment, but the specified source is not the source of the requested event, or 4) the same source/event combination appears in more than one event request within the DCP.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.8.1  InvalidEventRequest Attribute Definition Table\n\nTable 11  InvalidEventRequest Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.8.2  InvalidEventRequest Association Definition Table (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.8.2  InvalidEventRequest Association Definition Table\n\nContent: Table 12 InvalidEventRequest Association Definition 9.1.2.2.9 InvalidExceptionRequest — this class describes errors detected in requested exceptions in a submitted plan definition. An exception request can be invalid if 1) the equipment does not recognize the sourceId, 2) the equipment does not recognize the exceptionId, 3) the equipment recognizes both the sourceId and exceptionId, but the specified source is not the source of the requested exception, 4) the requested severity is not supported, or 5) the same exception criteria appears in more than one event request within the DCP. 9.1.2.2.9.1 InvalidExceptionRequest Attribute Definition Table 9.1.2.2.10 InvalidParameterRequest — this class describes errors detected in requested parameters in a submitted plan definition. Parameters are requested with either an event or as part of a trace request. A parameter request can be invalid if 1) the equipment does not recognize the sourceId, 2) the equipment does not recognize the parameterName, 3)\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.8.2  InvalidEventRequest Association Definition Table (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.8.2  InvalidEventRequest Association Definition Table\n\nContent: the equipment recognizes both the sourceId and parameterName but the specified source is not the source of the requested parameter, or 4) the Parameter is produced by the specified source but a) the equipment does not support reporting the parameter with the corresponding event request or b) the equipment does not support including this parameter in a trace request.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.10.1  InvalidParameterRequest Attribute Definition Table\n\nTable 14  InvalidParameterRequest Attribute Definition  \n9.1.2.2.11  InvalidTraceRequest — this class describes errors detected in requested traces in a submitted plan definition.  A trace request can be invalid if 1) the same trace id appears in more than one TraceRequest within the same DCP, 2) the TraceRequest includes an invalid ParameterRequest, 3) the TraceRequest specifies an invalid start/stop trigger, 4) the TraceRequest specifies an invalid trigger cycle, or 5) the TraceRequest specifies an interval that can’t be supported by the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.11.1  InvalidTraceRequest Attribute Definition Table\n\nTable 15  InvalidTraceRequest Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.11.2  InvalidTraceRequest Association Definition Table\n\nTable 16  InvalidTraceRequest Association Definition  \n9.1.2.2.12  InvalidTrigger — This class describes errors detected in requested start/stop triggers for traces in a submitted plan definition.  A trigger can be invalid if 1) the equipment does not recognize the sourceId, 2) the equipment does not recognize the eventId or exceptionId, 3) the sourceId and eventId or exceptionId are both recognized by the equipment, but the specified source is not the source of the requested event or exception, or 4) the same start trigger appears more than once in the same trace request, or the same stop trigger appears more than once in the same trace request.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.12.1  InvalidTrigger Attribute Definition Table\n\nTable 17  InvalidTrigger Attribute Definition  \n9.1.2.2.13  InvalidInterval — This class describes errors detected in requested trace intervals in a submitted plan definition.  A trace interval is invalid if the equipment can not collect the requested parameters at the requested frequency.  The error returns the closest valid trace interval that can be supported by the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.13.1  InvalidInterval Attribute Definition Table\n\nTable 18  InvalidInterval Attribute Definition  \n9.1.2.2.14  InvalidCycle — this class describes errors detected in a cyclical trace request in a submitted plan definition.  A trace cycle is invalid if the TraceRequest ‘isCyclical’ attribute (see Section 11.1.5 ) is true, but does not include both a start and stop trigger.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.2.14.1  InvalidCycle Attribute Definition Table\n\nTable 19  InvalidCycle Attribute Definition  \n9.1.2.3  GetDefinedPlanIds — upon receiving this request, the equipment shall return a list of all currently defined data collection plan id’s that are accessible by the consumer (see Section 10 ), the time at which they were defined, and the id of the consumer that defined them.  If the consumer does not have sufficient privilege (see Section 10 ), then the equipment shall return an error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.3.1  GetDefinedPlanIds Operation Arguments\n\nTable 20  GetDefinedPlanIds Argument Definitions  \n9.1.2.4  GetPlanDefinition — upon receiving this request, the equipment shall return the requested plan definition to the consumer as it was originally submitted to the equipment.  \n9.1.2.4.1  If the consumer does not have sufficient privileges (see Section 10) to access the requested DCP definition, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 21  GetPlanDefinition Argument Definitions\n\n9.1.2.4.3  NoSuchPlan — This class describes an error indicating an unrecognized DCP id.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.4.3.1  NoSuchPlan Attribute Definition Table (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.4.3.1  NoSuchPlan Attribute Definition Table\n\nContent: Table 22 NoSuchPlan Attribute Definition 9.1.2.5 ActivatePlan — Upon receiving this request, the equipment shall begin sending all DCP events, exceptions, and trace data collection reports to the consumer according to any buffering policies specified in the DCP. The equipment shall place no a-priori limitation on the number of DCPs that a consumer can activate. The equipment shall place no a-priori limitation on the number of consumers that can activate the same DCP (see Section 12.1 Table 45, transition 4). This operation is the only means by which a DCP can be activated. 9.1.2.5.1 Any limitations on supportable DCP activity imposed by constraints on available equipment processing power or network interface bandwidth shall be documented by the equipment supplier. If such limitations are encountered at runtime, the equipment shall use the equipment operational performance monitoring messages and behavior defined in Section 13 to manage DCP activity with consumers. 9.1.2.5.2 The equipment shall ensure\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.4.3.1  NoSuchPlan Attribute Definition Table (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.4.3.1  NoSuchPlan Attribute Definition Table\n\nContent: that the requested DCP is valid (see Section 9.1.2.2.6) at the time it is activated. If, at activation time, the requested DCP is not valid, the equipment shall return an InvalidPlan error, and shall not activate the DCP. The equipment shall not prevent DCP activation for any reason (including internal communication failures) if the DCP is valid and the consumer has sufficient privilege (see Section 10). For required behavior in the event of internal communication failures, see Section 12.2.2. 9.1.2.5.3 If the consumer does not have sufficient privilege (see Section 10) to activate the requested DCP, the equipment shall return an UnauthorizedOperation error. 9.1.2.5.4 The equipment shall respond to duplicate requests from the same consumer to activate the same DCP by returning an error including the DCPActivated information corresponding to that consumer’s original activation request, but shall take no other actions. The equipment shall not activate a DCP more than once for the same consumer.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.5.5  ActivatePlan Operation Arguments\n\nTable 23  ActivatePlan Argument Definitions  \n9.1.2.6  GetActivePlanIds — Upon receiving this request, the equipment shall return a list of the id’s of all DCPs that have been activated by the requesting consumer at the time of the request.  If the consumer has sufficient privilege (see Section 10), the id’s of all activation requests for all currently active DCPs shall be returned.  \n9.1.2.6.1  If the consumer does not have sufficient privilege (see Section 10) to retrieve the currently-active DCP id’s, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.6.2  GetActivePlanIds Operation Arguments (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.6.2  GetActivePlanIds Operation Arguments\n\nContent: Table 24 GetActivePlanIds Argument Definitions 9.1.2.6.3 activePlans — The information returned in the response to this operation depends on the privilege assigned to the requesting consumer. The equipment shall only return the DCPActivated information for activation requests made by the consumer that is invoking the GetActivePlanIds operation (unless the consumer has sufficient privilege – see Section 9.1.2.6.3.1). For example, if some DCPs have been activated by other consumers, but not by the requesting consumer, the equipment shall not return the DCPActivated information for those other DCPs. Also, if the requesting consumer has activated a DCP, and other consumers have also activated that same DCP, the equipment shall not return the DCPActivated information for those other consumers. 9.1.2.6.3.1 For consumers with sufficient privilege only (see Section 10), the equipment shall return all available DCPActivation information for all consumers of all DCPs that are active at the time of the request.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.6.2  GetActivePlanIds Operation Arguments (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.6.2  GetActivePlanIds Operation Arguments\n\nContent: 9.1.2.7 DeactivatePlan — Upon receiving this request, the equipment shall stop sending of all event, exception, and trace requests associated with the identified DCP to the requesting consumer. If there are no other consumers receiving data from the identified DCP, the equipment shall disable all collection/buffering activity related to this DCP (see Table 45, transition 8). In this case, the equipment shall discard any buffered data at the time of the request. 9.1.2.7.1 If the identified DCP has not been previously activated by the requesting consumer, and the request is not a termination request (see Section 9.1.2.7.5), the equipment shall return the DCPNotActive error. If the request is a termination request, but the requested plan has not been previously activated by any consumer, the equipment shall return the DCPNotActive error. 9.1.2.7.2 If the consumer does not have sufficient privilege (see Section 10) to deactivate the requested DCP, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.7.3  DeactivatePlan Operation Arguments (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.7.3  DeactivatePlan Operation Arguments\n\nContent: Table 25 DeactivatePlan Argument Definitions 9.1.2.7.4 planId — This operation defines the following reserved planId to name groups of DCPs for deactivation. This identifier is not valid for use as a DCP id in any operation other than DeactivatePlan. 9.1.2.7.4.1 “urn:semi-org:dcm:allDCPs” — This identifier can be used to request deactivation of all plans that are currently active for the requesting consumer. If other consumers have activated any of these same plans, those consumers shall continue to receive DataCollectionReports from those plans. When used together with a request to terminate (see Section 9.1.2.7.5), the equipment shall terminate all DCPs currently active on the equipment for all consumers, including those that have been activated by the requesting consumer. 9.1.2.7.5 terminate — If set to “true”, the equipment shall stop buffering/sending all data included in the identified DCP to all consumers that have previously activated the DCP. The equipment shall discard any buffered data at the time\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.7.3  DeactivatePlan Operation Arguments (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.7.3  DeactivatePlan Operation Arguments\n\nContent: of the request. The equipment shall notify each such consumer of the reason for the termination using the DCPDeactivated notification (see Section 15.1.6.2). The consumer must have sufficient privilege (see Section 10) to request termination of a DCP. 9.1.2.7.6 DCPDeactivated — This class describes a DCP that has been successfully deactivated on the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 26  DCPDeactivated Attribute Definition\n\n9.1.2.7.7  DCPNotActive — This class describes a DCP that has not been activated, either by a specific consumer, or by any consumer (see Section 9.1.2.7.1).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.7.7.1  DCPNotActive Attribute Definition Table\n\nTable 27  DCPNotActive Attribute Definition  \n9.1.2.8  DeletePlan — Upon receiving this request, the equipment shall delete the requested plan definition from non-volatile storage.  The equipment shall reject this request if the requested plan is currently active for one or more consumers.  For a plan to be deleted, it must be deactivated (no consumer is currently receiving data produced by the plan).  Note that no consumer can delete built-in DCPs provided with the equipment (see Section 11.1.2.1).  \n9.1.2.8.1  If the consumer does not have sufficient privilege (see Section 10) to delete the requested DCP, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 28  DeletePlan Argument Definitions\n\n9.1.2.8.3  DCPIsActive — This class describes an error in activating or deleting a DCP that is currently active.  It provides information describing the original activation of the DCP.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 29  DCPIsActive Association Definition\n\n9.1.2.8.4  DCPActivated — This class describes a DCP that has been successfully activated on the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 30  DCPActivated Attribute Definition\n\n9.1.2.8.5  DCPDeleted — This class describes a DCP that has been deleted from the equipment.  It is used only in the response to the DeletePlan operation.  The equipment is not required to retain a history of deleted DCPs.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.8.5.1  DCPDeleted Attribute Definition Table (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.8.5.1  DCPDeleted Attribute Definition Table\n\nContent: Table 31 DCPDeleted Attribute Definition 9.1.2.9 GetParameterValues — This operation can be used by consumers to determine the current state of the equipment. It is not intended to be used as a substitute for data collection through DCPs. Upon receiving this request, the equipment shall return the most current values for the requested Parameters known to the equipment at the time of the request. The equipment is not required to actively retrieve new or update internally stored values at the time of the request. Consumers should be aware that the time at which the equipment last obtained or updated the requested Parameter values may be earlier than the time at which the request is made. If some values cannot be obtained at the time of the request (perhaps due to an internal equipment failure), or if the request refers to Parameters that are not defined, the equipment shall indicate so by returning NoValue (see Section 14.2.1.4) for each such Parameter. 9.1.2.9.1 If the consumer does not have sufficient\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.8.5.1  DCPDeleted Attribute Definition Table (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.8.5.1  DCPDeleted Attribute Definition Table\n\nContent: privilege (see Section 10) to request Parameter values, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.9.2  GetParameterValues Operation Arguments (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.9.2  GetParameterValues Operation Arguments\n\nContent: Table 32 GetParameterValues Argument Definitions 9.1.2.10 GetObjTypeInstanceIds — This operation provides consumers with information required to request the values of attributes of specific E39-compliant objects that have been instantiated on the equipment. A consumer interested in the attributes of specific E39 objects can only make requests from a specific object instance if the unique instance identification information for such objects is known. This operation allows consumers to learn from the equipment how many E39-compliant objects of a given ObjType are instantiated on the equipment at the time of the request, and what their unique instance identification information is. The consumer may then use that instance information to request E39-compliant object attribute values using either the GetParameterValues operation (see Section 9.1.2.9), or by including this information in a DCP. E39-compliant object attribute values are returned as ParameterValues (see Section 14.2). 9.1.2.10.1 This specification\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.9.2  GetParameterValues Operation Arguments (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.9.2  GetParameterValues Operation Arguments\n\nContent: does not define the format of an E39-compliant object instance identifier; this format shall be fully specified by any implementation mapping of this specification. 9.1.2.10.2 Upon receiving this request, the equipment shall return a list of the instance identifiers of all SEMI E39- compliant objects that exist at the time of the request, and are of the requested ObjType, and that are provided by the requested source. If the request includes unrecognized ObjTypes or sources, the equipment shall indicate so by returning ObjTypeRequestError (see Section 9.1.2.10.11) for each such request. Consumers can request the list of all instances, all instances of a specific type, all instances from a specific source, or all instances of a specific type from a specific source. 9.1.2.10.3 If the consumer does not have sufficient privilege (see Section 10) to request ObjType instance id’s, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.10.4  GetObjTypeInstanceIds Operation Arguments\n\nTable 33  GetObjTypeInstanceIds Argument Definitions  \n9.1.2.10.5  objTypeInstances — The equipment shall return one and only one element of type ObjTypeResult for each unique ObjType-source combination resulting from the original request.  For example, if the consumer requested all “Carrier” ObjType instance id’s, regardless of the source, and the equipment has only one source of that ObjType, then only one ObjTypeResult will be returned.  That result will contain all instance id’s for that ObjType provided by that source.  If there were two or more sources of that ObjType, the equipment would return as many ObjTypeResult elements as there were sources, each element containing all instance id’s of that ObjType provided by that source.  \n9.1.2.10.6  ObjTypeRequest — This class represents a request for the instance id’s of one or more ObjTypes.  \n9.1.2.10.6.1  ObjTypeRequest Attribute Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 34  ObjTypeRequestError Attribute Definition\n\n9.1.2.10.7  If the ‘sourceId’ attribute is non-empty, the equipment shall return all instance id’s of the ObjType specified in the ‘objTypeId’ attribute that are available from the specified source.  If the ‘objTypeId’ attribute is empty, the equipment shall return the id’s of all E39-compliant ObjType instances available from the specified source, regardless of their ObjType.  \n9.1.2.10.8  If the ‘sourceId’ attribute is empty, the equipment shall return all instance id’s of the ObjType specified in the objTypeId attribute, regardless of their source.  If the objTypeId attribute is also empty, the equipment shall return all instances of all E39-compliant ObjTypes, regardless of their source.  \n9.1.2.10.9  ObjTypeResult — This class provides a list of requested ObjType instance id’s.  If the original request included unrecognized sources or ObjTypes, or ObjTypes that are not provided by the requested sources, the equipment shall return an ObjTypeRequestError (see Section 9.1.2.10.11) for each such request.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 36  ObjTypeResult Association Definition\n\n9.1.2.10.10  ObjTypeInstance — This class, shown in Figure 23, provides the instance id of a requested ObjType from its requested source.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 9.1.2.10.10.1  ObjTypeInstance Attribute Definition Table\n\nTable 37  ObjTypeInstance Attribute Definition  \n9.1.2.10.11  ObjTypeRequestError — This class, shown in Figure 23, describes an error detected in a specific ObjTypeRequest provided as input to the GetObjTypeInstanceIds operation.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 38  ObjTypeRequest Attribute Definition\n\n9.1.2.11  GetCurrentPerformanceStatus — Upon receiving this request, the equipment shall return the most recently evaluated equipment performance status (see Section 15.1.6.1.1).  \n9.1.2.11.1  If the consumer does not have sufficient privilege (see Section 10) to request the current performance status, the equipment shall return an UnauthorizedOperation error.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 10.1  Privileges\n\n10.1.1  Figure 18 shows the privileges that shall be enforced when processing requests from DCP consumers.  Note that suppliers may provide more fine-grained privileges than shown here, if desired.  If a consumer attempts to execute an operation on the DataCollectionManager interface that requires any of these privileges, and such privilege has not been assigned to the consumer, the equipment shall not execute the request, and shall instead return the UnauthorizedOperation error described in Section 9.1.2.2.5.  The meaning of each privilege is provided in Table 40.  \n10.1.2  Definition of the mechanism for assigning and enforcing privileges is beyond the scope of this specification (see limitations, Section 3.1.2).  Such mechanisms shall be specified completely in any implementation mapping for this specification.  \n10.1.3  Data Collection Management Privilege Definition Table\nTable 40  Data Collection Management Privilege Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1  DataCollectionPlan\n\n11.1.1  Figure 19 illustrates how a data acquisition consumer can specify to the equipment what data should be reported for a specific plan.  \n11.1.2  DataCollectionPlan — A data collection plan has a consumer-defined (or supplier-defined, in the case of built-in DCPs) name and id, and acts as a container for classes that describe what trace data, exceptions, and events are to be reported to the consumer, as well as any buffering policy for the plan.  \n11.1.2.1  Built-in DCPs — Equipment suppliers may provide pre-defined DCPs that are included with the equipment, and don’t require definition by a consumer.  Such DCPs shall be defined according to the format specified in this section, and are referred to as “built-in” DCPs.  Built-in DCPs can be activated and viewed by any  \nconsumer with sufficient privilege (see Section 10) using the DataCollectionManager’s ActivatePlan and GetPlanDefinition operations, respectively.  Built-in DCPs cannot be deleted by any consumer.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.2.2  DataCollectionPlan Attribute Definition Table\n\nTable 41  DataCollectionPlan Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.2.3  intervalInMinutes (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.2.3  intervalInMinutes\n\nContent: 11.1.2.3.1 If the value of this field is zero, events and exceptions contained in the plan shall be reported to the consumer when they occur, and trace reports contained in the plan shall be reported according to their individual buffer settings (see the description of the TraceRequest type in Section 11.1.5). 11.1.2.3.2 If the value of this field is greater than zero, upon activation of the DCP, any exceptions, events, or traces defined in the plan that occur during this time span shall be buffered on the equipment in the order that they occur. Buffered data shall be reported at the end of the interval, or when the equipment’s buffering capacity for the currently active DCPs is reached, whichever is sooner. After each interval expires, the equipment shall begin buffering new data for the next interval, again sending the results when the interval expires (or buffering capacity is reached). Each result sent shall contain only the data collected during that interval. The equipment shall continue this buffering/sending cycle as\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.2.3  intervalInMinutes (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.2.3  intervalInMinutes\n\nContent: long as the DCP is active. 11.1.2.3.3 All data sent is formatted using the DataCollectionReport format described in Section 14.1.1.1.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 42  DataCollectionPlan Association Definition\n\n11.1.3  EventRequest — Identifies an event generated by a specific source that the consumer is requesting to be reported when the DCP is activated.  The equipment shall report only those events matching both the source and id attributes specified in the EventRequst.  The format for sending an event report is described in Section 14.1.  The equipment shall support multiple DCPs requesting the same event, with different sets of requested parameters.  It shall be an error to request the same event more than once in the same DCP (see Section 9.1.2.2.7).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.3.1  EventRequest Attribute Definition Table\n\nTable 43  EventRequest Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 44  EventRequest Association Definition\n\n11.1.4  ExceptionRequest — Identifies an exception or class of exceptions that the consumer is requesting to be reported when the DCP is activated.  The format for sending an exception report is described in Section 14.1.  The equipment shall support multiple DCPs requesting the same exception criteria.  It shall be an error to request the same exception criteria more than once in the same DCP (see Section 9.1.2.2.8).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table\n\nContent: Table 45 ExceptionRequest Attribute Definition 11.1.4.2 sourceId — If this is the only non-empty attribute, then all exceptions from this source will be reported, regardless of id or severity. 11.1.4.3 exceptionId — If this is the only non-empty attribute, then all exceptions with this id will be reported, regardless of source or severity. 11.1.4.4 severity — If this is the only non-empty attribute, then all exceptions with this severity will be reported, regardless of the source or id of the exception. Note that equipment suppliers are not required to define severity classifications for exceptions. If severity classifications are not supported by the equipment supplier, any ExceptionRequest containing a non-empty severity attribute shall be rejected as invalid (see Section 9.1.2.2.8). If the equipment supplier does define severity classifications for exceptions, the ability to request exceptions based on severity in a DCP shall be supported. 11.1.4.5 If more than one of the above attributes is\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table\n\nContent: non-empty, then whether or not an exception will be reported will be determined by applying Boolean AND logic to the non-empty attributes. At least one attribute must be nonempty. 11.1.4.6 It is not possible to customize the parameters to be sent when exceptions occur. Equipment suppliers define what parameters, if any, are sent with exceptions. 11.1.4.7 ExceptionRequests may refer to exceptions whose state the equipment tracks (for example, the “alarm set” and “alarm clear” states for E30 alarms). If an ExceptionRequest in a DCP refers to such an exception, the equipment shall send an ExceptionReport (see Section 14.1.4) each time there is a change in the exception’s state. Different data may be reported for each different exception state. If an Exception does not have any associated state, it is not necessary to report any description of the state of the exception (see Section 14.1.4.1.2). 11.1.5 TraceRequest — This class identifies a set of parameters whose values are to be periodically collected\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.4.1  ExceptionRequest Attribute Definition Table\n\nContent: and reported to the consumer using the format defined in Section 14.1 . The class is used to describe at what rate the set of requested parameters should be collected, if/how collected trace data should be buffered on the tool and when the results should be sent to the consumer, and when the trace should start and stop.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.1  TraceRequest Attribute Definition Table\n\nTable 46  TraceRequest Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.2  collectionCount\n\n11.1.5.2.1  A value of 0 for this attribute indicates that the trace shall continue indefinitely, until a stop trigger is detected, or until the DCP is deactivated. $\\mathrm { I f } > 0$ , the trace shall continue until a stop trigger (see Section 11.1.5.7) is detected or until the total number of collection results obtained is equal to collectionCount, whichever occurs first. For example, the consumer may wish to provide both a stop trigger and a non-zero collectionCount in order to limit the total number of collection results to report regardless of whether or not the stop trigger occurs, or in case an error condition on the equipment prevents the stop trigger from firing.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.3  groupSize\n\n11.1.5.3.1  Depending on the buffering capacity of the equipment, the DCP may send a TraceReport before ‘groupSize’ results have been obtained.  A TraceReport must not include more than ‘groupSize’ collection results (excluding groupSize $= 0$ ).  See Section 12.3.13 for a description of the effect of this setting on DCP behavior.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.4  isCyclical\n\n11.1.5.4.1  At least one start and one stop trigger must be supplied for a trace request to be cyclical.  If this attribute has the value ‘true’, the trace shall be restarted if any one of the start triggers is detected after termination.  If this attribute has the value ‘false’, the trace will not restart unless the DCP is deactivated and then re-activated.  See Section 9.1.2.2.13 for possible errors.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 47  TraceRequest Association Definition\n\n11.1.5.5  TraceRequest Association Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.6  startOn (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.6  startOn\n\nContent: 11.1.5.6.1 If no triggers are provided, the trace initiates when the DCP is activated. 11.1.5.6.2 If one or more triggers are provided, the trace is started when any one of the start triggers is detected after the activation of the DCP. 11.1.5.6.3 Subsequent occurrences of any of the start triggers after the trace has started are ignored, and do not affect the execution of the trace. 11.1.5.6.4 The same start trigger may not appear more than once in the same TraceRequest (see Section 9.1.2.2.11). 11.1.5.7 stopOn 11.1.5.7.1 If no triggers are provided, the trace terminates when the total number of collection results is equal to ‘collectionCount’, or when the DCP is deactivated, whichever occurs first. 11.1.5.7.2 If one or more triggers are provided, the trace is stopped when any one of the stop triggers is detected, or when the total number of collection results is equal to ‘collectionCount’, whichever occurs first. If the trace request is buffered (groupSize $> 1$ ), any collected results stored at this time are sent in a single\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.6  startOn (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.5.6  startOn\n\nContent: DataCollectionReport. 11.1.5.7.3 If a trigger provided by this association is identical to one specified in the ‘startOn’ association, trace data collection shall start on the first occurrence of that trigger after activation of the plan, and stop on the next occurrence of the same trigger (and so on, if cyclical). 11.1.5.7.4 The same stop trigger may not appear more than once in the same TraceRequest (see Section 9.1.2.2.11). 11.1.6 Trigger — An abstract class representing an occurrence that can trigger the starting or stopping of a trace. This class has no attributes or associations. 11.1.7 EventTrigger — Identifies an event that can be generated by a specific source, and whose occurrence can trigger the starting or stopping of a trace. See Section 9.1.2.2.11 for possible errors.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 48  EventTrigger Attribute Definition\n\n11.1.8  ExceptionTrigger — Identifies an exception that can be generated by a specific source, and whose occurrence can trigger the starting or stopping of a trace.  For stateful exceptions, the trigger can be activated by a transition to any of the defined states for that exception.  See Section 9.1.2.2.11 for possible errors.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.8.1  ExceptionTrigger Attribute Definition Table\n\nTable 49  ExceptionTrigger Attribute Definition  \n11.1.9  ParameterRequest — This class provides the source and name of a specific parameter that the equipment is to report to the consumer as part of the DCP’s event or trace reports.  Multiple trace reports or event reports across multiple DCPs may refer to the same parameter.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 11.1.9.1  ParameterRequest Attribute Definition Table\n\nTable 50  ParameterRequest Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models\n\nContent: 12.1 DataCollectionPlan State Model 12.1.1 The purpose of the DataCollectionPlan state model is to define the consumer’s view of the behavior of a DCP, which includes the consumer’s interactions with the equipment necessary to define, activate, de-activate, and delete DCPs. Each DCP on the equipment shall execute independently, as described in these state models. The equipment supplier is not required to provide a direct, literal implementation of these state models. They are documented here to provide a precise definition of the required behavior for DCPs on the equipment. The transitions described in these state machines are not to be made available for event data collection. 12.1.1.1 Implementation mappings of this specification may identify additional conditions other than those defined in this document under which DCP activity should be terminated (that is, cause a transition from the “Active” to the “Inactive” state). All such conditions, and the details of required equipment behavior under those conditions,\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models\n\nContent: shall be fully specified in any implementation mapping for which this is a consideration. 12.1.2 DataCollectionPlan — The superstate for all DCP states. The equipment has validated the DCP and stored it in non-volatile memory. The DCP may now be activated and de-activated. 12.1.3 Inactive — The equipment is not sending or buffering any event, exception, or trace reports requested in the DCP to any consumer. A transition to Active is required for the data defined in this DCP to be reported to a consumer. 12.1.4 Active — The equipment is sending and/or buffering all event, exception, and trace reports requested in the DCP to all consumers that have successfully activated the DCP. This state contains substates that are described in Section.12.2 . 12.1.5 Hibernating — The equipment has paused the sending and buffering of all event, exception, and trace reports requested in the DCP, because the equipment is entering a state in which it will not be possible to communicate data to any consumers. The DCP has its\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12  Data Collection Plan State Models\n\nContent: ‘isPersistent’ attribute equal to ‘true’. 12.1.6 Deleted — The DCP is no longer stored in non-volatile memory, and can no longer be legally referenced by any consumer.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model\n\nContent: 12.2.1 The purpose of the DataCollectionPlan-Active State Model is to define a consumer’s view of DCP behavior in the Active state of the DataCollectionPlan State Model. Each DCP’s Active state on the equipment shall execute independently, as described in this state model. The equipment supplier is not required to provide a direct, literal implementation of this state model. It is documented here to provide a precise definition of the required behavior for DCPs in the Active state on the equipment. The transitions described in this state model are not to be made available for event data collection. 12.2.2 While in the Active state, if the equipment experiences internal communication or operational failures that prevent the collection of event, exception, or trace data requested by the DCP, the equipment shall not de-activate the DCP. If the values of any requested parameters can’t be obtained or refreshed as a result of such communication failures, the equipment shall use the “NoValue” class (see Section\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model\n\nContent: 14.2.1.4) as the reported ParameterValue for all such affected parameters. The equipment is not required to take any other actions to notify consumers of such failures. 12.2.2.1 Consumers should be aware that such failures may temporarily prevent the equipment from reporting requested events or exceptions altogether, and/or result in reporting “NoValue” (see Section 14.2.1.4) for requested parameters affected by the failure. In the event that the equipment recovers from such failures and any affected DCPs are still active, the equipment shall resume reporting all event, exception, and trace data whose reporting had been affected by the failure. 12.2.3 DCPBuffering — This is the top level state for describing the event, exception, and trace buffering behavior of the DCP 12.2.4 NotBuffering — The DCP is immediately sending DataCollectionReports for each requested event and exception as they are detected. TraceReports may be individually buffered, according to the ‘groupSize’ setting of the DCP’s TraceRequests\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model\n\nContent: (see Section 11.1.5), but are also sent in the DataCollectionReport format (see Section 14.1 ). This state is only active if the DataCollectionPlan attribute ‘intervalInMinutes’ attribute is set to 0. 12.2.5 Buffering — The DCP is storing all events, exceptions, and trace data in an internal buffer in the order in which they occur. Buffered data is sent in a single DataCollectionReport (see Section 14.1) when ‘intervalInMinutes’ expires, or when the equipment’s DCP buffering capacity has been reached, whichever occurs first. The equipment continues buffering new data for the next interval, sending a single DataCollectionReport when ‘intervalInMinutes’ expires. Each DataCollectionReport sent at the end of each interval contains only the data collected during that interval. The equipment continues this buffering/sending cycle as long as the DCP is active. This state is only active if the DataCollectionPlan attribute ‘intervalInMinutes’ attribute is $> 0$ . 12.2.6 NotSending — The DCP is waiting for a\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model (Part 4)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model\n\nContent: DataCollectionReport to become ready for sending to the consume who activated the plan. 12.2.7 Sending — The DCP is sending a DataCollectionReport to the consumer that activated this DCP (see Section 14.1). 12.2.8 MonitoringEventRequests — The DCP is actively tracking and reporting any event requests provided with the DCP. This is the top level state for the WaitingForEvent state. 12.2.9 WaitingForEvent — The DCP is waiting for the occurrence of any of the requested events defined in the DCP. 12.2.10 MonitoringExceptionRequests — The DCP is actively tracking and reporting any exception requests provided with the DCP. This is the top level state for the WaitingForException state. 12.2.11 WaitingForException — The DCP is waiting for the occurrence of any of the requested exception specified in the DCP. 12.2.12 MonitoringTraceRequests — The DCP is actively tracking and reporting the results from any trace requests provided with the DCP. This is the top level state for the TraceRequestMonitor-i states. 12.2.13\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model (Part 5)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.2  DataCollectionPlan-Active State Model\n\nContent: TraceRequestMonitor- $i$ — For each trace request provided with the DCP, there is an independentlyexecuting TraceRequestMonitor- $i$ $\\overset { \\cdot } { \\mathrm { i } } = 0$ up to the number of trace requests included in the DCP) that defines the DCP reporting behavior for trace requests. This state contains substates that are described in Section 12.3.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model\n\nContent: 12.3.1 The purpose of the trace request state model is to define a consumer’s view of DCP trace behavior while in the Active state of the DataCollectionPlan state model. Each trace request within each active DCP shall execute independently, as described in this state model. The equipment supplier is not required to provide a direct, literal implementation of this state model. It is documented here to provide a precise definition of the required behavior for DCP trace activity on the equipment. The transitions described in this state model are not to be made available for event data collection. 12.3.2 TraceRequestMonitor-i — This is the top level state for describing the behavior of a single trace request within a single DCP in the Active state. Each trace request within each active DCP executes this state model independently. 12.3.3 Tracing — This is the top level state for trace activity for a single trace request. 12.3.4 Disabled — The DCP is not performing trace data collection. The DCP is waiting for the occurrence of\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model\n\nContent: a start trigger defined for this trace request. 12.3.5 Enabled — The DCP is performing trace data collection (see substate descriptions) as requested in a specific trace request provided with the DCP. Either the occurrence of a start trigger defined for the trace request was detected, or there was no defined start trigger and the DCP began tracing immediately after activation. If the DCP entered this state due to the detection of a start trigger, it shall record the specific trigger that was detected and the time at which it was detected for inclusion in a trace report (see Section 14.1.5). 12.3.6 Waiting forInterval — The DCP is waiting for a time period equal to the TraceRequest attribute ‘intervalInSeconds’ (see Section 11.1.5) to expire before collecting the data associated with the trace request. 12.3.7 TraceRequestBuffering — This is the top level state for trace request buffering activity. Buffered trace requests store the results of each trace interval as a CollectedData entry within a single TraceReport (see\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model\n\nContent: Section 14.1.5). Each CollectedData entry appears within the TraceReport in the order the collection results were obtained. 12.3.7.1 When a stop trigger is detected, or the total number of results collected since the trace was enabled is equal to ‘collectionCount’, or the number of results collected since the last send is equal to ‘groupSize’, or the DCP’s trace buffering capacity has been reached, the DCP creates a single DataCollectionReport and makes it available for sending. The DataCollectionReport contains a single TraceReport that contains two or more CollectedData entries, in the order in which the results were obtained (see Section 14.1.5). 12.3.8 NotBufferingTraceResults — The trace request is not buffering collected results into a single TraceReport, because ‘groupSize’ is $\\leq 1$ . Each collected result is added to a new TraceReport and either made available for sending with a DataCollectionReport, or added to the DCP buffer in the order the TraceReport was completed. 12.3.9 BufferingTraceResults — The trace\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model (Part 4)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3  Trace Request State Model\n\nContent: request is buffering collected results into a single TraceReport because ‘groupSize’ is $> 1$ . Each new result is appended to the TraceReport as CollectedData (see Section 14.1.5.2). 12.3.10 NotSendingTraceResults — The DCP is waiting for this trace request to produce a DataCollectionReport containing a buffered TraceReport for sending. 12.3.11 SendingTraceResults — A DataCollectionReport containing a buffered TraceReport has been made available for sending. The DCP sends the DataCollectionReport to the DCP consumer.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table\n\nContent: Table 53 TraceRequest Transition Definition 12.3.13 Reporting Trace Results — Trace results are reported as CollectedData within a TraceReport (see Section 14.1.5). In addition to the collected data values, the DCP shall record the time at which the data collection was initiated (the time at which the TraceRequest’s ‘intervalInSeconds’ period expired). 12.3.13.1 If the DCP is buffered (‘intervalInMinutes’ attribute is $> 0$ ), and the TraceRequest is not buffered (groupSize is $\\leq 1 \\dot$ ), the DCP shall create a new TraceReport containing a single CollectedData entry with the collected data values for that trace interval. This TraceReport shall be added to the DCP buffer according to the time at which the report was completed. This process is repeated at each trace interval until the trace terminates. 12.3.13.2 If the DCP is buffered (‘intervalInMinutes’ attribute is $> 0$ ), and the TraceRequest is buffered (groupSize is $> 1 ^ { \\cdot }$ ), the DCP shall add the results as a CollectedData entry to the trace\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table\n\nContent: buffer in the order it was obtained. This process continues until a number of results equal to ‘groupSize’ has been collected. The DCP shall then create a new DataCollectionReport containing a single TraceReport with a number of CollectedData entries equal to ‘groupSize’. This DataCollectionReport is then added to the DCP buffer according to the time at which the report was completed. This process is repeated at each trace interval until the trace terminates. 12.3.13.3 If the DCP is not buffered (‘intervalInMinutes’ attribute is 0), and the TraceRequest is not buffered (groupSize is $\\leq 1$ ), the DCP shall create a new DataCollectionReport containing a single TraceReport with a single CollectedData entry for that interval and make the DataCollectionReport available for sending. This process is repeated at each trace interval until the trace terminates. 12.3.13.4 If the DCP is not buffered, but the TraceRequest is buffered (groupSize $> 1$ ), the DCP shall add the results as a CollectedData entry to the trace\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 12.3.12  TraceRequest Transition Table\n\nContent: buffer in the order it was obtained. This process continues until a number of results equal to ‘groupSize’ has been collected. The DCP shall then create a new DataCollectionReport containing a single TraceReport with a number of CollectedData entries equal to ‘groupSize’. This DataCollectionReport is then made available for sending. This process is repeated at each trace interval until the trace terminates.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring\n\nContent: 13.1 Operational Performance Conditions State Model 13.1.1 The purpose of the Operational Performance Conditions State Model is to define a consumer’s view of equipment behavior when its ability to perform its intended function (including the production of data requested by active DCPs) has become impaired due to resource overloading. 13.1.2 The equipment shall continuously monitor (at equipment-defined intervals) its operational performance status according to its established criteria. Each time the performance is evaluated, the equipment shall store in nonvolatile memory the job and DCP identifiers that were active at the time the evaluation was initiated (see Section 15.1.6.1.1). The equipment shall use this information as the basis for replies to the GetCurrentPerformanceStatus operation of the DataCollectionManager interface, and for the PerformanceWarning and PerformanceRestored notifications sent via the DCPConsumer interface (see Section 15.1.5). 13.1.3 The equipment shall include the following minimum set\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring\n\nContent: of conditions in determining the performance conditions to monitor: • Impairment of the equipment’s ability to properly control its components for their intended purpose. • Impairment of the equipment’s ability to process/measure/test material at its intended throughput rates. • Impairment of the equipment’s ability to deliver data from active DCPs to consumers. 13.1.4 If at any time the equipment determines that continuing to operate under degraded performance conditions will endanger people, the equipment (including its ability to sustain the transmission of data, or the processing of data collection management operations), or the material being processed, measured, or tested, the equipment shall terminate all active DCPs, and notify each client accordingly, using the DCPDeactivation message (see Section 15.1.6.2). 13.1.5 Note that this specification does not define a mechanism for establishing operational performance thresholds, or any technique for detecting when an equipment system’s operational performance is\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 13  Operational Performance Monitoring\n\nContent: degrading. It is assumed that equipment performance can be quantified, that it is possible to detect when such performance degrades below some supplier-defined threshold, and that it is possible to identify which components of the equipment are affected by the issue. 13.1.6 Normal — The equipment is operating within supplier-specified performance parameters. 13.1.7 BelowThreshold — One or more components of the equipment system is operating below supplier-specified performance parameters. 13.1.8 OperationalPerformanceConditions Transition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14  Data Collection Report Formats\n\n14.1  Data Collection Reports  \n14.1.1  Figure 24 shows how to represent a DataCollectionReport containing the data associated with a specific DCP.  These formats are used to send data to consumers using the interface defined in Section 15.  The equipment is not required to retain these reports for re-transmission once they have been sent to a consumer.  \n14.1.1.1  DataCollectionReport — this class represents one or more collected data items.  A data collection report contains one or more Reports, which can be an ExceptionReport, EventReport, or TraceReport.  If the DataCollectionReport contains more than one of those items, they are ordered according to the time of their occurrence (‘reportTime’, in the case of TraceReports).  A DataCollectionReport for a given DCP shall not contain more than one Report if the ‘intervalInMinutes’ field of the corresponding DCP was set to 0.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.1.2  DataCollectionReport Attribute Definition Table\n\nTable 55  DataCollectionReport Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.1.3  DataCollectionReport Association Definition Table\n\nTable 56  DataCollectionReport Association Definition  \n14.1.2  Report — This abstract base class represents any report item that can be included in a DataCollectionReport.\nThis class has no attributes or associations.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.3  Event Reports\n\n14.1.3.1  Figure 25 shows how to represent the occurrence of an event included in a DCP.  \n14.1.3.1.1  EventReport — Represents the occurrence of an event.  Each event has a source or origin of the event, a unique event id, and the time at which the event was detected.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 57  EventReport Attribute Definition\n\n14.1.3.2  EventReport Association Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.4  Exception Reports\n\n14.1.4.1  Figure 26 shows how to report the occurrence of an exception included in a DCP.  \n14.1.4.1.1  ExceptionReport — Represents the occurrence of an exception.  Each exception has a source or origin of the exception, a unique exception id, the time at which the exception was detected, and the severity of the exception.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.5  Trace Reports (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.5  Trace Reports\n\nContent: 14.1.5.1 Figure 27 shows how to represent a trace report. A single trace report can include one or more collected results, and each result includes the values of a set of parameters, appearing in the order specified in the DCP’s TraceRequest. 14.1.5.1.1 More than one result is included in a trace report if and only if the DCP has specified that the equipment should buffer collected data for the trace before reporting (that is, the ‘groupSize’ attribute of the TraceRequest class is $> 1$ ). 14.1.5.1.2 If the trace request included start- and/or stop-triggers, the TraceReport includes the trigger that started/stopped the trace, and the time at which the trigger was detected. These are only required to be provided in the first TraceReport immediately following the detection of a start or stop trigger. 14.1.5.1.3 TraceReport — Represents an individual trace report that has obtained one or more collection results. A trace report has a unique identifier within the scope of the DCP, and may have been started and stopped by specific\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.5  Trace Reports (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.5  Trace Reports\n\nContent: triggers, if requested in the DCP. Each of these identifiers, triggers, and associated timestamps is included in the trace report.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.1.5.1.4  TraceReport Attribute Definition Table\n\nTable 61  TraceReport Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 62  TraceReport Association Definition\n\n14.1.5.2.1  CollectedData — Represents the results of the collection of the values of one or more parameters.  A data collection result has a collection time corresponding to when the equipment began collecting the associated data values.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.2  Parameter Values\n\n14.2.1  Figure 28 shows how to represent a given data value corresponding to the specific parameters requested for an event or trace report in a DCP, or as a response to the GetParameterValues operation described in Section 9.1.2.9.  \n14.2.1.1  ParameterValue — Represents a data value originating from a specific source.  For example, the temperature from a specific processing chamber, a measurement or test result variable, the value of an E39-based object attribute, etc.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.2.1.2  ParameterValue Association Definition Table\n\nTable 65  ParameterValue Association Definition  \n14.2.1.3  AbstractValue — An abstract class representing any derived primitive, structured, or enumerated value type.  This class has no attributes or associations.  \n14.2.1.4  NoValue — This class is used to communicate problems in obtaining the values of requested Parameters. There may be situations where unanticipated conditions arise that prevent the equipment from accessing a data value due to internal communications failures or other such problems.  Less commonly, a DCP that was valid at the time it was activated may refer to Parameters that are no longer defined due to some on-the-fly reconfiguration of the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.2.1.5  NoValue Attribute Definition Table\n\nTable 66  NoValue Attribute Definition  \n14.2.1.6  NoValueReasonEnum — This enumeration classifies the major sources of an error in providing a Parameter’s value.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.2.1.7  NoValueReasonEnum Attribute Definition Table\n\nTable 67  NoValueReasonEnum Attribute Definition\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.3  Primitive Parameter Values\n\n14.3.1  To make the data requested in a DCP available to a consumer, there must be a mechanism for representing the values of primitive, or single-valued, types such as integers and strings in the type system being used.  The specific simple or primitive types that should be represented are typically determined by the implementation technology that will be used to communicate values of the declared type (e.g., SECS-II, XML, OMG IDL, etc.). The primitive types described here should be considered a minimum set that could be refined and extended to work best with the type system in use.  Any specification that translates these types into a specific type system shall define how it has mapped these primitive types into the technology-specific type system in addition to specifying any extended primitive types beyond those described here.  \n14.3.1.1  Figure 29 shows a basic set of classes that can be used to represent primitive type values.  \n14.3.1.2  IntegerValue — Represents an integer value.  \n14.3.1.3  IntegerValue Attribute Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 68  IntegerValue Attribute Definition\n\n14.3.1.4  RealValue — Represents a real (floating point) number value.  \n14.3.1.5  RealValue Attribute Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 69  RealValue Attribute Definition\n\n14.3.1.6  BooleanValue — Represents a boolean value.",
  "images": []
}