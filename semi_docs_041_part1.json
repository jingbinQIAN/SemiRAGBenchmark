{
  "doc_id": "semi_docs_041",
  "chunk_id": 1,
  "content": "SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 20  MetadataRevised Argument Definitions\n\n9.2.2.2  RevisionNotice — This class provides the date and time of any metadata revision, and the equipment whose metadata was changed.  \n9.2.2.2.1  RevisionNotice Association Definition Table\nTable 21  RevisionNotice Association Definition  \n9.2.2.2.2  equipment — Providing the root equipment node with a RevisionNotice should not be interpreted to mean that the root equipment node’s metadata has changed.  It is strictly provided as a means for clients to determine which equipment has undergone the change.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.1  Management of Equipment Metadata\n\n10.1.1  When equipment configuration changes result in a change to any information described using the classes in Section 9.1.2.9 of this document or by the SEMI Common Equipment Model, the equipment shall update the metadata description accordingly at the time of the change.  If clients have requested revision notification (see Sections 9.1.2.9 and 9.1.2.10 ), the equipment shall notify each interested client at the time of the change, or at the first opportunity when its communication status permits.  This includes reconfiguration of the equipment after its introduction into the factory.  Ensuring that all aspects of equipment metadata are kept up-to-date and available to the factory is a critical aspect of maintaining equipment metadata.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.2  Equipment Structure\n\n10.2.1  The physical equipment structure shall be described according to the SEMI Common Equipment Model. Suppliers shall provide a model of those elements of their equipment for which it is necessary and practical to facilitate (at least) utilization tracking, process control, and technical support objectives.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.3.1  Equipment Node Description (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.3.1  Equipment Node Description\n\nContent: 10.3.1.1 Figure 8 shows how to describe the parameters, events, objTypes, and exceptions available from an element (or node) of the equipment hierarchy. Providing this descriptions indicates that the specified node acts as the source of all Events, Exceptions, ObjTypes, and Parameters that are included in the description. All Parameters, Exceptions, ObjTypes, and Events associated with a given equipment node are independent of the Events, Exceptions, ObjTypes, and Parameters associated with other equipment nodes. 10.3.1.2 EquipmentNodeDescription — This class is used to identify a specific element of the equipment hierarchy, and to describe the Parameters, Exceptions, ObjTypes, and Events for which this node is the source. This is achieved through the StateMachineInstance (Section 10.8.6), SEMIObjType (Section 10.8.5 ), Exception (Section 10.7 ), and Parameter (Section 10.4 ) classes. Only one EquipmentNodeDescription shall be provided for a given equipment node. Equipment elements may be any concrete class\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.3.1  Equipment Node Description (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.3.1  Equipment Node Description\n\nContent: derived from Nameable, as defined in the SEMI E120 specification, Common Equipment Model. 10.3.1.3 EquipmentNodeDescription Association Definition Table Table 22 EquipmentNodeDescription Association Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4  Parameters\n\n10.4.1  Parameters can represent any concept that can be described by any of the primitive or composite types described in Section 10.5 .  A parameter can generally be thought of as a named, typed field that has a specific meaning, utility or other information value.  Examples are process control variables, equipment configuration settings, measurement results, wafer maps, data variables, etc.  Parameters can only be defined by an equipment node (Section 10.3 ), a SEMI ObjType (Section 10.9 ), or an exception (Section 10.7 ).  \n10.4.2  Figure 9 shows how to describe named, typed parameters with units, constraints, and associations with other parameters.  Type and units information is provided through the ParameterTypeDefinition referred to by the DefinedType class.  ParameterTypeDefinition is described in Section 10.5.1 .  \n10.4.3  Suppliers shall provide a model of those Parameters for which it is necessary and practical to facilitate (at least) utilization tracking, process control, and technical support objectives.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.4  Parameter Attribute Definition Table\n\nTable 23  Parameter Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 24  Parameter Association Definition\n\n10.4.6  Each parameter can provide a list of zero or more associated parameters, and a human-readable description of the meaning of the relationship.  \n10.4.7  AssociatedParameter — This class can be used to describe a generic association with another parameter anywhere in the equipment hierarchy.  If such an association is created, this indicates that the Parameter being defined is related in some way to the parameter referenced by this class.  The meaning of the relationship is documented in the description attribute of the AssociatedParameter class.  More specific meaning can be attributed to an associated Parameter via the classification types described in Section 10.4.11 .\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.7.1  AssociatedParameter Attribute Definition Table\n\nTable 25  AssociatedParameter Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.7.2  AssociatedParameter Association Definition Table\n\nTable 26  AssociatedParameter Association Definition  \n10.4.8  Constraint — Represents a constraint associated with this parameter.  A constraint can be used to describe limitations on the valid values of a parameter, the rate at which the parameter can be collected for off-tool reporting, or any other similar restriction on the value or usage of the parameter.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.8.1  Constraint Attribute Definition Table\n\nTable 27  Constraint Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.9  Constraint Definition (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.9  Constraint Definition\n\nContent: 10.4.9.1 Parameter constraints describe restrictions on the valid values of Parameters. A constraint is documented as a propositional formula, which evaluates TRUE with valid parameter values. Relational algebra defines a rich syntax for propositional formulas; however, this syntax is not commonly used for commercial applications. Standard Query Language (SQL) is a well-documented commercial application of relational algebra well suited to this application. Specifically, the syntax of the WHERE clause (of the SQL SELECT statement) is suitable for describing constraints on Parameter values. The WHERE clause of the SQL SELECT statement is a propositionalexpression that consists of one or more comparisons of values with constants. It has the following form. WHERE propositional-expression [nested-propositional-expression]; For the purposes of this specification, a subset of the SQL WHERE syntax (the complete syntax is discussed in Related Information, Section R2-1) shall be used to define constraints. Specifically, the\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.9  Constraint Definition (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.9  Constraint Definition\n\nContent: IN, BETWEEN, and IS operators are not supported in constraint definitions. 10.4.9.2 For example, a Parameter named “TemperatureSetpoint” that represents a temperature set point that may not be less than 100 or greater than 200 may be described using the following SQL WHERE clause. WHERE TemperatureSetpoint $> 1 0 0$ AND TemperatureSetpoint $< 2 0 0$ ;\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.9.3  Describing Reporting Frequency Constraints\n\n10.4.9.3.1  To describe the rates at which a given Parameter can be reported for data acquisition, a specific convention using the subset of the SQL WHERE clause described in Section 10.4.9.1 shall be used.  For Parameters where this is a consideration, a constraint must be provided named “ReportingPeriod”.  The definition of the ReportingPeriod constraint shall take the following form:\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # WHERE parameterName.ReportingPeriod comparison;\n\n10.4.9.3.2  Here, parameterName is the name of the Parameter to which the constraint applies, and comparison is any legal combination of terms, operators, or constants necessary to describe the constraint on valid reporting periods for the Parameter.  The time division for any constants that refer to the reporting period shall be in seconds. If the constraint definition is used to express an integer multiple of a fundamental reporting period, the variable ${ \\bf \\cdot } _ { \\bf n } ,$ shall be used to represent the multiplier.  \n10.4.9.3.3  For example, the constraint definition below specifies that the supported reporting period for “Temperature” is any continuous value between 0.01 seconds and 60 seconds.  Additional examples are provided in Related Information, Section R4-1.  \nWHERE Temperature.ReportingPeriod ${ > } . 0 1$ AND Temperature.ReportingPeriod $< 6 0$ ;\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.10  Describing SEMI Standard Variables and/or Attributes\n\n10.4.10.1  If the supplier is using a Parameter to represent variables or attributes that have been defined in a SEMI standard, the name attribute of the Parameter class shall be equal to the name of the variable or attribute exactly as it is spelled, using the same case convention as found in the corresponding standard.  The type mapping described in Section 10.5.4  shall determine the type assigned to the Parameter.  \n10.4.11.1  Figure 10 shows the classification scheme used to describe the characteristics of a Parameter.  There are two primary classifications, read-only and read-write, that specify whether or not the parameter’s value can be set by an external entity.  If read-only, the Parameter is classified as data.  If read-write, there are several subclasses that can be used to further refine the description of the Parameter’s function.  \n10.4.11.2  ParameterClassification — This class is the abstract base class for all Parameter classifications.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.3  ParameterClassification Attribute Definition Table\n\nTable 28  ParameterClassification Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.3.1  isTransient (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.3.1  isTransient\n\nContent: 10.4.11.3.1.1 If false, the Parameter’s value is guaranteed to be accessible and meaningful at all times that the equipment is available and in a state in which it is possible to communicate with external entities. Parameters that correspond to SEMI E30 equipment constants and status variables, for example, are non-transient. 10.4.11.3.1.2 If true, the Parameter is said to be “transient”. The value of a transient Parameter is not guaranteed to be accessible or meaningful except under certain conditions. For example, Parameters that correspond to SEMI E30 “data values” are transient. Additionally, a Parameter may represent an attribute of a transient SEMI E39 ObjType, in which case its accessibility is determined by the lifecycle of the ObjType. The Parameter may provide data that is only available when the equipment (or SEMI E39 ObjType) is in a specific state or states. If a transient Parameter is available for reporting with a specific event, its value may only be meaningful while the equipment is in the target state for\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.3.1  isTransient (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.3.1  isTransient\n\nContent: which the event was reported. Or, the Parameter’s value may only be meaningful at the time the event occurs. Providing a mechanism to describe the lifecycle for transient Parameters using metadata is beyond the scope of this specification. 10.4.11.4 ReadWrite — This abstract class identifies a Parameter as being settable by an external entity. The settings for such Parameters may influence the values or dynamics of other Parameters. For example, Parameters corresponding to E30 “equipment constants” may be set by an external entity, and so would be classified as ReadWrite. Parameters corresponding to E30 “status variables” or “data values” cannot be set by external entities, so would not be classified as ReadWrite.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters\n\nContent: 10.4.11.5.1.1 If the Parameter’s settings directly affect the values or dynamics of other Parameters elsewhere in the metadata, an AssociatedParameter instance must be provided and described for each such relationship for the Parameter being defined. Other generic associations may exist for the Parameter, but the specific associations that arise from the settings of the Parameter’s value must be accessible through the affectedParameters association provided by this base class unless otherwise specified in this document. 10.4.11.6 ReadOnly — This abstract class identifies a Parameter as being un-settable by an external entity. Its value, however, is accessible to external entities. This class has no attributes or associations. For example, Parameters corresponding to E30 “status variables” or “data values” cannot be set by an external entity, and so would be classified as ReadOnly. Parameters corresponding to E30 “equipment constants” can be set by external entities, so could not be classified as ReadOnly. 10.4.11.7\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters\n\nContent: Data — This class is derived from ReadOnly, and identifies a Parameter as providing data values. If nontransient, (for example, Parameters corresponding to E30 “status values”), the data values are accessible and meaningful at all times. If transient, (for example, Parameters corresponding to E30 “data values”), the data values are not guaranteed to be meaningful except when they are explicitly provided with the occurrence of specific events or, if they represent attributes of an SEMI E39 ObjType, when the corresponding ObjType has at least one active instance. This class defines no attributes or associations. 10.4.11.8 Control — This is derived from ReadWrite, and identifies a Parameter as being settable by an external entity (for example, Parameters corresponding to recipe settings). Changes in the values of a Control Parameter affect the way in which the equipment processes, measures, or tests material and may affect the values of other Parameters. This class defines no attributes or associations. 10.4.11.8.1 If\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters\n\nContent: other Parameters are affected by this Parameter’s settings, all such affected Parameters shall have a corresponding AssociatedParameter instance provided with the Control Parameter’s definition. Each such AssociatedParameter instance shall be accessible via the “affectedParameters” association of this class (inherited from ReadWrite). 10.4.11.8.2 If non-transient, the values of this Parameter are accessible and meaningful at all times, and can be set by an external entity under conditions determined by the equipment. 10.4.11.8.3 If transient, the values of this Parameter are not guaranteed to be meaningful or settable at all times. If the Parameter represents an attribute of an SEMI E39 ObjType, the Parameter will only be settable when the corresponding ObjType has at least one active instance. 10.4.11.9 Configuration — This class is derived from ReadWrite, and identifies a Parameter as being settable by an external entity, and in some way influencing equipment behavior and/or the values of other Parameters, but is\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters (Part 4)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters\n\nContent: not considered a control Parameter (for example, E30 “equipment constants” used for configuring equipment communication timeouts, etc.). This class defines no attributes or associations. 10.4.11.9.1 If other Parameters are affected by this Parameter’s settings, all such affected Parameters shall have a corresponding AssociatedParameter instance provided with the Configuration Parameter’s definition. Each such AssociatedParameter instance shall be accessible via the “affectedParameters” association of this class (inherited from ReadWrite). 10.4.11.9.2 If non-transient, the values of this Parameter are accessible and meaningful at all times, and can be set by an external entity under conditions determined by the equipment. 10.4.11.9.3 If transient, the values of this Parameter are not guaranteed to be meaningful or settable at all times. If the Parameter represents an attribute of an SEMI E39 ObjType, the Parameter will only be settable when the corresponding ObjType has at least one active instance. This class\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters (Part 5)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.4.11.5.1  affectedParameters\n\nContent: defines no attributes or associations.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.1  Parameter Type Definitions (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.1  Parameter Type Definitions\n\nContent: 10.5.1.1 Figure 11 shows a class that can be used to describe re-usable Parameter data types. Parameter type definitions can be re-used elsewhere in the metadata wherever a Parameter’s type can be declared. See Related Information Section R5-1 for some examples using the ParameterTypeDefinition class. 10.5.1.2 Parameter TypeDefinition — Serves as a class for naming and providing a re-usable description of a primitive or composite type. For example, a Parameter TypeDefinition could define a re-usable Parameter type named “KelvinTemperature” of type RealType, with Kelvin units and 4 digits of precision. A composite parameter TypeDefinition can be a named Array, Enumeration, or Structure. Each kind of primitive and composite Parameter type is described fully in subsequent sections of this document. ParameterTypeDefinition can be re-used in the definition of other ParameterTypeDefinitions, recursively within the same ParameterTypeDefinition, and in the definition of Parameters (see Section 10.4 ). 10.5.1.3 The\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.1  Parameter Type Definitions (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.1  Parameter Type Definitions\n\nContent: primitive Parameter type description classes are defined in Section 10.5.2 ; composite type description classes are defined in Section 10.5.3 .\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.1.3.1  ParameterTypeDefinition Attribute Definition Table\n\nTable 30  ParameterTypeDefinition Attribute Definition  \n10.5.1.4  ParameterTypeDefinition Association Definition Table  \n10.5.1.5  ParameterType — An abstract base class from which all type description classes are derived.  This class has no attributes or associations.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2  Primitive Parameter Type Descriptions (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2  Primitive Parameter Type Descriptions\n\nContent: 10.5.2.1 Metadata describing types must include a mechanism for describing primitive or single-valued, types such as integers and strings in the type system being used. The specific simple or primitive types that should be provided are typically determined by the implementation technology that will be used to communicate values of the declared type (for example, SECS-II, XML, OMG IDL, etc.). The primitive types described here should be considered a minimum set that could be refined and extended to work best with the type system in use. Any specification that translates these types into a specific type system shall define how it has mapped these primitive types into the technology-specific type system, and shall fully specify any additional primitive type description classes beyond those defined here. Table 31 ParameterTypeDefinition Association Definition 10.5.2.2 Figure 12 shows a basic set of classes that can be used to describe primitive Parameter types. The numeric classes representing integer and\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2  Primitive Parameter Type Descriptions (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2  Primitive Parameter Type Descriptions\n\nContent: real numbers can specify their associated units, and real number types can specify the number of digits of precision. Strings can describe the associated language and a maximum number of characters, if applicable. 10.5.2.3 IntegerType — Represents an integer type, and associated units.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 32  IntegerType Association Definition\n\n10.5.2.5  RealType — Represents a real (for example, floating point) number type, and associated units.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table\n\nContent: Table 34 RealType Association Definition 10.5.2.8 Some equipment may support the ability to provide Parameter values in more than one set of units. For each independently configurable set of units available, the equipment shall support one non-transient unit configuration Parameter to control which units are used when communicating the values of such Parameters. The ParameterType of such unit configuration Parameters shall be a string-based enumeration (see Section 10.5.4.1.3 ). Each value in the enumeration shall correspond to a different unit configuration. Figure 13 shows the classes used to describe configurable units. Not all associations and attributes of the Unit, Parameter, ParameterTypeDefinition, ParameterType, and EnumerationType classes are shown for clarity. NOTE 2: The equipment is not required to support configurable units in order to comply with E125; however if the equipment does support configurable units, it shall describe the available units and their configuration using the\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table\n\nContent: classes defined in this section. 10.5.2.9 The UnitConfig class (shown in Figure 13) is used to provide a mapping from each possible unit choice for a given numeric ParameterType to the enumeration Parameter setting that selects that unit. For example, the equipment may provide a single unit configuration Parameter to select between meter-kilogram-seconds (mks), centimeter-gram-seconds (cgs), and English units. In that case, every numeric type with configurable units appearing in a ParameterTypeDefinition would provide 3 UnitConfig instances – one for each of the 3 possible enumeration settings available from the unit configuration Parameter. 10.5.2.10 Because the mapping from an available unit to the Configuration Parameter setting that selects it is described by the UnitConfig class, it is not required to use the “affectedParameters” attribute (see Section 10.4.11.5.1) to refer to the Parameters whose units are changed by the Configuration Parameter when describing its classification. 10.5.2.11 If a\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.7  RealType Association Definition Table\n\nContent: ParameterTypeDefinition includes numeric types with configurable units, then all Parameters that are declared to be of that type shall support the configurable units described in the ParameterTypeDefinition. 10.5.2.12 UnitConfig — This class describes a configurable unit setting available for a numeric ParameterType. UnitConfig provides a mapping between the available unit, the non-transient configuration Parameter used to change the selected unit, and the enumeration value of that configuration Parameter that results in the selection of the unit. This class has no attributes.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.2.13  UnitConfig Association Definition Table\n\nTable 35  UnitConfig Association Definition  \n10.5.2.14  StringType — Represents a string type.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 36  StringType Attribute Definition\n\n10.5.2.16  BooleanType — Represents a Boolean type.  \n10.5.2.17  BinaryType — Represents a binary type.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.1  Describing Arrays (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.1  Describing Arrays\n\nContent: 10.5.3.1.1 Arrays are container types that can hold one or more values that are of the same type. Figure 14 shows how to describe the type of the elements in a given array. An array can refer to only one of the primitive or composite types, and can declare that it has a maximum number of elements. For example, an array description that has a maxElements value of 0 and refers to the RealType primitive type represents an array of real numbers (for example, float or double) that has no limitation on the number of values it can contain. 10.5.3.1.2 Each element of an array must represent the same physical concept. For example, an array of real numbers must not be used to represent a repeating sequence of a measured value in odd-numbered elements and the uncertainty for the measurement in even-numbered elements. In such cases, an array of StructureType elements is the correct representation, where the different concepts appear as different fields in the structure (for example, a measurement field and an uncertainty field). A\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.1  Describing Arrays (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.1  Describing Arrays\n\nContent: human-readable description of the meaning of the array elements is required. 10.5.3.1.3 ArrayType Attribute Definition Table Table 37 ArrayType Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.2  Describing Structures\n\n10.5.3.2.1  Structures are composite types that can hold one or more fields that are of differing primitive or composite types.  Figure 15 shows how a structure is described as a collection of one or more typed field’s.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 39  StructureType Attribute Definition\n\n10.5.3.2.2  StructureType Attribute Definition Table\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 40  StructureType Association Definition\n\n10.5.3.2.3  StructureType Association Definition Table  \n10.5.3.2.4  Field — Represents a named field that has one and only one type, primitive or composite.  This class is used for describing fields within structures.  See Section 10.5.1.2  for a description of the ParameterTypeDefinition class.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.2.4.1  Field Attribute Definition Table\n\nTable 41  Field Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.3.3  Describing Enumerations\n\n10.5.3.3.1  Enumerations are single-valued types whose possible values are restricted to one of a set of pre-defined values.  Figure 16 shows how to describe the valid settings for an enumeration as an ordered collection of integer or string values.  For both integer and string enumerations, each value in the enumeration represents a legal value for the type being described.  \n10.5.3.3.2  EnumerationType — Represents an enumeration.  EnumerationType may consist of either a set of integers, described by the EnumeratedInteger class, or a set of strings, described by the EnumeratedString class.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 43  EnumerationType Attribute Definition\n\n10.5.3.3.4  EnumerationType Association Definition Table  \nTable 44  EnumerationType Association Definition  \n10.5.3.3.5  EnumeratedInteger — Represents a legal value for an integer enumeration.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 45  EnumeratedInteger Attribute Definition\n\n10.5.3.3.7  EnumeratedString — Represents a legal value for a string enumeration.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.4  SEMI Standard Type Mapping\n\n10.5.4.1  The following table describes how to map SEMI type terminology to the various primitive and composite types defined in this document.  This convention shall be followed when describing types that represent types defined in a SEMI standard that is described by metadata.  \nTable 47  SEMI Type Mapping\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.5.5  Parameter Values\n\n10.5.5.1  Any equipment interface used in conjunction with this specification must provide a means to communicate Parameter values corresponding to the primitive and composite type definitions described in this section.  Since this representation will depend on the technology used, the technology-specific specifications for such systems shall provide a mapping between the type descriptions supported by this specification and the representation of their corresponding values.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.6  Units\n\n10.6.1  Figure 17 shows the Unit class that describes a specific unit used by the equipment.  Any unit that can be used for numeric data can be described with this class.  This specification does not define a system of units, though suppliers shall describe at least one unit that represents pure numbers (a “unit-less” unit).\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.7  Exceptions\n\n10.7.1  Figure 18 shows how to describe implemented exceptions and their associated data.  The attributes and associations of the Parameter class are not shown for clarity (see Section 10.4  for more information about Parameters).  \n10.7.2  Exception — This class can be used to represent a warning, alarm, error, or other abnormal condition that can be communicated by the equipment.  Note that the Exception class can represent abnormal conditions whose set/clear states are not tracked by the equipment, as well as those that are (for example, SEMI E30 alarms). For Exceptions whose set/clear states are not tracked, no clearData is provided.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions\n\nContent: 10.8.1.1 Figure 19 shows how to describe the definition of a StateMachine (and its associated states and transitions) that is implemented by the equipment. These classes can be used to describe standardized state machines, such as those originating from SEMI standards, as well as non-standardized equipment-specific state machines. Examples of state machines are provided in Related Information, Section R7-1. 10.8.1.1.1 The state machine description classes specified here are intended for descriptive purposes in facilitating end-user understanding of equipment behavior that results in the generation of events. They are not intended to provide comprehensive modeling of all semantics defined by standard state machine formalisms such as Harel or UML. Events generated by the equipment must be defined within the context of these state machine descriptions, even if the described state machine has not been literally implemented by the supplier. Further, this specification does not require the supplier to provide a literal\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions\n\nContent: implementation of the state machines described by these classes. 10.8.1.2 A StateMachine that defines behavior that is implemented by many equipment components (for example) need only be defined once. Each component that implements the behavior described by that StateMachine can then refer to the events it defines through the use of the StateMachineInstance class (see Section 10.8.6). It is not necessary to define multiple StateMachines to accommodate multiple components that each exhibit the same behavior and generate the same events. For example, if the equipment being described has four pump components that exhibit the same behavior, have the same underlying StateMachine, and generate the same set of events, only one StateMachine description is necessary. Each pump component can then act as a different source (see Section 10.3.1 ) of the same set of events defined for that StateMachine, each pump executing the StateMachine independently of the other pumps. 10.8.2 StateMachine — This class represents a\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.1  State Machine Descriptions\n\nContent: collection of states and transitions that together comprise a nonconcurrent finite state machine. All StateMachines refer to a single top-level state. The top-level state can contain zero or more substates and/or StateMachines. 10.8.2.1 The top-level StateMachine instance in a complete state model description represents the state model as a whole. When appearing as a member of the ‘stateMachines’ association of the State class, the StateMachine class can be used to describe 2 or more concurrent state machines belonging to that State instance. For example, the SEMI E87 Carrier state model defines three such concurrent state machines: Carrier ID Status, Carrier Slot Map Status, and Carrier Accessing Status.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.2.2  StateMachine Attribute Definition Table\n\nTable 51  StateMachine Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.2.3  SEMI Standard State Machines\n\n10.8.2.3.1  name — If the StateMachine represents a SEMI standard state machine, the value of this attribute shall be a URN of the form: “urn:semi-org:stateMachine:<standard id>:<state machine>”.  \n10.8.2.3.1.1  <standard id> shall be a string formatted according to the SEMI standard form for representing a specific version of a standard document (for example, “E87-1101”), no spaces, upper-case alphanumeric characters and hyphens only.  \n10.8.2.3.1.2  <state machine> shall be the name of the state machine as it appears in the standard, with each word in the name concatenated.  The state machine name shall use the camel case capitalization convention (that is, only the first letter of each word in the state machine name is capitalized).  For example, the state machine name for the SEMI E87 LOAD PORT TRANSFER state machine would be “LoadPortTransfer”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.2.4  StateMachine Association Definition Table\n\nTable 52  StateMachine Association Definition  \n10.8.3  State — This class represents a single state contained within a state machine.  Each State can contain zero or more substates, or zero or more StateMachines, but cannot contain both substates and StateMachines.  A substate represents a state-within-a-state.  A StateMachine represents a state-machine-within-a-state.  For example, if a given state contained 2 concurrently executing state machines, each concurrent state machine would be represented as a stateMachine within the containing state.  Initial states shall have a name attribute equal to “Initial”, final states shall have a name attribute equal to “Final”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.3.1  State Attribute Definition Table\n\nTable 53  State Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.3.2  SEMI Standard States (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.3.2  SEMI Standard States\n\nContent: 10.8.3.2.1 name — If the State represents a SEMI standard state, the value of this attribute shall be a URN of the form: “urn:semi-org:state:<standard id>:<state machine>:<state path name>”. 10.8.3.2.1.1 <standard $\\mathrm { i d } >$ shall be a string formatted according to the SEMI standard form for representing a specific version of a standard document (for example, “E87-1101”), no spaces, upper-case alphanumeric characters and hyphens only. 10.8.3.2.1.2 <state machine> shall be the name of the state machine in which the transition is defined. This field shall be equal to the state machine name as it appears in the standard, with each word in the name concatenated. The state machine name shall use the camel case capitalization convention (that is, only the first letter of each word in the state machine name is capitalized). For example, the state machine name for the SEMI E87 LOAD PORT TRANSFER state machine would be “LoadPortTransfer”. 10.8.3.2.1.3 <state path name> shall be formed by concatenating the names of\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.3.2  SEMI Standard States (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.3.2  SEMI Standard States\n\nContent: all states from the top level state in the state machine to the state being described, including any substates in between. Each state name in the path shall be separated by the ‘.’ character. State names shall have no spaces, use alphanumeric characters only, and use camel case capitalization. For example, the E87 “SLOT MAP NOT READ” state of the Carrier state machine would have a <state path name> equal to “Carrier.CarrierSlotMapStatus.SlotMapNotRead”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 54  State Association Definition\n\n10.8.4  Transition — This class represents a transition between any two states contained within the same StateMachine, including substates.  Each transition references one “source”, or “from” state, and one “target”, or “to” state, representing the originating and ending states.  There must be one Transition defined for all possible state transitions in the StateMachine instance.  History or conditional transitions are described by providing as many transitions as there are possible conditional or history-based outcomes.  True Harel history transitions can be accommodated by mapping all such transitions to a single event.  The ‘description’ attribute can be used to provide a human-readable description of the condition under which the transition takes place.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.4.1  Transition Attribute Definition Table\n\nTable 55  Transition Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.4.2  SEMI Standard Transitions (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.4.2  SEMI Standard Transitions\n\nContent: 10.8.4.2.1 name — If the Transition represents a SEMI standard transition, the value of this attribute shall be a URN of the form: “urn:semi-org:transition: $<$ <standard $\\mathrm { i d } >$ :<state machine>:<transition number>:<transition name>”. 10.8.4.2.1.1 $\\prec$ standard $\\mathrm { i d } >$ shall be a string formatted according to the SEMI standard form for representing a specific version of a standard document (for example, “E87-1101”), no spaces, upper-case alphanumeric characters and hyphens only. 10.8.4.2.1.2 <state machine> shall be the name of the state machine in which the transition is defined. This field shall be equal to the state machine name as it appears in the standard, with each word in the name concatenated. The state machine name shall use the camel case capitalization convention (that is, only the first letter of each word in the state machine name is capitalized). For example, the state machine name for the SEMI E87 LOAD PORT TRANSFER state machine would be “LoadPortTransfer”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.4.2  SEMI Standard Transitions (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.4.2  SEMI Standard Transitions\n\nContent: 10.8.4.2.1.3 <transition number> shall be a string representation of the transition number as it appears in the state machine definition. 10.8.4.2.1.4 <transition name> shall be formed by concatenating the names of the source and target states for the <transition number>, separated by a hyphen. The state names shall have no spaces, use alphanumeric characters only, and use camel case capitalization. If either of these states is an “initial” or “final” state, the words “Initial” or “Final”, respectively, shall be used for the state name. For example, the event name for the E87 load port transfer history transition from the initial state to “OUT OF SERVICE” would be “Initial-OutOfService”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 56  Transition Association Definition\n\n10.8.5  Event — This class defines an event that the equipment generates as a result of a transition between any two states contained within the same StateMachine, including substates.  Each Event can reference one or more transitions.  This is in support of systems or standards that use the same event id to communicate different transitions.  Such implementations typically make additional data available with the event occurrence for distinguishing between the different transitions.  Note that it is not possible for two different events to be defined for the same transition.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6  State Machine Instances\n\n10.8.6.1  State machines are intended to be defined once and re-used wherever there is an equipment component or other entity that can generate the same set of events defined by that state machine.  However, each entity that supports a given state machine may report different data for those events.  Figure 20 shows the classes that are used to describe the Parameters available for reporting with the events from a given state machine supported by a given entity.  \n10.8.6.2  StateMachineInstance — This class is used to declare that an equipment node or other entity supports a specific state machine described in the metadata.  It provides a way to describe the data such entities provide with the events from that state machine as well as the Parameters used to determine the current state of the entity that supports the state machine.  The class can be used to describe the events and data available from top-level state machines as well as any nested state machines defined within the top level state machine.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.3  StateMachineInstance Attribute Definition Table\n\nTable 57  StateMachineInstance Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 58  StateMachineInstance Association Definition\n\n10.8.6.5  EventToParameterMap — This class is used to provide a list of the Parameters available for a specific event from a given StateMachine.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 59  EventToParameterMap Attribute Definition\n\n10.8.6.7  EventToParameterMap Association Definition Table\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 60  EventToParameterMap Association Definition\n\n10.8.6.7.1  availableParameters — All transient Parameters (see Section 10.4.11) that are available for reporting with an event generated by the entity providing the EventToParameter map shall be provided in this list.  It is not necessary to list any non-transient Parameters via this association.  Non-transient Parameters are implicitly available for reporting with any event.  \n10.8.6.8  Events may only be defined within the context of a Transition between two States within a StateMachine. All events that the equipment can generate must have a StateMachine defined for them.  It is not necessary to define multiple StateMachines for a situation in which the same kind of events are generated by multiple sources.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.9  Event Attribute Definition Table\n\nTable 61  Event Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events\n\nContent: 10.8.6.10.1 name — If the Event represents a SEMI standard event, the value of this attribute shall be a URN of the form: “urn:semi-org:event:<standard id>:<state machine>:<transition number>:<event name>”. 10.8.6.10.1.1 <standard $\\mathrm { i d } >$ shall be a string formatted according to the SEMI standard form for representing a specific version of a standard document (for example, “E87-1101”), no spaces, upper-case alphanumeric characters and hyphens only. 10.8.6.10.1.2 <state machine> shall be the name of the state machine in which the event is defined. If no such state machine is defined, this field shall be equal to the text “None”. If there is a defined state machine, the name shall be equal to the state machine name as it appears in the standard, with each word in the name concatenated. The state machine name shall use the camel case capitalization convention (that is, only the first letter of each word in the state machine name is capitalized). For example, the state machine name for the SEMI E87 LOAD PORT\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events\n\nContent: TRANSFER state machine would be “LoadPortTransfer”. 10.8.6.10.1.3 <transition number> shall be a string representation of the transition number as it appears in the state machine definition. If no state machine or transition number is defined in the standard, this field shall be equal to the text “None”. 10.8.6.10.1.4 <event name> shall be the name of the event as it appears in the standard with no spaces, alphanumeric characters only, using camel case capitalization. If no event name is defined, this field shall be formed by concatenating the names of the source and target states for the <transition $\\mathrm { i d } >$ , separated by a hyphen. The state names shall have no spaces, alphanumeric characters only, and use camel case capitalization. If either of these states is an “initial” or “final” state, the words “Initial” or “Final”, respectively, shall be used for the state name. For example, the event name for the E87 load port transfer history transition from the initial state to “OUT OF SERVICE” would be\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.8.6.10  SEMI Standard Events\n\nContent: “Initial-OutOfService”.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.9  ObjTypes\n\n10.9.1  Figure 21 shows how to describe SEMI ObjTypes (for example, the “Carrier” ObjType from SEMI E87) that have been implemented by the equipment.  An ObjType is similar to a class in that it describes attributes and state machines that are common to all instances of the ObjType.  Each ObjType instance maintains its attributes and state machines independently of all other instances of the same ObjType.  See Related Information 6 for examples using the SEMIObjType class.  \n10.9.1.1  SEMIObjType — This class describes the attributes and events for a SEMI ObjType that has been implemented by the equipment.  If it is a SEMI standard ObjType then it is identified by the name of the SEMI standard within which it was defined, and the name of the ObjType specified in that standard.  Each ObjType includes at least two attributes, corresponding to its type name and its instance id (see SEMI E39).\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 10.9.1.2  SEMIObjType Attribute Definition Table\n\nTable 63  SEMIObjType Attribute Definition\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 11  Requirements for Compliance\n\n11.1  Compliance to Equipment Self-Description  \n11.2  Table 55 provides a checklist for Equipment Self Description compliance.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 1 TYPICAL USE CASES\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-1  Example Use Cases\n\nR1-1.1  Figure R1-1 shows an example of some typical use cases that this specification supports.  The actors shown represent some of the possible applications that could make use of the information provided by this specification, and are only examples.  In an actual factory, other applications/actors not shown here may make use of equipment metadata.  The system boundary in this diagram represents all entities that comprise or represent a single equipment installation.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-2  Example Actors\n\nR1-2.1  EquipmentDiagnosticsClient — This actor represents an application that helps factory or supplier personnel troubleshoot mechanical, electrical, chemical, or other problems identified with the equipment.  \nR1-2.2  UtilizationTrackingClient — This actor represents an application that collects performance information from the equipment to calculate relevant utilization metrics.  \nR1-2.3  ProcessControlClient — This actor represents an application that orchestrates material processing measurement, or testing performed by the equipment.  \nFigure R1-1 Typical Equipment Metadata Use Cases\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions\n\nContent: R1-3.1 Retrieve State Machine Descriptions — This use case provides a way for an application to request a description of all of the state machines supported by the equipment, and to determine which state machines are implemented by which components of the equipment. This supports automated usage, so that applications that are looking for standardized or well-known equipment-specific state models can discover their existence on a specific tool, as well as the supplier-specific event id’s used to communicate standardized state transitions. It also supports any manual application in which a human user would like to understand equipment-specific behavior that has not been standardized. Figure R1-2 shows one example of how this use case can be realized using messages from the interface defined in this specification (see Section 9). Figure R1-2 Use Case Realization for “Retrieve State Machine Descriptions” R1-3.2 Retrieve SEMIObjType Descriptions — This use case provides a way for an application to request a description of\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions\n\nContent: all of the SEMI standard OSS ObjTypes supported by the equipment. This supports automated usage, so that applications that are written to work with OSS ObjTypes can discover which ObjTypes are in use on a specific equipment installation, and can learn the event id’s that the supplier uses for standardized state transitions. Figure R1-3 shows one example of how this use case can be realized using messages from the interface defined in this specification (see Section 9). Figure R1-3 Use Case Realization for “Retrieve ObjType Descriptions” R1-3.3 Retrieve Exception Descriptions — This use case provides a way for an application to request a description of all of the exceptions generated by the equipment, and to determine which components of the equipment generate which exceptions. This supports automated usage, so that applications that are looking for standardized or wellknown equipment specific exceptions can discover their existence on a specific tool. It also supports any manual usage in which a human user would like to\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions\n\nContent: understand available equipment-specific exceptions. Figure R1-4 shows one example of how this use case can be realized using messages from the interface defined in this specification (see Section 9). Figure R1-4 Use Case Realization for “Retrieve Exception Descriptions” R1-3.4 Retrieve Equipment Parameter Descriptions — This use case provides a way for an application to request a description of all of the data items provided by the equipment, and to determine which components of the equipment provide that data. This supports automated usage, so that applications that are looking for standardized or wellknown equipment-specific data items can discover their existence on a specific tool. It also supports any manual usage in which a human user would like to browse and understand equipment-specific data that has not been standardized. Figure R1-5 shows one example of how this use case can be realized using messages from the interface defined in this specification (see Section 9). Figure R1-5 Use Case Realization for\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions (Part 4)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R1-3  Use Case Descriptions\n\nContent: “Retrieve Equipment Parameter Descriptions” R1-3.5 Retrieve Equipment Configuration — This use case is directly supported by this specification, and provides a way for an application to request a description of the physical and logical equipment configuration. Figure R1-6 shows one example of how this use case can be realized using messages from the interface defined in this specification (see Section 9). Figure R1-6 Use Case Realization for “Retrieve Equipment Configuration”\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 2SQL WHERE CLAUSE\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax\n\nContent: R2-1.1 The WHERE clause of the SQL SELECT statement is a propositional-expression that consists of one or more comparisons of values with constants. It has the following form. WHERE propositional-expression [nested-propositional-expression]; R2-1.2 Syntax R2-1.2.1 propositional-expression — Specifies a comparison. It takes one of the following forms: [NOT] term operator term parameter [NOT] IN (constant1,… constantn) parameter [NOT] BETWEEN ( term1 AND term2 ) (inclusive) term IS [NOT] NULL | TRUE | FALSE parameter [NOT] LIKE “string%” R2-1.2.2 [ ] — An optional equation item. R2-1.2.3 term — Specifies a parameter, a constant or an arithmetic expression of parameters and constants. The allowed arithmetic operations are addition $( + )$ , subtraction (-), multiplication $( ^ { * } )$ and division $( / )$ . R2-1.2.4 parameter — Specifies the name of the parameter value to use in the comparison operation. R2-1.2.5 Constant 1) Specifies a number or a string enclosed by quotation marks. 2) Specifies a conditional. A conditional has the\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax\n\nContent: following form. DECODE( term, constant1, return1, … constantn, returnn, default ) returni default The value of the conditional if term equals constanti. The value of the conditional if parameter does not equal any constanti. R2-1.2.6 operator — Specifies the operator to use in the comparison. It can be one of the following operators. R2-1.3 IN — List Inclusion test (enumeration comparison). R2-1.4 BETWEEN — Bounds test (limits comparison). R2-1.5 IS — Equality test. R2-1.6 LIKE — Pattern matching (string comparison) test. (LIKE only works with ASCII data types). R2-1.6.1 $A \\mid B \\mid \\ldots N$ — One of the listed items is required. R2-1.6.2 String% — String constant followed by the $\\mathbf { \\hat { \\Sigma } } ^ { 6 6 } \\mathbf { \\hat { \\Sigma } } ^ { 9 }$ or “\\*” wild character. A wildcard character can also be used by itself to match everything. Use a wildcard character only at the end of the string constant. R2-1.6.3 nested-propositional-expression — AND|OR propositional-formula [nested-propositional-formula] NOTE 1: A semicolon\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R2-1  Syntax\n\nContent: is required at the end of SQL statements. The ‘;’ indicates the SQL statement is complete. NOTE 2: Parentheses can be used in the usual way to group expressions and establish precedence. NOTE 3: Floating-point comparisons are approximate. Testing for equality with floating point values is not recommended.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 3 PARAMETER CONSTRAINTS\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R3-1  Examples\n\nR3-1.1  This clause specifies that all values of “voltage” that are less than or equal to 50 are valid (i.e., it evaluates true for all values of voltage less than or equal to 50).  \nWHERE voltage $\\scriptstyle \\leq = 5 0$ ;  \nR3-1.2  The following clauses specifies that all values of “voltage” that are between 0 and 50 (inclusive) are valid.  \nWHERE voltage $> = 0$ AND voltage $\\scriptstyle \\leq = 5 0$ ;  \nR3-1.3  The clause specifies that all values of “voltage” that are 50 and less or 100 and greater (inclusive) are valid.  \nWHERE voltage $\\scriptstyle \\leq = 5 0$ OR voltage $> = 1 0 0$ ;  \nR3-1.4  The following clause specifies that only “voltage” values of 1, 2, 4, 8 and 16 are valid. WHERE voltage $= 1$ OR voltage $= 2$ OR voltage $= 4$ OR voltage $= 8$ OR voltage $= 1 6$ ;  \n-1.5  The following clause specifies that any “voltage” value that is not 1, 2, 4, 8 or 16 is valid.  \nWHERE voltage $\\mathrm { \\textless } 1$ AND voltage $\\hphantom { 0 0 0 } < > 2$ AND voltage $\\Leftrightarrow 4$ AND voltage $\\Leftrightarrow 8$ AND voltage $\\mathit { \\Theta } _ { < > 1 6 }$ ;\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 4 PARAMETER REPORTING PERIOD CONSTRAINTS\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R4-1  Examples\n\nR4-1.1  The constraint definition below specifies that the supported reporting period for “voltage” is any continuous value between 0.01 seconds and 60 seconds.  \nWHERE voltage.ReportingPeriod $> . 0 1$ AND voltage.ReportingPeriod $< 6 0$ ;  \nR4-1.2  The constraint definition below specifies that the supported reporting period for “voltage” is any integer multiple (from 1 to 6000) of a fundamental period of 0.01 seconds.  \nWHERE voltage.ReportingPerio $\\mathrm { 1 } = \\left( \\mathrm { \\mathrm { \\ n ^ { * } . 0 1 } } \\right) \\mathrm { \\bf A N D \\mathrm { \\ n } > 1 \\mathrm { \\bf ~ A N D \\mathrm { \\ n } < 6 0 0 0 ; } }$  \nR4-1.3  The constraint definition below specifies that the supported reporting period for “voltage” is any of the discrete values 0.05 seconds, 0.07 seconds, 0.1 seconds, or 1.5 seconds.  \nWHERE voltage.ReportingPeriod $= . 0 5$ OR  voltage.ReportingPeriod $_ { = . 0 7 }$ OR voltage.ReportingPeriod $\\mathbf { \\Sigma } =$ .1 OR voltage.ReportingPeriod $= 1 . 5$\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 5 TYPE DEFINITIONS\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R5-1  Examples\n\nR5-1.1  Figure R5-1 shows an example set of type definitions using the classes described in Section 10.5.  These types could be used for Parameters used to represent the SEMI standard ObjType, ObjId, and ContentMap attributes of the SEMI E87 Carrier ObjType, as well as re-usable type definitions for the strings used for the ObjID and ObjType attributes defined in SEMI E39.  Note that the type descriptions conform to the SEMI type mapping described in Section 10.5.7.  \nFigure R5-1 TypeDefinition Example\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 6 OBJTYPES\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R6-1  Examples\n\nR6-1.1  Figure R6-1 shows an abbreviated example of how to describe the E87 Carrier ObjType using the classes from Section 10.10.  Not all events and attributes available for the Carrier ObjType are shown for clarity, only the ObjType, ObjId, and ContentMap attributes, and the creation/destruction events for the Carrier.  Note that the names and types of the attributes of the ObjType conform to the name and typing conventions described in Sections 10.4.11 and 10.5.7.  ParameterTypeDefinitions have been omitted for clarity.  See Related Information Section R5-1 for an example of the corresponding ParameterTypeDefinitions.  \nFigure R6-1 E87 Carrier ObjType Example\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 7 STATE MACHINES\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R7-1  Examples\n\nR7-1.1  Simple Pump  \nR7-1.1.1  Figure R7-1 shows an example state machine that could be described by the StateMachine mechanism described in Section 10.9.  The example is for a very simple vacuum pump that is either pumping down or idle.  \nFigure R7-1 Example — Vacuum Pump State Machine  \nR7-1.1.2  Figure R7-2 shows how the example state machine could be represented using the StateMachine, State, and Transition classes.  The top level state, Pump, is represented as a State that contains two substates corresponding to Idle and PumpingDown.  Three transitions have been defined, corresponding to the three transitions shown in Figure R7-2.  \nFigure R7-2 Example Representation of the Vacuum Pump State Machine\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # RELATED INFORMATION 8 R8 UML TERMINOLOGY\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 1)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: R8-1.1 In order to help with understanding terminology used in conjunction with object technology, this section shares excerpts from the glossary of the OMG standard for UML — the predominant modeling notation. R8-1.2 These definitions are taken from B.2 Glossary of Terms of version 1.4 of the OMG UML specification, 01- 09-67, available from http://www.omg.org/technology/documents/modeling_spec_catalog.htm. R8-1.2.1 abstract class — a class that cannot be directly instantiated. Contrast: concrete class. R8-1.2.2 aggregate [class] — a class that represents the “whole” in an aggregation (whole-part) relationship. See: aggregation. R8-1.2.3 aggregation — a special form of association that specifies a whole-part relationship between the aggregate (whole) and a component part. See: composition. R8-1.2.4 association — the semantic relationship between two or more classifiers that specifies connections among their instances. R8-1.2.5 attribute — a feature within a classifier that describes a range of values that instances of the classifier\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 2)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: may hold. R8-1.2.6 cardinality — the number of elements in a set. Contrast: multiplicity. R8-1.2.7 child — in a generalization relationship, the specialization of another element, the parent. See: subclass, subtype. Contrast: parent. R8-1.2.8 class — a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. See: interface. R8-1.2.9 classifier — a mechanism that describes behavioral and structural features. Classifiers include interfaces, classes, datatypes, and components. R8-1.2.10 classification — the assignment of an object to a classifier. See: dynamic classification, multiple classification, static classification. R8-1.2.11 class diagram — a diagram that shows a collection of declarative (static) model elements, such as classes, types, and their contents and relationships. R8-1.2.12 composition — a form of aggregation which requires that a part instance be included\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 3)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: in at most one composite at a time, and that the composite object is responsible for the creation and destruction of the parts. Composition may be recursive. Synonym: composite aggregation. R8-1.2.13 concrete class — a class that can be directly instantiated. Contrast: abstract class. R8-1.2.14 constraint — a semantic condition or restriction. Certain constraints are predefined in the UML, others may be user defined. Constraints are one of three extensibility mechanisms in UML. See: tagged value, stereotype. R8-1.2.15 dependency — a relationship between two modeling elements, in which a change to one modeling element (the independent element) will affect the other modeling element (the dependent element). R8-1.2.16 diagram — a graphical presentation of a collection of model elements, most often rendered as a connected graph of arcs (relationships) and vertices (other model elements). UML supports the following diagrams: class diagram, object diagram, use case diagram, sequence diagram, collaboration diagram, state diagram, activity\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 4)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: diagram, component diagram, and deployment diagram. R8-1.2.17 element — an atomic constituent of a model. R8-1.2.18 feature — a property, like operation or attribute, which is encapsulated within a classifier, such as an interface, a class, or a datatype. R8-1.2.19 generalization — a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element and contains additional information. An instance of the more specific element may be used where the more general element is allowed. See: inheritance. R8-1.2.20 inheritance — the mechanism by which more specific elements incorporate structure and behavior of more general elements related by behavior. See: generalization. R8-1.2.21 instance — an entity that has unique identity, a set of operations that can be applied to it, and state that stores the effects of the operations. See: object. R8-1.2.22 interface — a named set of operations that characterize the behavior of an element. R8-1.2.23\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 5)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: interface inheritance — the inheritance of the interface of a more general element. Does not include inheritance of the implementation. Contrast: implementation inheritance. R8-1.2.24 message — a specification of the conveyance of information from one instance to another, with the expectation that activity will ensue. A message may specify the raising of a signal or the call of an operation. R8-1.2.25 method — the implementation of an operation. It specifies the algorithm or procedure associated with an operation. R8-1.2.26 model [MOF] — an abstraction of a physical system with a certain purpose. See: physical system. Usage note: In the context of the MOF specification, which describes a meta-metamodel, for brevity the metametamodel is frequently referred to as simply the model. R8-1.2.27 multiple inheritance — a semantic variation of generalization in which a type may have more than one supertype. Contrast: single inheritance. R8-1.2.28 multiplicity — a specification of the range of allowable cardinalities that a set may assume.\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 6)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: Multiplicity specifications may be given for roles within associations, parts within composites, repetitions, and other purposes. Essentially a multiplicity is a (possibly infinite) subset of the non-negative integers. Contrast: cardinality. R8-1.2.29 object — an entity with a well-defined boundary and identity that encapsulates state and behavior. State is represented by attributes and relationships, behavior is represented by operations, methods, and state machines. An object is an instance of a class. See: class, instance. R8-1.2.30 object diagram — a diagram that encompasses objects and their relationships at a point in time. An object diagram may be considered a special case of a class diagram or a collaboration diagram. See: class diagram, collaboration diagram. R8-1.2.31 operation — a service that can be requested from an object to effect behavior. An operation has a signature, which may restrict the actual parameters that are possible. R8-1.2.32 parent — in a generalization relationship, the generalization of another\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 7)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: element, the child. See: subclass, subtype. Contrast: child. R8-1.2.33 package — a general purpose mechanism for organizing elements into groups. Packages may be nested within other packages. R8-1.2.34 qualifier — an association attribute or tuple of attributes whose values partition the set of objects related to an object across an association. R8-1.2.35 relationship — a semantic connection among model elements. Examples of relationships include associations and generalizations. R8-1.2.36 role — the named specific behavior of an entity participating in a particular context. A role may be static (for example, an association end) or dynamic (for example, a collaboration role). R8-1.2.37 single inheritance — a semantic variation of generalization in which a type may have only one supertype. Synonym: multiple inheritance [OMA]. Contrast: multiple inheritance. R8-1.2.38 subclass — in a generalization relationship, the specialization of another class; the superclass. See: generalization. Contrast: superclass. R8-1.2.39 subtype — in a\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 8)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: generalization relationship, the specialization of another type; the supertype. See: generalization. Contrast: supertype. R8-1.2.40 superclass — in a generalization relationship, the generalization of another class; the subclass. See: generalization. Contrast: subclass. R8-1.2.41 supertype — in a generalization relationship, the generalization of another type; the subtype. See: generalization. Contrast: subtype. R8-1.2.42 type — a stereotyped class that specifies a domain of objects together with the operations applicable to the objects, without defining the physical implementation of those objects. A type may not contain any methods, maintain its own thread of control, or be nested. However, it may have attributes and associations. Although an object may have at most one implementation class, it may conform to multiple different types. See: implementation class. Contrast: interface. R8-1.2.43 visibility — an enumeration whose value (public, protected, or private) denotes how the model element to which it refers may be seen outside\n\nSEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary (Part 9)\n\nTitle: SEMI E125-0305SPECIFICATION FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # R8-1  Glossary\n\nContent: its enclosing namespace. NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD)\n\nThis provisional specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee.  Current edition approved by the North American Regional Standards Committee on December 10, 2005.  Initially available at www.semi.org February 2005; to be published March 2005.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table of Contents\n\n1 Purpose.. 4\n1.1 SOAP Implementation Mapping. 4\n2 Scope.. 4\n2.1 Specification Scope... 4\n3 Limitations .. 4\n3.1 Provisional Specification.. 4\n4 Referenced Standards.. 4\n4.1 SEMI Standards.... 4\n4.2 OMG Standards.... 4\n4.3 W3C Standards... 4\n4.4 Other Specifications ... 5\n5 Terminology...\n5.1 Abbreviations and Acronyms... 5\n5.2 Definitions ..... 5\n6 Conventions .. 5\n6.1 Translating UML to XML Schema... 5\n6.2 Documenting XML Schema and WSDL Files... 6\n6.3 Documenting XML Schema with Diagrams.... 7\n6.4 XML Schema Sample.....\n6.5 Translating UML to WSDL.. .9\n7 Mapping of SEMI E125 UML to XML Schema and WSDL.. .. 9\n7.1 WSDL Organization . 9\n7.2 EquipmentMetadataManager.. 10\n7.3 MetadataClient.. 42\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Figures (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Figures\n\nContent: Figure 1 XML Schema Example Diagram . .8 Figure 2 XML for Sample . .8 Figure 3 XML Schema and WSDL File Organization . .10 Figure 4 WSDL and XML Schema Files for SEMI E125 ..10 Figure 5 Mapping the EquipmentMetadataManager to a WSDL portType.. ..12 Figure 6 GetUnitsRequest Global Element ... ..13 Figure 7 GetUnitsResponse Global Element . ..13 Figure 8 GetTypeDefinitionsRequest Global Element . ..15 Figure 9 GetTypeDefinitionsResponse Global Element.. ..15 Figure 10 ParameterTypeDefinitionType Global complexType . .16 Figure 11 VariableTypeType Global complexType .. ..20 Figure 12 ArrayTypeType Global complexType ..21 Figure 13 StructureTypeType Global complexType .. .22 Figure 14 EnumeratedTypeType Global complexType... ..23 Figure 15 GetStateMachinesRequest Global Element. ..24 Figure 16 GetStateMachinesResponse Global Element . .25 Figure 17 StateMachineType Global complexType .. .25 Figure 18 GetSEMIObjTypesRequest Global Element ... .28 Figure 19 GetSEMIObjTypesResponse Global Element... .28\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Figures (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Figures\n\nContent: Figure 20 StateMachineInstanceType Global complexType.. 29 Figure 21 GetExceptionsRequest Global Element . .31 Figure 22 GetExceptionsResponse Global Element ... ..32 Figure 23 GetEquipmentStructureRequest Global Element . .33 Figure 24 GetEquipmentStructureResponse Global Element.. ..33 Figure 25 GetEquipmentNodeDescriptionsRequest Global Element .. .35 Figure 26 GetEquipmentNodeDescriptionsResponse Global Element.... ..35 Figure 27 EquipmentNodeDescriptionType Global complexType . ...36 Figure 28 ParameterType Global complexType....... ..37 Figure 29 GetLatestRevisionRequest .. ...40 Figure 30 GetLatestRevisionResponse Global Element... ..40 Figure 31 NotifyOnRevisionsRequest Global Element .... ..41 Figure 32 NotifyOnRevisionsResponse Global Element.... ..42 Figure 33 MetadataRevisedNotification Global Element... .44\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: Table 1 Example Translation Table. .6 Table 2 Example Translation Table for Operation Input/Output Arguments .. .6 Table 3 Example Schema/WSDL Document Description Table. .6 Table 4 Altova XMLSPY Schema Diagram Symbols.. .7 Table 5 Example Interface WSDL Port Type Table.. ..9 Table 6 Example Interface WSDL Binding Table... 9 Table 7 Example Operation Binding Table ..... ..9 Table 8 Example PortType Operation Table .. ..9 Table 9 XML Schema.. .11 Table 10 EquipmentMetadataManager PortType Definitions . .11 Table 11 EquipmentMetadataManager Binding Definitions .. 11 Table 12 EquipmentMetadataManager Port Type... .12 Table 13 EquipmentMetadataManager Binding. .12 Table 14 GetUnits Operation Binding .. .13 Table 15 GetUnits PortType Operation . ..13 Table 16 EquipmentMetadataManager Binding.. ...13 Table 17 Translation Table for Output Arguments for the GetUnits Operation. ..14 Table 18 E125 Unit $$ UnitType Translation Table ... ..14 Table 19 GetTypeDefinitions Operation Binding. ..14 Table 20 GetUnits\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: PortType Operation . ..14 Table 21 EquipmentMetadataManager Binding.. ..15 Table 22 Translation Table for Output Arguments for the GetUnits Operation. ..15 Table 23 SEMI E125 ParameterTypeDefinition $$ ParameterTypeDefinitionType Translation Table.. ..16 Table 24 SEMI E125 Type Description Mapping Table .. ..17 Table 25 SECS-II Type Description Mapping Table.. .17 Table 26 E125 StringType $$ StringTypeType Translation Table. ..18 Table 27 SEMI E125 BinaryType $$ Base64BinaryTypeType Translation Table ... ..18 Table 28 SEMI E125 IntegerType $$ ByteTypeType Translation Table . .18 Table 29 SEMI E125 UnitConfig $$ UnitConfigArrayType Translation Table.... ..18 Table 30 SEMI E125 IntegerType $$ ShortTypeType Translation Table. ..19 Table 31 SEMI E125 IntegerType $$ IntTypeType Translation Table . .19 Table 32 E125 IntegerType $$ LongTypeType Translation Table.... .19 Table 33 SEMI E125 RealType $$ FloatTypeType Translation Table . ..20 Table 34 E125 RealType $$ DoubleTypeType Translation Table . .20 Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: 35 SEMI E125 ArrayType $$ ArrayTypeType Translation Table . .21 Table 36 SEMI E125 StructureType $$ StructureTypeType Translation Table.. .23 Table 37 SEMI E125 Field $$ FieldType Translation Table.. .23 Table 38 SEMI E125 EnumerationType $$ EnumerationTypeType Translation Table.. ..23 Table 39 SEMI E125 EnumeratedString $$ EnumeratedStringType Translation Table .. 24 Table 41 GetStateMachines Operation Binding ..... .24 Table 42 GetStateMachines PortType Operation .... .24 Table 43 EquipmentMetadataManager Binding..... .24 Table 44 Translation Table for Output Arguments for the GetStateMachines Operation .... .26 Table 45 SEMI E125 StateMachine $$ StateMachineType Translation Table . .26 Table 46 SEMI E125 State $$ StateType Translation Table ... 26 Table 47 SEMI E125 Transition $$ TransitionType Translation Table ..... .26 Table 48 SEMI E125 Event $$ EventType Translation Table ... .27 Table 49 GetSEMIObjTypes Operation Binding .. .27 Table 50 GetSEMIObjTypes PortType Operation ... .27 Table 51\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 4)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: EquipmentMetadataManager Binding.. .27 Table 52 Translation Table for Output Arguments for the GetSEMIObjTypes Operation .. ......28 Table 53 SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table.. ....28 Table 54 SEMI E125 StateMachineInstance $$ StateMachineInstanceType Translation Table.. .29 Table 55 Example Parameter References .. .30 Table 56 SEMI E125 EventToParameterMap $$ EventToParameterMapType Translation Table ... .30 Table 57 GetExceptions Operation Binding.. .31 Table 58 GetExceptions PortType Operation .. .31 Table 59 EquipmentMetadataManager Binding... .31 Table 60 Translation Table for Output Arguments for the GetExceptions Operation. .32 Table 61 SEMI E125 EventToParameterMap $$ EventToParameterMapType Translation Table .. .32 Table 62 GetEquipmentStructure Operation Binding... .33 Table 63 GetEquipmentStructure PortType Operation... 33 Table 64 EquipmentMetadataManager Binding..... .33 Table 65 Translation Table for Output Arguments for the GetEquipmentStructure Operation....\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 5)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: .34 Table 66 GetEquipmentNodeDescriptions Operation Binding.... 34 Table 67 GetEquipmentNodeDescriptions PortType Operation... 34 Table 68 EquipmentMetadataManager Binding.... .34 Table 69 Translation Table for Input Arguments for the GetEquipmentNodeDescriptions Operation ... .35 Table 70 Translation Table for Output Arguments for the GetEquipmentNodeDescriptions Operation . .36 Table 71 SEMI E125 EquipmentNodeDescription $$ EquipmentNodeDescriptionType Translation Table .. .37 Table 72 SEMI E125 Parameter $$ ParameterType Translation Table..... ....38 Table 73 SEMI E125 Constraint $$ ConstraintType Translation Table. ....38 Table 74 SEMI E125 AssociatedParameter $$ ParameterAssociationType Translation Table.... ....38 Table 75 SEMI E125 ParameterClassification $$ ParameterClassificationType Translation Table . ..39 Table 76 SEMI E125 ReadWrite $$ ReadWriteType Translation Table.. ..39 Table 77 GetLatestRevision Operation Binding.. .39 Table 78 GetLatestRevision PortType Operation. .39 Table 79\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables (Part 6)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # List of Tables\n\nContent: EquipmentMetadataManager Binding. .40 Table 80 Translation Table for Output Arguments for the GetLatestRevision Operation. .40 Table 81 NotifyOnRevisions Operation Binding .... .41 Table 82 NotifyOnRevisions PortType Operation .41 Table 83 EquipmentMetadataManager Binding.. .41 Table 84 Translation Table for Input Arguments for the NotifyOnRevisions Operation .. ......42 Table 85 Translation Table for Output Arguments for the GetUnits Operation. .42 Table 86 XML Schema... ..42 Table 87 MetadataClient PortType Definitions... .43 Table 88 EquipmentMetadataManager Binding Definitions ..... .43 Table 89 EquipmentMetadataManager Port Type..... ..43 Table 90 EquipmentMetadataManager Binding.. .43 Table 91 MetadataRevised Operation Binding.... .44 Table 92 MetadataRevised PortType Operation.... .44 Table 93 EquipmentMetadataManager Binding...... .44 Table 94 Translation Table for Input Arguments for the NotifyOnRevisions Operation . .44 Table 95 SEMI E125 RevisionNotice $$ Revision Translation Table . ..45\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 1.1  SOAP Implementation Mapping\n\n1.1.1  The purpose of this specification is to provide an implementation mapping of the SEMI E125 specification to the SOAP 1.1 protocol.  This document provides a description of the XML Schema data types used to support the UML classes defined in SEMI E125, and also describes the WSDL port type and binding definitions used to support the operations defined by the interfaces specified in SEMI E125.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 2.1  Specification Scope\n\n2.1.1  The scope of this specification is the representation of the EqSD model in an XML Schema and corresponding WSDL port types and bindings.  It will not add new domain information or concepts to the SEMI E125 model.  The only additions made are those needed to render useful WSDL or XML Schema.  \n2.1.2  This specification requires SEMI E132 authentication, and defines requirements for the application of SEMI E132 concepts to the SEMI E125 specification.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 3.1  Provisional Specification\n\n3.1.1  This specification is provisional pending the approval of the SEMI E138, SEMI E120.1 and SEMI E132.1. This specification relies on XML Schema types defined by each of these specifications, and cannot be fully implemented without these types.  Finalization of these specifications is a condition for the removal of the provisional status of this document.  \n3.1.2  This specification is provisional pending approval of the SEMI specification for Units for the Semiconductor Industry.  This specification relies on the unit of measure symbols defined in that specification.  Finalization of this specification is a condition for the removal of the provisional status of this document.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 4.1  SEMI Standards (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 4.1  SEMI Standards\n\nContent: SEMI E121 — Guide for Style & Usage of XML for Semiconductor Manufacturing Applications SEMI E120.1 — XML Schema for the Common Equipment Model SEMI E132.1 — Specification for SOAP Binding of Equipment Client Authentication and Authorization SEMI E125 — Specification for Equipment Self Description (EqSD) 4.2 OMG Standards1 Unified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-67, (http://www.omg.org/technology/documents/modeling_spec_catalog.htm) 4.3 W3C Standards2 Extensible Markup Language (XML) 1.0 (Second Edition) W3C, 6 October 2000 (http://www.w3.org/TR/2000/REC-xml-20001006/) Namespaces in XML — W3C, 14 January 1999 (http://www.w3.org/TR/1999/REC-xml-names-19990114/) XML Schema Part 0: Primer — W3C, 2 May 2001 (http://www.w3.org/TR/xmlschema-0/) XML Schema Part 1: Structures — W3C, 2 May 2001 (http://www.w3.org/TR/xmlschema-1/) XML Schema Part 2: Datatypes — W3C, 2 May 2001 (http://www.w3.org/TR/xmlschema-2/) XML Path Language (Xpath) — W3C, 16 November 1999\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 4.1  SEMI Standards (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 4.1  SEMI Standards\n\nContent: (http://www.w3.org/TR/xpath/) Web Services Description Language (WSDL) 1.1 — W3C Note, (http://www.w3.org/TR/wsdl) Simple Object Access Protocol (SOAP) 1.1 — W3C Note, (http://www.w3.org/TR/2000/NOTE-SOAP-20000508/) 4.4 Other Standards Secure Sockets Layer (SSL) Protocol 3.0 (available from http://wp.netscape.com/eng/ssl3/draft302.txt) Web Services Interoperability (WS-I): Basic Profile Version 1.0a (available from http://www.wsi.org/Profiles/Basic/2003-08/BasicProfile-1.0a.html) SEMI Specification for XML Semiconductor Common Components SEMI Specification for the Representation of Measurement Units in XML NOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 5  Terminology\n\n5.1  Abbreviations and Acronyms  \n5.1.1  SOAP — Simple Object Access Protocol  \n5.1.2  UML — Unified Modeling Language  \n5.1.3  W3C — World Wide Web Consortium  \n5.1.4  WSDL — Web Service Description Language  \n5.1.5  XML — eXtensible Markup Language  \n5.2  Definitions  \n5.2.1  UML (Unified Modeling Language) — a notation for representing object-oriented designs and views created by Booch, Rumbaugh, and Jacobson in order to merge their three popular notations plus aspects of other existing notations into a single object-oriented notation intended to be usable by all.  \n5.2.2  XML (eXtensible Markup Language) — a markup language used for representing data rich with context and content in documents and in communications.  XML is an extension of SGML, a document-oriented markup language.  It was created by W3C for use on the Internet.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions\n\nContent: 6.1 Translating UML to XML Schema 6.1.1 The reader is expected to have a working knowledge of the UML, XML, WSDL, SOAP, and Schema specifications (see ¶¶4.2 and 4.3). This document does not provide tutorial information on these subjects. 6.1.2 This document follows the guidelines for XML as outlined in SEMI E121. 6.1.3 Some of the key guidelines followed in this document are summarized here: • Attributes of UML classes from SEMI E125 are generally represented as XML attributes, to improve efficiency in transferring metadata descriptions from the equipment. Exceptions to this convention are UML attributes that correspond to data structures or other constructs that cannot be represented as XML attributes, or may include text values that may need to include non-parsed character data (CDATA). • Composition associations are mapped to a single XML element (or multiple such elements if the specified multiplicity is greater than 1). Aggregations are mapped to contained elements or arrays of references to one\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions\n\nContent: or more unique attributes of the target type. • Inheritance is modeled using complexType extension. In cases where a reference to an abstract base class occurs in the UML model, a choice compositor for each of the possible derived types is used in order to restrict instance documents from including arbitrary extension through type substitution. 6.1.4 The translation of a UML class to XML Schema types is documented using a table format illustrated by Table 1. Operations defined for a UML class are translated into WSDL operations. 6.1.5 Translation Table Column Header Description Attribute or Role Name — If an attribute, the name of the attribute is placed here. If an association (including aggregation or composition), the role name from the UML diagram is placed here. Compositions are often not assigned role names. In that case “none” is placed here. UML Name/Type — If an attribute, the data type of the UML attribute is placed here. If an association, the type of association is placed here. The\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6  Conventions\n\nContent: possible association types are “Composition”, “Aggregation”, or the basic “Association”. UML defines these three types of association. • XML Element or Attribute — Lists the type of XML construct used to represent the UML attribute or association. • XML Name/Type — Provides the name and data type of the resulting XML construct. The type may be a builtin type (for example, xsd:string), or a named type defined within the XML Schema. Table 1 Example Translation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.1.6  Translating Operations to XML Schema\n\n6.1.6.1  The translation of an operation defined for UML interface classes to XML Schema types is documented using a table format illustrated in Table 2.  One row is provided for each possible input/output argument for the operation being described.  \nTable 2  Example Translation Table for Operation Input/Output Arguments\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.2  Documenting XML Schema and WSDL Files\n\n6.2.1  Associated with this document are XML Schema and WSDL files that are core components of the specification.  Each such document is described using a table format illustrated by Table 3.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3 (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3\n\nContent: 6.3.1 This document provides graphical representations of the included XML Schema data type and element definitions. Although no standard graphical notation for XML Schema could be found, various XML tools have their own notation. This document will use the notation provided by XMLSpy from Altova Corporation. Figure 1 shows a sample XML Schema diagram that will be used to provide a basis for explanation of the schema graphical notation used in the rest of the document. 6.3.2 In the diagram, rectangular boxes represent XML element definitions. Ownership or containment is read from left to right in the diagrams. In the sample diagram, ParentType contains Child1, Child2, Child 3, and Child 4. In turn, Child2 contains Child2a, Child2b, and Child2c. The additional symbols (8-sided boxes) represent sequences or choices. See Table 4 for an explanation of these symbols. Table 4 Altova XMLSPY Schema Diagram Symbols 6.3.3 A graphic using a solid line is a required element; using a\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3 (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3\n\nContent: dashed line represents an optional element. Numbers or ranges in the lower right hand corner represent cardinality. The default cardinality is one. 6.3.4 To simplify a diagram or help focus on a particular aspect, detail may be hidden. The 8-sided symbols have a small square on the right end. If a minus sign “-” is in the box, then all detail is shown. If the box contains a plus sign $^ { 6 6 } + \\vec { \\mathbf { \\nabla } }$ , then all detail to the right of that symbol is hidden. The example has no hidden detail. 6.3.5 The yellow (or grey if printed in monochrome) boxes indicate the use of other defined types. So, Child4 is of type “Child4Type”. Child4Type defines Child4a and Child4b. This detail may be hidden in the diagram. Object oriented inheritance is typically represented in XML as type extension. In Figure 1, ParentType extends Child1and 2Type by adding a sequence that includes Child3 and Child4. 6.3.6 Reading Figure 1 would yield the following additional\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3 (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.3  Documenting XML Schema with Diagrams3\n\nContent: information: 1. Child1and2Type is an ordered sequence of two items: Child2 and Child1. 2. Child1 contains an optional ordered sequence of Child1a, one or more Child1b, and (optionally) Child1c. 3. Child2 contains a choice of one or two of the following: Child2a, Child2b, and Child2c. 4. Child3 contains an unordered sequence of Child3a and Child3b.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.4  XML Schema Sample\n\n6.4.1  The sample XML Schema for the example shown in Figure 1, is presented below.  Refer to the XML documentation referenced in $\\ P 1 4 . 3$ for a complete description of the syntax and semantics of XML Schema.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 6.5  Translating UML to WSDL\n\n6.5.1  In general, UML interface classes defined in the abstract specification are translated into WSDL as portType definitions, and each portType definition has a corresponding WSDL binding definition.  The following tables show the convention used for documenting the WSDL port type and binding definitions for a given UML interface class.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 5  Example Interface WSDL Port Type Table\n\nTable 6  Example Interface WSDL Binding Table  \n6.5.2  Each operation defined for a given UML interface class has a corresponding operation definition and binding.\nOperations are described using a table format illustrated by Table 7 and Table 8.  \nTable 7  Example Operation Binding Table  \nTable 8  Example PortType Operation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.1  WSDL Organization\n\n7.1.1  Each interface definition in SEMI E125 is mapped to a WSDL portType and binding definition.  WSDL portType definitions are named after the interface and its operations as they appear in SEMI E125.  WSDL binding definitions for each portType are used to specify the SOAP 1.1 envelope contents for each operation, and to define the corresponding XML encoding styles and HTTP header usage.  All SEMI E125 WSDL interfaces use document/literal encoding, with the complete SOAP header and body contents defined in XML Schema file(s) via global element definitions.  \n7.1.2  Figure 1 shows the relationship between the WSDL binding and portType definitions and the XML Schema types used for each interface.  The portType definition imports XML Schema type definitions used in each operation via the XML Schema “import” statement.  The WSDL binding definition imports the portType definition via the WSDL “import” statement.  Figure 2 shows the specific XML Schema and WSDL files defined for SEMI E125.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager\n\nContent: 7.2.1 Application of SEMI E132 Sessions 7.2.1.1 This section is provisional, pending the approval of SEMI E132.1 and the SEMI E138. 7.2.1.2 Although no special privileges are specified by SEMI E125 in order to access equipment metadata, SEMI E125 information is proprietary to the equipment supplier, and should be protected against unauthorized access within the factory. 7.2.1.3 For this reason, all operations defined by the SEMI E125 EquipmentMetadataManager interface can be exchanged using the HTTPS transport (HTTP 1.1 over SSL 3.0) by enabling SSL authentication as specified in SEMI E132.1. Once enabled via SEMI E132.1, the equipment shall require mutual client-server SSL authentication for all SEMI E125 operations supported by the equipment, and the equipment shall not provide access to any operations except via the HTTPS transport. 7.2.2 There may be some integration, development, and/or test environments in which it is not practical or feasible to install equipment and/or client\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager\n\nContent: certificates in order to communicate with the equipment. As a practical consideration for such environments only, the equipment shall support the ability of the user to disable SSL authentication for the SEMI E125 EquipmentMetadataManager interface, using the equipment configuration specified by SEMI E132.1. Users should be aware that disabling SSL authentication opens up complete unrestricted access to SEMI E125 data for any application with network access to the equipment. 7.2.2.1 Regardless of whether or not SSL authentication is enabled, the equipment shall reject all requests from clients that do not provide a valid SEMI E132 session identifier in the SOAP envelope header provided with the request. The SEMI E132 session identifier shall be provided via the SEMI E132 Header element, as specified by SEMI E132.1. If a client does not provide a recognized session identifier, the equipment shall immediately reject the request using the SEMI Common Error data type, with an error code of\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2  EquipmentMetadataManager\n\nContent: $\\cdot 6 0 0 5 ^ { \\prime }$ and a source of ‘urn:semiorg:E132’ as specified in SEMI E132.1. The equipment shall perform no other processing of a SEMI E125 request if the request is found to include an invalid SEMI E132 session identifier, or if no session identifier is provided.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.3  Use of Common Error Type\n\n7.2.3.1  This section is provisional, pending the approval of SEMI E138.  \n7.2.3.2  This specification does not define any SEMI E125-specific error codes, but reserves the common error type “source” name of “urn:semi-org:E125” for future use.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.4  XML Schema and WSDL Files\n\n7.2.4.1  This section is provisional, pending the approval of SEMI E132.1 and SEMI E120.1.  \n7.2.4.2  The XML Schema and WSDL defined by this specification for the EquipmentMetadataManager interface is contained in the following documents:  \nTable 9  XML Schema  \nTable 10  EquipmentMetadataManager PortType Definitions  \nTable 11  EquipmentMetadataManager Binding Definitions  \n7.2.4.3  These documents are a part of this specification and should accompany this document.  The contents of these documents constitute the core part of this specification.  \n7.2.4.4  E125-1-V0305-Schema.xsd imports types from the SEMI E120.1 Common Equipment Model XML Schema namespace\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.5  WSDL Port Type Overview\n\n7.2.5.1  The EquipmentMetadataManager WSDL portType definition organizes the SEMI E125.1 XML Schema data types into a collection of named operations with inputs and outputs that correspond to the UML operations that are defined for the EquipmentMetadataManager interface in SEMI E125.  The WSDL portType itself is named after the SEMI E125 interface, and each WSDL portType operation is named after the corresponding UML operation defined for the interface.  Each WSDL operation consists of two WSDL message definitions corresponding to the input and output (request and response) for the UML operation defined in SEMI E125.  Figure 3 illustrates the relationship between the SEMI E125 UML interface and the WSDL portType definition; Table 12 describes this in tabular form.  The WSDL message and operation definitions are described in ¶¶7.2.8 through 7.2.16 .  \nTable 12  EquipmentMetadataManager Port Type\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.6  WSDL Binding Overview\n\n7.2.6.1  The WSDL EquipmentMetadataManager binding definition specifies a message and transport protocol to use for a given portType (SOAP and HTTP for SEMI E125.1), the interface style used (document style for SEMI E125.1).  These setting are shown in Table 13.  For each WSDL portType operation, the binding defines any SOAP headers used and whether or not they are required, the HTTP SOAPAction header value to use for that operation, and the XML encoding to use (literal).  The binding definitions for each portType operation are described in $\\ P \\ P . 2 . 8$ through 7.2.16.  \nTable 13  EquipmentMetadataManager Binding\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.7  WSDL Service Overview\n\n7.2.7.1  This specification does not provide a WSDL service definition.  WSDL service definitions provide one way to define and locate the endpoint(s) at which a given interface can be accessed by a client.  Such information cannot be determined until the equipment has been installed on a factory network, and therefore is out of scope for this specification.  Users are responsible for defining the mechanisms by which clients locate SEMI E125 equipment services in the factory.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.8  GetUnits\n\n7.2.8.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.8.2  WSDL Operation Binding\n\n7.2.8.2.1  See the operation binding for “GetUnits” in E125-1-V0305-EqpMetadataMgr-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.8.3  WSDL PortType Operation\n\n7.2.8.3.1  See the portType operation definition for “GetUnits” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.\nKey information is shown for convenience in the following table.  \nTable 15  GetUnits PortType Operation\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.8.4  WSDL Message(s)\n\n7.2.8.4.1  See the message definitions for “E132HeaderMessage”, “GetUnitsRequestMessage”, and “GetUnitsResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 16  EquipmentMetadataManager Binding\n\n7.2.8.5  XML Schema Types  \n7.2.8.5.1  GetUnitsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetUnits request.  As defined in SEMI E125, this operation has no input arguments, so the element has no contents.  \n7.2.8.5.2  GetUnitsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E125 GetUnits request.  It contains either zero or more elements named “Unit” of complexType “UnitType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138.  \nTable 17  Translation Table for Output Arguments for the GetUnits Operation  \n7.2.8.5.3  UnitType — This global complexType is the XML Schema representation of the SEMI E125 Unit class.\nThe following table describes the mapping of the UML class to this XML Schema complexType.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9  GetTypeDefinitions\n\n7.2.9.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.2  WSDL Operation Binding\n\n7.2.9.2.1  See the operation binding for “GetTypeDefinitions” in E125-1-V0305-EqpMetadataMgr-Binding.wsdl.\nKey information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.3  WSDL PortType Operation\n\n7.2.9.3.1  See the portType operation definition for “GetTypeDefinitions” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.4  WSDL Message(s)\n\n7.2.9.4.1  See the message definitions for “E132HeaderMessage”, “GetTypeDefinitionsRequestMessage”, and “GetTypeDefinitionsResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5  XML Schema Types (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5  XML Schema Types\n\nContent: 7.2.9.5.1 GetTypeDefinitionsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetTypeDefinitions request. As defined in SEMI E125, this operation has no input arguments, so the element has no contents. 7.2.9.5.2 GetTypeDefinitionsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E125 GetTypeDefinitions request. It contains either zero or more elements named “TypeDefinition” of complexType “ParameterTypeDefinitionType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138. Table 22 Translation Table for Output Arguments for the GetTypeDefinitions Operation 7.2.9.5.3 ParameterTypeDefinitionType — This global complexType is the XML Schema representation of the E125 ParameterTypeDefinition class. The following table describes the mapping of the UML class to this XML Schema complexType. The association between the ParameterTypeDefinition class and the\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5  XML Schema Types (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5  XML Schema Types\n\nContent: abstract base class “ParameterType” is mapped using a reference to an XML Schema model group named “TypeDescriptionSelectionGroup”. This model group consists of a choice compositor (see ¶6.1.3) containing elements representing instances of each of the possible derived type description classes.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.4  Extended Parameter Type Description\n\n7.2.9.5.4.1  This specification adds new type description complexTypes to the minimal set defined in SEMI E125. These additional types correspond to built-in primitive and derived types defined by the XML Schema specifications, and a variable type for Parameters whose values have variable data types at runtime.  If a Parameter’s type is described using the SEMI E125.1 complexTypes, the Parameter’s value in XML instance documents must be reported using the corresponding XML Schema types.  The following table shows how each SEMI E125 type  \ndescription class has been mapped to the XML Schema complexTypes in this specification, and lists the additional type description classes not defined in SEMI E125.  The table also shows the corresponding schema types that shall be used for reporting values in XML of Parameters that have been described using the SEMI E125.1 complexTypes.  \nTable 24  SEMI E125 Type Description Mapping Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: 7.2.9.5.5.1 Many equipment suppliers may provide data items via the traditional SECS/GEM control interface that can be described via SEMI E125. For consistency between those data types and their metadata descriptions, refer to $\\ P 1 0 . 5 . 4$ of SEMI E125. For specific types supported in SECS-II, see the following table. Table 25 SECS-II Type Description Mapping Table NOTE 2: For 8-byte unsigned integers, it is recommended either that such values are described as LongType if the actual value range in use can be stored via an unsigned 8-byte integer, or sent as a (big-endian) byte array. In general, use of unsigned integer types is discouraged. 7.2.9.5.6 StringTypeType — This global complexType is the XML Schema representation of the SEMI E125 StringType class. The following table describes the mapping of the UML class to this XML Schema complexType. The “language” attribute is of type “LanguageCodeType”, which is a regular expression that enforces the IETF RFC 1766 language code\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: format specified in SEMI E125. Table 26 E125 StringType $$ StringTypeType Translation Table 7.2.9.5.7 BooleanTypeType — This global complexType is the XML Schema representation of the SEMI E125 BooleanType class. No attributes are defined for this class in SEMI E125, thus the BooleanTypeType definition includes no elements or attributes. 7.2.9.5.8 Base64BinaryTypeType — This global complexType is the XML Schema representation of the SEM E125 BinaryType class. This specification adds an optional attribute to describe the format of the binary variable using industry standard MIME media type names. Table 27 SEMI E125 BinaryType $$ Base64BinaryTypeType Translation Table 7.2.9.5.9 ByteTypeType – This global complexType is the XML Schema representation of the SEMI E125 IntegerType class. The following table describes the mapping of the UML class to this XML Schema complexType. The association from IntegerType to the Unit class in SEMI E125 has been modeled using a reference attribute that\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: refers to the specific unit using its unique identifier. The association to the UnitConfig class has been modeled using a container element for a collection of unit id’s, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 28 SEMI E125 IntegerType $$ ByteTypeType Translation Table 7.2.9.5.10 UnitConfigArrayType — This global complexType is the XML Schema representation of the SEMI E125 UnitConfig class. It provides a reference to the configuration Parameter that controls the reported units for Parameters of this type, and a list of the units that can be selected by different settings for that configuration Parameter. Table 29 SEMI E125 UnitConfig $$ UnitConfigArrayType Translation Table 7.2.9.5.10.1 configParamSource — This attribute shall be set to a valid CEM Locator identifying the equipment node that provides the unit configuration Parameter. 7.2.9.5.10.2 configParamName — This attribute shall be set to the value\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 4)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: of the “name” attribute of the Parameter that establishes the units to be used. 7.2.9.5.10.3 setting — The value of this attribute shall be equal to one of the valid enumeration values defined for the Parameter identified by the configParamSource/Name attributes. 7.2.9.5.11 ShortTypeType — This global complexType is the XML Schema representation of the SEMI E125 IntegerType class. The following table describes the mapping of the UML class to this XML Schema complexType. The association from IntegerType to the Unit class in SEMI E125 has been modeled using a reference attribute that refers to the specific unit using its unique identifier. The association to the UnitConfig class has been modeled using a container element for a collection of unit id’s, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 30 SEMI E125 IntegerType $$ ShortTypeType Translation Table 7.2.9.5.12 IntTypeType — This global complexType is the XML\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 5)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: Schema representation of the SEMI E125 IntegerType class. The following table describes the mapping of the UML class to this XML Schema complexType. The association from IntegerType to the Unit class in SEMI E125 has been modeled using a reference attribute that refers to the specific unit using its unique identifier. The association to the UnitConfig class has been modeled using a container element for a collection of unit ids, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 31 SEMI E125 IntegerType $$ IntTypeType Translation Table 7.2.9.5.13 LongTypeType — This global complexType is the XML Schema representation of the SEMI E125 IntegerType class. The following table describes the mapping of the UML class to this XML Schema complexType. The association from IntegerType to the Unit class in SEMI E125 has been modeled using a reference attribute that refers to the specific unit using its unique identifier. The\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 6)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: association to the UnitConfig class has been modeled using a container element for a collection of unit ids, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 32 E125 IntegerType $$ LongTypeType Translation Table 7.2.9.5.14 FloatTypeType — This global complexType is an XML Schema representation of the SEMI E125 RealType class (see also DoubleTypeType). The following table describes the mapping of the UML class to this XML Schema complexType. The association from RealType to the Unit class in SEMI E125 has been modeled using a reference attribute that refers to the specific unit using its unique identifier. The association to the UnitConfig class has been modeled using a container element for a collection of unit ids, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 33 SEMI E125 RealType $$ FloatTypeType Translation Table 7.2.9.5.15 DoubleTypeType —\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 7)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: This global complexType is an XML Schema representation of the SEMI E125 RealType class. The following table describes the mapping of the UML class to this XML Schema complexType. The association from RealType to the Unit class in SEMI E125 has been modeled using a reference attribute that refers to the specific unit using its unique identifier. The association to the UnitConfig class has been modeled using a container element for a collection of unit ids, a reference to the Parameter that controls their settings, and the enumeration settings that select those units. Table 34 E125 RealType $$ DoubleTypeType Translation Table 7.2.9.5.16 VariableTypeType — This global complexType is an extension to the SEMI E125 type description classes. VariableTypeType describes Parameters whose values may be of varying type at runtime. For example, a Parameter’s value may communicate an array of different control variable settings, each setting with a potentially different data type. The VariableType\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 8)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: complexType can be used to describe such Parameters. 7.2.9.5.16.1 The VariableTypeType provides a collection of elements named “TypeHint”, of type xsd:string. Each TypeHint shall be equal to the name of a ParameterTypeDefinition provided elsewhere in the equipment metadata. The collection of TypeHints together describes the set of possible types that a Parameter value may assume at runtime. 7.2.9.5.17 DateTimeTypeType — This global complexType is an extension to the SEMI E125 type description classes. DateTimeTypeType describes Parameters whose values are communicated using the XML Schema primitive type “xsd:dateTime”. 7.2.9.5.18 ArrayTypeType — This global complexType is the XML Schema representation of the SEMI E125 ArrayType class. The type of each element in the array is defined using one of the complexTypes provided for the various primitive and composite types. The ArrayTypeType can describe arrays of arrays in a recursive fashion. 7.2.9.5.18.1 Values of Parameters that are\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping (Part 9)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.9.5.5  SECS-II Type Mapping\n\nContent: described as arrays shall be communicated using a single container element representing the array as a whole, with each element of the array communicated using a nested element whose data type matches the type defined for the array.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 35  SEMI E125 ArrayType $$ ArrayTypeType Translation Table\n\n7.2.9.5.19  StructureTypeType — This global complexType is the XML Schema representation of the SEMI E125 StructureType class.  The type of each field in the structure is defined using the FieldType complexType, which incorporates the complexTypes provided for the various primitive and composite types.  The StructureTypeType can describe nested structures.  \n7.2.9.5.19.1  Values of Parameters that are described as structures shall be communicated using a single container element representing the structure as a whole, with each field of the structure communicated using a nested element whose data type matches the type defined for the described field.  \nTable 36  SEMI E125 StructureType $$ StructureTypeType Translation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 37  SEMI E125 Field $$ FieldType Translation Table\n\n7.2.9.5.20  EnumerationTypeType — This global complexType is the XML Schema representation of the SEMI E125 EnumerationType class.  \n7.2.9.5.20.1  Values of Parameters that are described as enumerations shall be communicated using a single container element whose data type is either xsd:string or xsd:int, according to whether the Parameter is string- or integer-based.  Values of string-based enumerations are communicated using the English language character set.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10  GetStateMachines\n\n7.2.10.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.2  WSDL Operation Binding\n\n7.2.10.2.1  See the operation binding for “GetStateMachines” in E125-1-V0305-EqpMetadataMgr-Binding.wsdl.\nKey information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.3  WSDL PortType Operation\n\n7.2.10.3.1  See the portType operation definition for “GetStateMachines” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.4  WSDL Message(s)\n\n7.2.10.4.1  See the message definitions for “E132HeaderMessage”, “GetStateMachinesRequestMessage”, and “GetStateMachinesResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.5  XML Schema Types (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.5  XML Schema Types\n\nContent: GetStateMachinesRequest Global Element 7.2.10.5.1 GetStateMachinesRequest — This global element acts as a top-level container entity representing the SOAP body of a GetStateMachines request. As defined in SEMI E125, this operation has no input arguments, so the element has no contents. 7.2.10.5.2 GetStateMachinesResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E125 GetStateMachines request. It contains either zero or more elements named “StateMachine” of complexType “StateMachineType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138. Table 44 Translation Table for Output Arguments for the GetStateMachines Operation 7.2.10.5.3 StateMachineType — This global complexType is the XML Schema representation of the SEMI E125 StateMachine class. Table 45 SEMI E125 StateMachine $$ StateMachineType Translation Table 7.2.10.5.4 StateType — This global complexType is the XML Schema representation of the\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.5  XML Schema Types (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.10.5  XML Schema Types\n\nContent: SEMI E125 State class. The XOR relationship between the “substates” and “stateMachines” associations is modeled using a choice compositor. Table 46 SEMI E125 State $$ StateType Translation Table 7.2.10.5.5 TransitionType — This global complexType is the XML Schema representation of the SEMI E125 Transition class. Table 47 SEMI E125 Transition $$ TransitionType Translation Table 7.2.10.5.6 EventType — This global complexType is the XML Schema representation of the SEMI E125 Event class. References to transitions are modeled using a collection of elements named “TransitionRef”, each of which has a single attribute named “transitioned”. The value of each “transitioned” attribute must be equal to the “id” attribute of a transition defined within the current StateMachine description. Table 48 SEMI E125 Event $$ EventType Translation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.11  GetSEMIObjTypes\n\n7.2.11.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.11.2  WSDL Operation Binding\n\n7.2.11.2.1  See the operation binding for “GetSEMIObjTypes” in E125-1-V0305-EqpMetadataMgr-Binding.wsdl.\nKey information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.11.3  WSDL PortType Operation\n\n7.2.11.3.1  See the portType operation definition for “GetSEMIObjTypes” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.11.4  WSDL Message(s)\n\n7.2.11.4.1  See the message definitions for “E132HeaderMessage”, “GetSEMIObjTypesRequestMessage”, and “GetSEMIObjTypesResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Figure 18 GetSEMIObjTypesRequest Global Element\n\n7.2.11.5.1  GetSEMIObjTypesRequest — This global element acts as a top-level container entity representing the SOAP body of a GetSEMIObjTypes request.  As defined in SEMI E125, this operation has no input arguments, so the element has no contents.  \n7.2.11.5.2  GetSEMIObjTypesResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E125 GetSEMIObjTypes request.  It contains either zero or more elements named “ObjType” of complexType “SEMIObjTypeType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138.  \nTable 52  Translation Table for Output Arguments for the GetSEMIObjTypes Operation  \n7.2.11.5.3  SEMIObjTypeType — This global complexType is the XML Schema representation of the SEMI E125 SEMIObjType class.  Attributes and eventData are provided using the ParameterType, defined in $\\ P 7 . 2 . 1 4 . 5 . 4$ .\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table\n\nContent: 7.2.11.5.4 StateMachineInstanceType — This global complexType is the XML Schema representation of the SEMI E125 StateMachineInstance class. Table 54 SEMI E125 StateMachineInstance $$ StateMachineInstanceType Translation Table 7.2.11.5.5 ParameterReferenceType — This global complexType is the XML Schema representation of a reference to a Parameter defined in the equipment metadata. Referenceable Parameters are defined either by SEMIObjTypes as “Attributes” or “EventData”, or by equipment nodes in the set of Parameters provided with “EquipmentNodeDescription” metadata. Equipment nodes and SEMIObjTypes are said to be valid Parameter “sources”. Parameters defined for Exceptions are not referenceable. This type defines two attributes, “source” and “name” that are used to uniquely identify Parameters in equipment metadata. 7.2.11.5.5.1 Parameter references may be “absolute” or “relative”. An absolute Parameter reference is used when referring to a\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table\n\nContent: Parameter that is defined by a different source than the one making the reference. A relative reference is used when referring to a Parameter that is defined by the same source as the one making the reference. It is expected that the most common Parameter references in equipment metadata will be relative references. 7.2.11.5.5.1.1 For an example of an “absolute” reference, consider two equipment nodes: a “TemperatureController” equipment node that provides a “TemperatureSetpoint” Parameter; and a “TemperatureSensor” equipment node that provides a “MeasuredTemperature” Parameter. The “TemperatureSetpoint” Parameter is a control Parameter whose setting affects the “MeasuredTemperature” Parameter, so it may need to refer to that Parameter from the context of the “TemperatureController” node. In this case, an “absolute” reference is required, since the “referred-to” Parameter is defined by a different node than the node making the reference.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table\n\nContent: 7.2.11.5.5.1.2 For an example of a “relative” reference, consider a SEMIObjType that has a SEMI E39 attribute defined for it that stores the current state of the object. In the StateMachineInstance for that same SEMIObjType, the “CurrentStateName” element is used to refer to a Parameter that can be used to determine the current state of that StateMachine. In this case, the Parameter belongs to the same “source” (the same SEMIObjType) that implements the StateMachine, so a relative reference can be used. 7.2.11.5.5.2 source — This attribute is optional and shall be either not present (relative reference) or present and set to a valid CEM Locator (absolute reference) identifying the equipment node that provides the referenced Parameter. If not present, the source is inferred by the context that the reference is made (either a SEMIObjType or an equipment node). 7.2.11.5.5.3 name — For relative references to Parameters provided directly from an\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table (Part 4)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table\n\nContent: equipment node or SEMIObjType, this attribute shall be set to the value of the “name” attribute of the Parameter that is referred to. For absolute references to Parameters provided directly from an equipment node, this attribute shall be set to the value of the “name” attribute of the corresponding Parameter. For absolute references to SEMIObjType attributes or event data Parameters provided from a specific equipment node, this shall be a string of the form “urn:semiorg:objType:<typeName>:objAttr:<parameter name>”, where “<typeName>” is the ObjType name, and “<parameter name>” is the name of the Parameter representing the attribute or event data. 7.2.11.5.5.4 Some examples of valid Parameter references are shown in the following table. Table 55 Example Parameter References 7.2.11.5.6 EventToParameterMapType — This global complexType is the XML Schema representation of the SEMI E125 EventToParameterMap class. Table 56 SEMI E125 EventToParameterMap\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table (Part 5)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 53  SEMI E125 SEMIObjType $$ SEMIObjTypeType Translation Table\n\nContent: $$ EventToParameterMapType Translation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.12  GetExceptions\n\n7.2.12.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.12.2  WSDL Operation Binding\n\n7.2.12.2.1  See the operation binding for “GetExceptions” in E125-1-V0305-EqpMetadataMgr-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.12.3  WSDL PortType Operation\n\n7.2.12.3.1  See the portType operation definition for “GetExceptions” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.12.4  WSDL Message(s)\n\n7.2.12.4.1  See the message definitions for “E132HeaderMessage”, “GetSEMIObjTypesRequestMessage”, and “GetSEMIObjTypesResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.12.5  XML Schema Types\n\n7.2.12.5.1  GetExceptionsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetExceptions request.  As defined in SEMI E125, this operation has no input arguments, so the element has no contents.  \n7.2.12.5.2  GetExceptionsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E125 GetExceptions request.  It contains either zero or more elements named “Exception” of complexType “ExceptionType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138.  \nTable 60  Translation Table for Output Arguments for the GetExceptions Operation  \n7.2.12.5.3  ExceptionType — This global complexType is the XML Schema representation of the SEMI E125 Exception class.   The “setData” and “clearData” associations to Parameters in SEMI E125 are modeled using zero or more elements of type “ParameterType” (see $\\ P 7 . 2 . 1 4 . 5 . 4 )$ .  \nTable 61  SEMI E125 Exception $$ ExceptionType Translation Table\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.13  GetEquipmentStructure\n\n7.2.13.1  This section is provisional, pending approval of SEMI E132.1, SEMI E138, and SEMI E120.1.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.13.2  WSDL Operation Binding\n\n7.2.13.2.1  See the operation binding for “GetEquipmentStructure” in E125-1-V0305-EqpMetadataMgrBinding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.13.3  WSDL PortType Operation\n\n7.2.13.3.1  See the portType operation definition for “GetEquipmentStructure” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.13.4  WSDL Message(s)\n\n7.2.13.4.1  See the message definitions for “E132HeaderMessage”, “GetEquipmentStructureRequestMessage”, and “GetEquipmentStructureResponseMessage” in E125-1-V0305-EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # GetEquipmentStructureRequest Global Element\n\n7.2.13.5.1  GetEquipmentStructureRequest — This global element acts as a top-level container entity representing the SOAP body of a GetEquipmentStructure request.  As defined in SEMI E125, this operation has no input arguments, so the element has no contents.  \n7.2.13.5.2  GetEquipmentStructureResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an E125 GetEquipmentStructure request.  It contains either an element named “Equipment” of complexType “EquipmentType” as defined in SEMI E120.1, or an element named “Error” of complexType “ErrorType”, defined in SEMI E138.  \nTable 65  Translation Table for Output Arguments for the GetEquipmentStructure Operation  \n7.2.13.5.3  Equipment — This global element is defined in SEMI E120.1.  Please refer to that specification for a description of the contents of this element.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.14  GetEquipmentNodeDescriptions\n\n7.2.14.1  This section is provisional, pending approval of SEMI E132.1 and SEMI E138.  \n7.2.14.2  WSDL Operation Binding  \n7.2.14.2.1  See the operation binding for “GetEquipmentNodeDescriptions” in E125-1-V0305-EqpMetadataMgrBinding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.14.3  WSDL PortType Operation\n\n7.2.14.3.1  See the portType operation definition for “GetEquipmentNodeDescriptions” in E125-1-V0305- EqpMetadataMgr-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # 7.2.14.4  WSDL Message(s)\n\n7.2.14.4.1  See the message definitions for “E132HeaderMessage”, “GetEquipmentNodeDescriptionsRequest Message”, and “GetEquipmentNodeDescriptionsResponseMessage” in E125-1-V0305-EqpMetadataMgrPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding\n\nContent: 7.2.14.5.1 GetEquipmentNodeDescriptionsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetEquipmentNodeDescriptions request. As defined in SEMI E125, this operation has one input argument: a list of SEMI E120 Locator values. The list is modeled using zero or more elements named “EquipmentNodeId” of type “cem:LocatorType”, defined in SEMI E120.1. Table 69 Translation Table for Input Arguments for the GetEquipmentNodeDescriptions Operation 7.2.14.5.2 GetEquipmentNodeDescriptionsResponse — This global element acts as a top-level container element representing the SOAP body of the response to an SEMI E125 GetEquipmentNodeDescriptions request. It contains either an element named “NodeDescriptionResults” of complexType “NodeDescriptionResultType” or an element named “Error” of complexType “ErrorType”, defined in SEMI E138. 7.2.14.5.2.1 As defined in SEMI E125, this operation returns an unordered list of instances of the SEMI E125\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding (Part 2)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding\n\nContent: EquipmentNodeDescription class. The list is modeled as zero or more elements named “NodeDescription” of type “EquipmentNodeDescriptionType”. 7.2.14.5.2.2 As defined in SEMI E125, the output for this operation can include an unordered list of strings to identify requests that include one or more invalid CEM Locators as input. If invalid Locator values are provided in the request, the equipment shall return one or more “InvalidEquipmentNodeId” elements, consisting of the list of all invalid CEM Locator’s provided in the original request. Table 70 Translation Table for Output Arguments for the GetEquipmentNodeDescriptions Operation 7.2.14.5.3 EquipmentNodeDescriptionType — This global complexType is the XML Schema representation of the SEMI E125 EquipmentNodeDescription class. The CEM equipment node being described is identified by a CEM Locator, via an element named “EquipmentNodeId” of type cem:LocatorType, defined in SEMI E120.1. 7.2.14.5.3.1 StateMachines supported by the\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding (Part 3)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 68  EquipmentMetadataManager Binding\n\nContent: equipment node are described using a collection of one or more “StateMachineInstance” elements of type “StateMachineInstanceType” (see $\\ P 7 . 2 . 1 1 . 5 . 4 )$ . 7.2.14.5.3.2 ObjTypes provided by the equipment node are referenced using a collection of one or more “SEMIObjTypeRef” elements of type “SEMIObjTypeReferenceType”; these must refer to one or more valid SEMIObjTypes returned via the “GetSEMIObjTypes” operation. 7.2.14.5.3.3 Exceptions provided by the equipment node are referenced using a collection of one or more “ExceptionRef” elements of type “ExceptionReferenceType”; these must refer to one or more valid Exception id’s returned via the “GetExceptions” operation. 7.2.14.5.3.4 Parameters provided by the equipment node are described using a collection of one or more “Parameter” elements of type “ParameterType” (see ¶7.2.14.5.4).\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 71  SEMI E125 EquipmentNodeDescription $$ EquipmentNodeDescriptionType Translation Table\n\n7.2.14.5.4  ParameterType — This global complexType is the XML Schema representation of the SEMI E125 Parameter class.  \n7.2.14.5.4.1  Type information for a Parameter is referenced using a “TypeDefinitionRef” element whose value must be equal to a valid ParameterTypeDefinition returned via the “GetTypeDefinitions” operation.  \n7.2.14.5.4.2  Parameter classification is modeled using a choice compositor to select one and only one of the three possible subclasses of the SEMI E125 ReadOnly and ReadWrite classes (Control, Configuration, or Data).\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 72  SEMI E125 Parameter $$ ParameterType Translation Table\n\n7.2.14.5.5  ConstraintType — This global complexType is the XML Schema representation of the SEMI E125 Constraint class.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 73  SEMI E125 Constraint $$ ConstraintType Translation Table\n\n7.2.14.5.6  ParameterAssociationType – this global complexType is the XML Schema representation of the E125 AssociatedParameter class.  \nTable 74  SEMI E125 AssociatedParameter $$ ParameterAssociationType Translation Table  \n7.2.14.5.7  ParameterClassificationType — This global complexType is the XML Schema representation of the SEMI E125 ParameterClassification class.  \nTable 75  SEMI E125 ParameterClassification $$ ParameterClassificationType Translation Table  \n7.2.14.5.8  ReadWriteType — This global complexType is the XML Schema representation of the SEMI E125 ReadWrite class.  It is an extension of the ParameterClassification complexType.\n\nSEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 76  SEMI E125 ReadWrite $$ ReadWriteType Translation Table (Part 1)\n\nTitle: SEMI E125.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING FOR EQUIPMENT SELF DESCRIPTION (EqSD) - # Table 76  SEMI E125 ReadWrite $$ ReadWriteType Translation Table\n\nContent: 7.2.14.5.9 ReadOnlyType — This global complexType is the XML Schema representation of the SEMI E125 ReadOnly class. It is an extension of the ParameterClassification complexType, and defines no additional attributes or elements. 7.2.14.5.10 ControlType — This global complexType is the XML Schema representation of the SEMI E125 Control class. It is an extension of the ReadWrite complexType, and defines no additional attributes or elements. 7.2.14.5.11 ConfigurationType — This global complexType is the XML Schema representation of the SEMI E125 Configuration class. It is an extension of the ReadWrite complexType, and defines no additional attributes or elements. 7.2.14.5.12 DataType — This global complexType is the XML Schema representation of the SEMI E125 Data class. It is an extension of the ReadOnly complexType, and defines no additional attributes or elements. 7.2.15 GetLatestRevision 7.2.15.1 This section is provisional, pending approval of SEMI",
  "images": []
}