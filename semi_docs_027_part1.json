{
  "doc_id": "semi_docs_027",
  "chunk_id": 1,
  "content": "SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 11)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: 3 }$ indicates that the following parameter “gas standard symbol” is used instead to reference the gas type. A value of $^ { 6 6 } - 1 ^ { 5 }$ indicates that the current programmed gas calibration is requested. 8.4.2.8.2 Gas Standard Symbol — This parameter is used to specify a gas standard symbol for which a gas calibration data value is being requested. If the gas standard number parameter has a value that is not $^ { \\mathfrak { s } _ { 6 } } 0$ ,” then this parameter is set to the null character. 8.4.2.8.3 Full Scale Range — This parameter is used to specify the full scale range for which a gas calibration data value is being requested. If the gas standard number parameter has a value that is “-1,” then this parameter is set to zero. 8.4.2.8.4 Units — This parameter specifies the units associated with the full scale range parameter. Its values are defined in Section 8.4.2.4. If the gas standard number parameter has a value that is “-1,” then this\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 12)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: parameter is set to 0. 8.4.2.8.5 Data Index — This parameter is used to specify the index of the value being requested. It is an enumerated byte that can take on the values listed in the following table: Table 16 Gas Calibration Data Value Matrix Table 17 Gas Calibration Data Initial and Default Values 8.4.2.8.5.1 All — This value for the data index parameter requests the list of all data values associated with a gas calibration. The returned parameter values are ordered by index as defined in Table 15. The size of the list returned is manufacturer-specified, since it includes the Manufacturer-Specific values. 8.4.2.8.5.2 Size of List — This parameter is used to specify the number of parameters returned in the response list. 8.4.2.8.5.3 Zero — This value is used in conjunction with the span value to correct the flow measurement. It is expressed in terms of the units parameter. 8.4.2.8.5.4 Span — This value is used in conjunction with the zero value to correct\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 13)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: the flow measurement. It is a dimensionless value. 8.4.2.8.5.5 Calibration Date — This value identifies the date the device was last calibrated for the specified gas type and full scale range. 8.4.2.8.5.6 Calibration Gas Standard Number — This value identifies the gas type used when the device was calibrated for the referenced gas type and full scale range. It may be the same gas as gas type, a surrogate gas, nitrogen, or some other gas. 8.4.2.8.5.7 Calibration Temperature — This value identifies the Standard Temperature with respect to calibration conditions. The units for this value are degrees Centigrade. 8.4.2.8.5.8 Calibration Pressure — This value identifies the Standard Pressure with respect to calibration conditions. The units for this value are KiloPascal. 8.4.2.9 Set Gas Calibration Data Value Service (Optional) — This service is used to set the values associated with a gas calibration. The mechanism for referencing a data value involves specifying\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 14)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: the gas type and full scale range (a default is provided to specify the programmed gas calibration currently in use by the device), followed by an index value which is used to specify the particular data value associated with the referenced gas calibration that is being set. The specific value to be set is the last parameter passed in the service request. The following table describes the parameters specified for this service: Table 18 Set Calibration Data Value Service Parameter Definitions For a description of these parameters, see the preceding section. 8.4.2.10 Autorange Service (Optional) — This service is used to instruct the Sensor-AI-MF object instance to enter the AUTORANGING state from the NOT AUTORANGING state or to enter the NOT AUTORANGING state from the AUTORANGING state. The following table describes the parameters specified for this service: Table 19 Autorange Service Parameter Definitions 8.4.3 Sensor-AI-MF Object Behavior — The behavior\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 15)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: exhibited by the Sensor-AI-MF object instance is inherited from the Sensor-AI object defined in SEMI E54.1. Additional specific behavior associated with the Sensor-AI-MF object is defined below. 8.4.3.1 Sensor-AI-MF OPERATING Application Process — A reading is retrieved from a physical flow sensor. This reading may be corrected with a manufacturer-specified algorithm. This corrected reading becomes the input to the offset and gain formula to generate the value attribute as referenced in SEMI E54.1. 8.4.3.1.1 For Gas Correction, the value retrieved is corrected with a manufacturer-specified algorithm using the correction values, parameters, coefficients, or methods for the programmed gas calibration. 8.4.3.2 Sensor-AI-MF OPERATING Application Process–Flow Totalizer — The value of the flow totalizer attribute is incremented at a rate of once every cubic centimeter of gas flow. Whenever the flow totalizer attribute reaches its maximum allowed value, it no longer\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 16)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: is incremented and remains at the maximum value. 8.4.3.3 Sensor-AI-MF OPERATING Application Process–Flow Hours — The value of the flow hours attribute is incremented at a rate of once every hour. Whenever the flow hours attribute reaches its maximum allowed value, it no longer is incremented and remains at the maximum value. 8.4.3.4 Sensor-AI-MF ZEROING Application Process — The Zeroing application process is described as follows: Certain manufacturer-specified service requests may be sent to other objects. The value of offset is set such that value is nulled to zero. The Sensor-AI-MF object instance determines, using a manufacturer-specified method, when a Zeroing application process is completed. 8.4.3.4.1 If a Perform Zero Offset: Command $= 2$ (cancel) service request is received while in the ZEROING state, the original value of the offset attribute is restored, and the process is considered Failed. If a Perform Zero Offset: Command $\\mathbf { \\varepsilon\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 17)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: } = 0$ (set offset attribute to zero) service request is received while in the ZEROING state, the offset attribute is set to zero, and the process is considered Failed. If a Perform Zero Offset: Command $\\mathbf { \\Psi } = 1$ (calculate offset) service request is received while in the ZEROING state, the process is simply restarted. 8.4.3.4.2 Upon completion, the appropriate Pass or Fail service response is reported to the requesting object instance, and an internal Operate service request to this object is generated. 8.4.3.4.3 The Sensor-AI-MF object instance supports the additional behavior sub-states (defined in Figure 3) within the OPERATING state. Table 20 defines the additional sub-states, and Table 21 defines the additional state transitions specified for this object. Table 20 Sensor-AI-MF Object Behavior State Descriptions Table 21 Sensor AI-MF Object Behavior State Transition Matrix 8.4.3.5 Sensor-AI-MF AUTORANGING Application Process — The\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 18)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: Sensor-AI-MF object instance supports the additional behavior sub-states (defined in Figure 4) within the OPERATING state. Table 22 defines the additional sub-states, and Table 23 defines the additional state transitions specified for this object. 8.4.3.5.1 The object instance is automatically selecting gas calibrations based on a manufacturer's specified method. This method may include a determination based on the value of the value attribute and/or on the value of the setpoint value attribute. Table 22 Sensor-AI-MF Object Behavior State Descriptions Table 23 Sensor-AI-MF Object Behavior State Transition Matrix 8.5 Sensor-AI-AT Object — The Sensor-AI-AT object is an Ambient Temperature object instance which inherits attributes, services, and behavior from the Sensor-AI object as defined in SEMI E54.1. The Sensor-AI-AT object instance is the device component responsible for retrieving a reading from a physical temperature sensor and making the value available\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 19)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: to the network. 8.5.1 Sensor-AI-AT Object Attributes — The inherited value attribute represents the ambient temperatur measurement. There are no additional attributes defined for this object in this document. 8.5.2 Sensor-AI-AT Object Services — There are no additional services defined for this object in this document. 8.5.3 Sensor-AI-AT Object Behavior — The behavior exhibited by the Sensor-AI-AT object instance is defined i SEM E54.1. Additional specific behavior associated with the Sensor-AI-AT object is defined below. 8.5.3.1 Sensor-AI-AT OPERATING Application Process — A reading is retrieved from a physical temperature sensor. This reading may be corrected with a manufacturer-specified algorithm. This corrected reading becomes the input to the offset and gain formula to generate the value attribute as referenced in SEMI E54.1. 8.6 Assembly-MFM Object — The Assembly-MFM object inherits attributes, services, and behavior from the Assembly object. The\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values (Part 20)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.4.1.6  Initial and Default Values\n\nContent: Assembly object instance is the device component which provides a mechanism of grouping more than one attribute from one or more object instances into a single data structure for access over the network.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 24  Assembly-MFM Object Attributes (Part 1)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 24  Assembly-MFM Object Attributes\n\nContent: 8.6.1.1 Data — An attribute with the following list of attributes within its structure: Table 25 Assembly-MFM Data List 8.7 Sensor-AI-Aux Object — The Sensor-AI-Aux object is an Auxiliary Input object instance which inherits attributes, services, and behavior from the Sensor-AI object as defined in SEMI E54.1. The Sensor-AI-Aux object instance is the device component responsible for retrieving a reading from a physical analog input and making the value available to the network. 8.7.1 Sensor-AI-Aux Object Attributes — The attributes provided by the Sensor-AI-Aux object instance are defined in SEMI E54.1. The value attribute represents the analog input measurement. 8.7.2 Sensor-AI-Aux Object Services — The services provided by the Sensor-AI object instance are defined in SEMI E54.1. 8.7.3 Sensor-AI-Aux Object Behavior — The behavior exhibited by the Sensor-AI-Aux object instance is defined in SEMI E54.1. Additional specific behavior associated with the\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 24  Assembly-MFM Object Attributes (Part 2)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 24  Assembly-MFM Object Attributes\n\nContent: Sensor-AI-Aux object is defined below. 8.7.3.1 Sensor-AI-Aux OPERATING Application Process — A reading is retrieved from a physical analog input. This reading may be corrected with a manufacturer-specified algorithm. This corrected reading becomes the input to the offset and gain formula to generate the value attribute as referenced in SEMI E54.1. 8.8 Actuator-AO-MF Object — The Actuator-AO-MF object instance inherits from the Actuator-AO object attributes, services, and behavior as defined in SEMI E54.1. The Actuator-AO-MF object instance is the component responsible for driving the physical mass flow control valve of the device. Override attributes are available to produce valve drives which either fully close or fully open the valve, irrespective of the value of the setting attribute.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.8.1  Actuator-AO-MF Object Attributes\n\nTable 26  Actuator-AO-MF Object Attributes  \n8.8.1.1  Valve Type (Optional) — An attribute which specifies the type of valve present in the device. This attribute is an enumerated byte that can take on one of the following values:  \n$0 =$ Solenoid\n$1 =$ Voice Coil\n$2 =$ Piezo Electric\n$3 =$ Thermal\n$\\ 4 2 6 3 =$ Reserved\n$6 4 - 2 5 5 =$ Manufacturer-Specified  \n8.8.1.2  Override (Optional) — An attribute which specifies an override to the controlled valve position derived from the Controller object instance. This attribute is an enumerated byte that can take on one of the following values:  \n$0 =$ Normal — Normal control mode\n$1 =$ Flow Off — Valve Closed\n$2 =$ Purge — Valve Open\n$3 =$ Power Off — Valve to unpowered state\n$4 \\substack { - 6 3 } =$ Reserved\n$6 4 - 2 5 5 =$ Manufacturer-Specified\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.8.1.3  Initial and Default Values (Part 1)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.8.1.3  Initial and Default Values\n\nContent: Table 27 Actuator-AO-MF Object Attribute Initial and Default Values 8.8.2 Actuator-AO-MF Object Services — There are no additional services defined for this object in this document. 8.8.3 Actuator-AO-MF Object Behavior — The behavior exhibited by the Actuator-AO-MF object instance is defined in SEMI E54.1. The specific behavior associated with the Actuator-AO-MF object is defined below. 8.8.3.1 Actuator-AO-MF OPERATING Application Process–Override — The override attribute determines whether the position of the physical flow control valve will be overridden and, if so, to what position it will be driven. Otherwise, the physical flow control valve is driven by the converted signal derived from the Controller object instance. 8.9 Controller Object — The Controller object definition is provided in SEMI E54.1. This object instance is the device component which provides the closed-loop control of mass flow. There are no additional attributes, services, or behavior\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.8.1.3  Initial and Default Values (Part 2)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.8.1.3  Initial and Default Values\n\nContent: defined for this object in this document. 8.9.1 Controller Object Attributes — The following attribute table is provided to enhance the C Class Attribute table and provides a specific attribute “Form” definition.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 28  C Class Attributes\n\n8.10  Local Link Object — The Local Link object is defined in SEMI E54.1. This object instance is the device component which provides a mechanism of linking two attributes within the device. There are no additional attributes, services, or behavior defined for this object in this document.  \n8.11  SISO Object — The SISO object provides a Single Input, Single Output function. At this level, only the input and output attributes are defined. An instance of this object makes no sense, because there is no transfer function defined, but rather, the attributes, services, and behavior of this object are inherited by the next level down (e.g., SISO-Setpoint Object).\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.11.1  SISO Object Attributes\n\nTable 29  SISO Function Object Attributes  \n8.11.1.1  Input — An attribute which specifies the input value, or independent variable, for the transfer function.\nThe data type is specified by the data type attribute.  \n8.11.1.2  Output — An attribute whose value is the output, or dependent variable, of the transfer function. The data type is specified by the data type attribute.  \n8.11.1.3  Data Type — An attribute which specifies the data type of the input attribute and the output attribute. The format and values of this attribute are defined in SEMI E54.1.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.11.1.4  Initial and Default Values\n\nTable 30  Table 30  SISO Object Attribute Initial and Default Values  \n8.11.2  SISO Object Behavior — The only behavior defined at this level is that of a continuously operating transfer function: The Output attribute value is calculated as a function of the Input attribute value. The specific transfer function is defined by lower level objects which inherit from this object.  \n$$\nO u t p u t = F ( I n p u t )\n$$  \nwhere: $F$ is the function specified  \n8.12  SISO-Setpoint Object — The SISO-Setpoint Object inherits from the SISO object. The definitions added by the SISO-Setpoint object include the behavior associated with the transfer function.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.12.1  SISO-Setpoint Object Attributes\n\nTable 31  SISO-Setpoint Object Attributes  \n8.12.1.1  Ramp Type (Optional) — An attribute which specifies a mechanism by which the output attribute is ramped to the current value of the input attribute.  \n$0 =$ Disable\n$1 =$ Time in seconds\n$2 =$ Amount per second\n$3 \\substack { - 6 3 } =$ Reserved\n$6 4 - 2 5 5 =$ Manufacturer-specified  \n8.12.1.2  Ramp Rate (Optional) — An attribute specified to define the ramp rate at which the SISO-Setpoint object instance tracks towards the current input value. The ramp rate specifies how quickly the output is ramped from the previous output value to the current input value. This attribute is expressed in terms of seconds or amount of change per second.  \n8.12.1.3  Ratio (Optional) — An attribute which specifies the ratio multiplier to be applied to the input attribute value prior to the application of the ramp transfer function.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.12.1.4  Initial and Default Values\n\nTable 32  SISO-Setpoint Object Attribute Initial and Default Values  \n8.12.2  SISO-Setpoint Object Behavior — The general behavior exhibited by the SISO-Setpoint object instance is defined in SEMI E54.1. The specific behavior associated with this object is defined below.  \n8.12.2.1  SISO-Setpoint OPERATING Application Process–Ramp — The ramp type and ramp rate attributes determine the conditions under which the value of the output attribute is calculated and modified by this application process. The ramp rate attribute is defined to express the rate at which the output attribute is ramped to the value of the input attribute based on the value of the ramp type attribute. Table 33 describes the behavior of the SISOSetpoint object instance based on the value of the ramp type attribute.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # Table 33  SISO-Setpoint Object Behavior - Ramp\n\n8.12.2.2  SISO-Setpoint OPERATING Application Process–Ratio — Prior to the application of the Ramp calculation, a multiplier is applied to the value of the input attribute. The value of the ratio attribute is multiplied to the value of the input attribute, and the result becomes the value which is used in the ramp calculation.  \nThe combined formula for the SISO-Setpoint object is as follows:  \n$$\nO u t p u t = F ( x )\n$$  \nwhere: $F$ is the function as defined by ramp type above  \n8.13  Assembly-MFC Object — The Assembly-MFC object inherits attributes, services, and behavior from the Assembly object. The Assembly object instance is the device component which provides a mechanism of grouping more than one attribute from one or more object instances into a single data structure for communication over the network.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.13.1  Assembly-MFC Object Attributes (Part 1)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.13.1  Assembly-MFC Object Attributes\n\nContent: Table 34 Assembly-MFC Object Attributes 8.13.1.1 Data — An attribute with the following list of attributes within its structure: Table 35 Assembly-MFC Data List NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard.\n\nSEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.13.1  Assembly-MFC Object Attributes (Part 2)\n\nTitle: SEMI E54.3-0698 (Reapproved 0704) SPECIFICATION FOR SENSOR/ACTUATOR NETWORK SPECIFIC DEVICE MODEL FOR MASS FLOW DEVICE - # 8.13.1  Assembly-MFC Object Attributes\n\nContent: Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET\n\nThis standard was technically approved by the Global Information & Control Committee and is the direct responsibility of the North American Information & Control Committee. Current edition approved by the North AmericanRegional Standards Committee on April 22, 2004.  Initially available at www.semi.org June 2004; to be published July 2004. Originally published September 1997.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 1  Purpose (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 1  Purpose\n\nContent: 1.1 This standard defines a communication specification based on the DeviceNet protocol to enable communications between intelligent devices on a sensor/actuator network (SAN) that operate according to SEMI- specified device models (common and device specific) in a semiconductor manufacturing tool. 1.2 Background and Motivation — DeviceNet provides for networking between simple industrial devices (e.g., sensors and actuators) and higher level devices such as controllers. DeviceNet provides: A solution to low-level device networking. Access to intelligence present in low-level devices. Master/Slave and Peer-to-Peer capabilities. 1.2.1 DeviceNet is based on the Controller Area Network (CAN) technology. CAN defines a Media Access Control (MAC) methodology and physical signaling characteristics. DeviceNet wraps a communication model and protocol as well as a complete Physical Layer definition around CAN to provide a complete network definition. 1.3 This document enables communications between intelligent devices on a\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 1  Purpose (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 1  Purpose\n\nContent: SEMI-compliant SAN by providing a presentation mapping of common and specific device network visible structure and behavior to a DeviceNet network.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 2  Scope (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 2  Scope\n\nContent: 2.1 This document specifies the protocol and services that compliant intelligent devices must support to interchange information over this semiconductor equipment sensor/actuator network. 2.2 This document specifies the utilization of the DeviceNet protocol to present externally visible device structure and behavior, specified in the Common Device Model (CDM) and appropriate Specific Device Models (SDM' s), on a DeviceNet network. 2.3 This document is used in conjunction with a SEMI standard SAN Common Device Model specification and one or more SEMI standard-specific device model specifications (e.g., for a mass flow controller). Together, they describe the externally visible data structure and behavior of devices using the DeviceNet networking capability in a SEMI-compliant SAN system. 2.4 This standard, together with a sensor/actuator network interoperability guideline, the sensor/actuator network common device model, one or more sensor/actuator network specific device model documents, and the DeviceNet specifications,\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 2  Scope (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 2  Scope\n\nContent: form a complete interoperability standard. The general sensor/actuator network document architecture is shown in the Sensor/Actuator Network Common Device Model document in Figure 1.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # Figure 1 Sensor/Actuator Network Related Documents\n\n2.5  Document Structure — The DeviceNet network communication standard complies with the SEMI SAN NCS template document structure; this structure is shown in Figure 2. The standard document is composed of two main parts. The first part (Sections 1 through 8) specifies the SAN enabling protocol as well as the presentation (i.e., mapping) of CDM object structure and behavior onto the network (referred to as the “CDM mapping”). The second part (Section 9) specifies the presentation (i.e., mapping) of SDM object structure and behavior onto the network for each SEMIspecified SDM (referred to as the “SDM mapping”).  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 3  Limitations (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 3  Limitations\n\nContent: 3.1 This document specifies a semiconductor equipment SAN based solely on DeviceNet and is a companion document to the DeviceNet specification; thus, a complete specification of this standard necessarily includes the DeviceNet specifications. There are other semiconductor equipment SAN communications options. The specifications for these options are not included here. 3.2 This standard specifies enhancements that provide additional capabilities over and above those currently required by DeviceNet. In order to avoid document consistency problems, information in the DeviceNet specification that relates to this standard is not repeated in this document. This document is limited to describing enhancements or limitations to the DeviceNet specification that are imposed by this standard. 2.6 Adding SDM Mappings — SDM mappings added to part two of this document are considered document additions and are balloted as such. An SDM mapping may only be balloted for addition to this document if the corresponding SEMI SDM has been\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 3  Limitations (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 3  Limitations\n\nContent: standardized or is in the process of being balloted for standardization. 3.3 A complete specification of the conformance testing procedure shall include the DeviceNet protocol conformance testing specification. Conformance testing shall also include enhancements and limitations to the DeviceNet specification required by this standard.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 4.1  SEMI Standards\n\nSEMI E30 — Generic Model for Communications and Control of SEMI Equipment (GEM)  \nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services  \nSEMI E54.1 — Standard for Sensor/Actuator Network Common Device Model  \n4.2  ISO Standards1  \nISO 7498 — Basic Reference Model for Open Systems Interconnection  \nISO 11898 — Road Vehicles — Interchange of  Digital Information — Controller Area Network (CAN) for High-Speed Communications\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 4.3  Other Documents\n\nDeviceNet Specification — ODVA2  \nController Area Network Specification — Version 2, R. Bosch GmbH, $^ +$ Postfach 50 D-7000, Stuttgart 1, Germany, 1991  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5  Terminology\n\nTerminology that is common to all of the documents in this SAN standard may also be defined in the Sensor Actuator Network Standard. Terminology may be reproduced here which is defined in other SEMI documents.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.1  Abbreviations & Acronyms\n\n5.1.1  CAN — Controller area network\n5.1.2  CDM — Common device model\n5.1.3  DM — Device manager (object)\n5.1.4  DN — DeviceNet\n5.1.5  NCS — Network communication standard\n5.1.6  OSI — Open systems interconnect\n5.1.7  OSS — Object services standard\n5.1.8  SAC — Sensor, actuator, controller (object)\n5.1.9  SAN — Sensor/actuator network\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.1.10  SDM — Specific device model\n\n5.2  Device Component Definitions — As this standard defines the presentation or mapping of CDM data structure and behavior over a network, it makes use of many of the terms in the CDM document. Table 1 provides a mapping of fundamental terminology of the CDM document into this document and the DeviceNet specification. Note that Column 2 contains an equal sign $\\overset { \\bullet \\ast } { = } \\overset { \\bullet } { }$ if the definition is used exactly as specified in the CDM specification.  \nTable 1  Mapping of CDM to NCS Terminology\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.3  DeviceNet Specific Definitions (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.3  DeviceNet Specific Definitions\n\nContent: 5.3.1 class — a set of objects that all represent the same kind of system component. A class is a generalization of an object. All objects in a class are identical in form and behavior, but may contain different attribute values. 5.3.2 controller area network $( C A N ) \\mathrm { ~ - ~ a ~ }$ protocol developed by the Bosch corporation for automotive invehicle networking. The CAN specification specifies OSI reference model layers 1 and 2, specifically the physical signaling and media access/data link protocols. 5.3.3 device profile — a DeviceNet specification for a device that contains an object model for the device type, the I/O data format for the device type, and the configuration data and the public interface(s) to that data. 5.3.4 explicit message connections — connections over a DeviceNet network that provide generic, multipurpose communication paths between two devices. These connections often are referred to as just messaging connections. Explicit messages provide the typical\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.3  DeviceNet Specific Definitions (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 5.3  DeviceNet Specific Definitions\n\nContent: request/response - oriented network communications. 5.3.5 input/output connections — connections over a DeviceNet network that provide dedicated, specialpurpose communication paths between a producing application and one or more consuming applications. Application-specific I/O data moves through these ports.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure\n\nContent: 6.1 The DeviceNet protocol is loosely based on a three-layer architecture. These layers constitute a collapsed form of the OSI seven-layer architecture, mapping into the physical, data link, and application layers of the Reference Model; however, DeviceNet provides additional functionality (such as connection support) commonly attributed to other OSI layers. The high level protocol architecture is shown in Figure 3. Figure 3 Layered View of DeviceNet 6.1.1 Note that Figure 3 represents a conceptual view of the device architecture. Conforming implementations must implement the services defined in this specification at each layer and must appear (from the network) to have implemented this architecture; however, an internal modular partitioning is not required. Implementations may sacrifice modularity in order to achieve high performance. 6.2 The DeviceNet physical layer is fully specified in Volume 1 of the DN Specification. Features of this layer include Trunkline - dropline\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure\n\nContent: configuration, simultaneous support for both network-powered and self-powered devices, and selectable data rates including at least $1 2 5 \\mathrm { k \\Omega }$ , 250k, and $5 0 0 \\mathrm { k }$ baud. At the data link layer, the CAN specification defines a carrier sense multiple access mechanism for media access control that avoids collisions and sends frames reliably. The application layer is specified in Volumes 1 and 2 of the DN Specification and provides for the definition of DeviceNet applications as a collection of addressable objects. Two basic categories of objects exist: Communication Objects and Application Objects. Communication Objects manage and provide for the runtime exchange of messages across DeviceNet. Application Objects implement product-specific features and/or provide a logical interface to productspecific information of devices on a DeviceNet network. $6 . 3 \\ \\mathrm { ~ I n }$ the remainder of this section, the protocol structure is described in more detail in\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure (Part 3)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6  Communication Protocol High Level Structure\n\nContent: terms of the OSI seven layer reference model, the object model environment, and network management specifications. 6.4 Physical Layer — The device shall comply with the DeviceNet physical layer specification as well as the \" Interface Guidelines for DeviceNet Devices on Semiconductor Manufacturing Tools\" which is published as part of the DeviceNet specification. This includes physical signaling (levels and baud rates - detailed in the CAN specification), transceivers, node isolation, media topology, cable specifications, network connectors and taps, and power considerations (load limits, system tolerances, and power supply options).\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.4.1  Physical Layer Enhancements — This standard supports the following physical layer enhancement to the DeviceNet specifications:\n\nThe transmission media, including both trunk cable and drop cable, shall be DeviceNet Thin Cable. Specifications on this cable and its utilization in DeviceNet systems (e.g., maximum trunk and drop lengths) are included in the DeviceNet specification.  \n6.5  Data Link Layer — The device shall comply with the DeviceNet Data Link Layer Specifications (i.e., Controller Area Network Specification: Version 2). This includes the media access control mechanism and the logical link control mechanism. Addressing is currently limited to 11 bits.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer. (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer.\n\nContent: 6.7 Transport Layer — There is no distinct transport layer. Some of the functionality of this layer is implemented in the Application Layer. Specific functions include: segmentation/reassembly for full message delivery and the establishment of node-to-node connections. 6.8 Session Layer — There is no distinct session layer. 6.9 Presentation Layer — There is no distinct presentation layer. Data types and data presentation in DeviceNet messages are specified as part of the DeviceNet object definitions and object attribute and service communication protocol. 7.3 The mapping of the DM and SAC objects are combined into a single object in DeviceNet called the S-Device Supervisor (DS) object. 6.10 Application Layer — The device shall comply with the DeviceNet application layer specification for defining and addressing objects, including their attributes and services, and enabling specified network behavior. The device shall comply with the object model specifications provided in the\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer. (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer.\n\nContent: DeviceNet specification as well as the “Interface Guidelines for DeviceNet Devices on Semiconductor Manufacturing Tools” component of the DeviceNet specification. In addition, the device shall comply with the object specifications defined in Section 7 of this document. 6.10.1 Object Models — The DeviceNet protocol provides an object-oriented specification for creating, defining, and addressing objects explicitly, including their attributes and services (i.e., explicit messaging), and creating, defining, and communicating object attribute assemblies in an application-dependent format (i.e., input/output messaging). The device shall comply with the object model specifications provided in the DeviceNet documentation. In addition, the device shall comply with the object specifications defined in Section 7 of this document. 6.11 Network Management — The device shall comply with the DeviceNet network management specifications (e.g., physical layer bit rate, duplicate MAC ID\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer. (Part 3)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 6.6  Network Layer — There is no distinct network layer.\n\nContent: detection, master-slave, and peer-to-peer network management). No (additional) network management functions are specified in this document.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: 7.1 The DeviceNet specification identifies and describes objects (i.e., classes) that must exist in all DeviceNet-compliant devices. The Common Device Model specification additionally identifies two objects (namely the Device Manager (DM) and Sensor Actuator Controller (SAC) objects) that must exist in all SEMI-compliant SAN devices. The required object types for a SEMI-compliant SAN device, using the network communication specification described herein, necessarily comprise the union of the above to requirements. 7.2 A list of required and optional object types is given in Table 2. Note that the Sensor, Actuator, and Controller object types are not required and are indicated as optional in the CDM specification. These objects are aggregated together to form a SEMI- and DN- compliant device, as shown in Figure 4. Table 2 Required Object Types \\* See DeviceNet specification for further information; values are hexadecimal. $^ { * * }$ See CDM specification for further information. $^ { * * * }$ Not\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: applicable. \\*\\*\\*\\* Application-dependent. 7.4 An embodiment of a specific device type represented as an aggregation of the object types listed in Table 2, that is compliant with both the CDM specification and the DN specification, is a candidate for a SEMI SDM as well as a DN Device Profile. Conversely, all SEMI SDM’s and DN Device profiles specified for operation over a SEMI-compliant DN network must be an aggregation of the object types listed in Table 2 and be compliant with both the CDM specification and the DN specification. 7.5 In the following sections, the presentation to the network of object addressing, object attributes, and object services for each of the object types listed in Table 2 and Figure 4 is described in detail. 7.6 Identity Object — This object provides identification of, and general information about, the device. The Identity Object must be present in all DeviceNet products. As specified by DeviceNet, each DeviceNet product shall support one (and only one) Identity object per\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 3)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: physical connection to the DeviceNet communication link. Presentation of object identity, attributes, and services to the network for this object is described in the DeviceNet specification. Compliance with the DeviceNet specification shall constitute compliance with this NCS for the Identity Object. 7.7 Message Router (MR) Object — The MR Object provides a messaging connection point through which a service of any object class or instance residing in the physical device may be addressed. The MR object must be present in all DeviceNet products. As specified by DeviceNet, each DeviceNet product shall support one (and only one) Message Router object per physical connection to the DeviceNet communication link. Presentation of object identity, attributes, and services to the network for this object is described in the DeviceNet specification. Compliance with the DeviceNet specification shall constitute compliance with this NCS for the MR Object. 7.8 DeviceNet (DN) Object — The DN Object provides the\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 4)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: configuration and status of a DeviceNet port. As specified by DeviceNet, each DeviceNet product shall support one (and only one) DN object per physical connection to the DeviceNet communication link. Presentation of object identity, attributes, and services to the network for this object is described in the DeviceNet specification. Compliance with the DeviceNet specification shall constitute compliance with this NCS for the DN Object. 7.9 Connection (CNX) Object — The CNX Object provides configuration and management of DeviceNet connections. A CNX object exists at each end of a DeviceNet connection (point-to-point or multicast). The CNX object handles the negotiation for connection establishment and manages a set of timers in order to handle cyclic traffic, connection timeout and fault containment and recovery. Several connection behaviors are supported including: explicit messaging, polled, cyclic, change-of-state and multicast messaging. 7.10 S-Device Supervisor (DS) Object — The DS object is the device\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 5)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: component responsible for managing and consolidating the device operation as well as coordinating the interaction of the device with the sensory/actuation/control environment. Each device must support one (and only one) DS object. The DS object combines both the DM object and the SAC object into a single object for DeviceNet. The DM and SAC, as well as their common required and optional attributes, services, and behavior, are described in the CDM standard. The presentation of object attributes and services to the DN network shall be as indicated in Table 3. Table 3 Network Presentation of DM Object Attributes and Services \\* There is no one-to-one mapping of the Reporting Mode attribute in DeviceNet. Instead, DeviceNet specifies several attributes, services and behaviors for its Connection Object to effect a superset of the behaviors associated with the DM attributes Reporting Mode and Exception Status Report Interval. See the DeviceNet specification for details. 7.10.1 Note that the format of DM object\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 6)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: attributes is detailed in the CDM document; the presentation of DM object attributes to the DN network is detailed in Table 3 and the DN specification; the format of DM object services is detailed in the CDM document and the DN specification; and the presentation of the DM object services is detailed in Table 3 and the DN specification. 7.11 Sensor Object, Actuator Object, Controller Object, and Other Object Types — These object types are used collectively to model the type-specific structure and behavior of the device. The requirement and number of each of these object types in a device model is device type-specific. Further, the attributes, services, and behavior associated with each of these object classes and instances in a device is also device type-specific, but must be compliant with both SEMI and DN specifications. The specification of these object types for a specific device type can be found in the appropriate SDM. The method of presentation of object structure and behavior to the DN network for\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types (Part 7)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 7  Required Object Types\n\nContent: objects defined for, and associated with, a specific device type can be found in Section 9 of this document.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 8  Protocol Compliance (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 8  Protocol Compliance\n\nContent: 8.1 A method of testing protocol compliance is required to verify implementation conformance to the standard. The test plan includes tests for duplicate address resolution, mandatory objects, etc. 8.2 The compliance test suite for this protocol necessarily includes the DeviceNet protocol compliance specification and test suite as well as the “Conformance Test Procedures for DeviceNet Devices on Semiconductor Manufacturing Tools” which is published as part of the DeviceNet specification. Additional compliance specification required for compliance to this NCS is provided as a set of Protocol Specification Sheets. 8.3 Any enhancements to DeviceNet presented in this document must be accepted by the Open DeviceNet Vendors Association (ODVA) and incorporated into the DeviceNet Specification before they can be implemented as a DeviceNet product. 8.4 Protocol Specification Sheets — Compliance to this NCS necessarily requires adherence to a set of protocol specification sheets. These sheets are included as Appendix 1\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 8  Protocol Compliance (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 8  Protocol Compliance\n\nContent: of this document and are included here for reference only. For compliance with this NCS, it is necessary to reference the latest revision of the Protocol Specification Sheets from ODVA. Note that these sheets provide statements of compliance for general device data, physical conformance data, communications data, required object implementation (see also Section 7 or this document), and optional object implementation. Note also that these specification sheets must conform with DeviceNet specifications for “Statement of Compliance” forms. Finally note that additional specification sheets shall be completed as necessary to specify compliance with objects defined in SDM’s and SDM mappings (see Section 9).\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # 9  Specific Device Model Mappings\n\n9.1  This section provides for the mapping of networkvisible specific device structure and behavior, specified in a SEMI standard SDM specification, to the DN network. Each subsection is devoted to a single SDM specification (e.g., 9.1: Mass Flow Controller). Additional SDM mappings are added as sub-sections to this NCS specfication according to SEMI guidelines and the guidelines of the SEMI SAN Interoperability standard.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # APPENDIX 1 PROTOCOL SPECIFICATION SHEETS\n\nNOTICE: This appendix is not an official part of SEMI E54.4 and is not intended to modify or supercede the official standard. Determination of the suitability of the material is solely the responsibility of the user. This appendix contains a set of protocol specification sheets. Compliance to this NCS necessarily requires adherence to this set of protocol specification sheets (see Section 8.1).\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # A1-1  The protocol specification set of sheets contains the following components:\n\n• A General Device Data/Physical ConformanceData/ DeviceNet Communication Data statement of compliance. (Form F_1, 1 page.)\n• DeviceNet required object implementation statements of compliance (for Identity, Message Router, and DeviceNet objects, see Section 7). (Forms F_2 through F_5, 4 pages.)\n• NCS - DeviceNet required object implementation statements of compliance (for Device Manager and Sensor/Actuator/Controller objects, see Section 7). (Form F_6, 2 pages.) Open object- and vendor- specific implementation templates (for utilization by SDMs, vendors, etc.). (Forms F_6 through F_7, 2 pages.)  \nA1-1.1  Note that these protocol specification sheets are aligned with DeviceNet specifications for “Statement of Compliance” documentation, available with the DeviceNet specification from ODVA. Detailed instructions on completing these forms are in this “Statement of Compliance” documentation. The set of protocol specification sheets begins on the following page.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # Statement of Compliance (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # Statement of Compliance\n\nContent: Complete this form using the definitions previously outlined. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. X Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. X Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. X Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. $\\mathbf { X }$ Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. $\\mathbf { X }$ Set to indicate that attribute value is written to by the use of\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # Statement of Compliance (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # Statement of Compliance\n\nContent: Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. X Set to indicate that attribute value is written by the use of Set_Attribute_Single service.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # DeviceNet (Part 1)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # DeviceNet\n\nContent: Open Object Implementation X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. $\\mathbf { X }$ Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service X Set indicate that attribute value is written to by the use of Set_Attribute_Single service. X Get to indicate that attribute value is returned by the use of Get_Attribute_Single service. $\\mathbf { X }$ Set to indicate that attribute value is written to by the use of Set_Attribute_Single service. NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein.\n\nSEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # DeviceNet (Part 2)\n\nTitle: SEMI E54.4-0704 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR DEVICENET - # DeviceNet\n\nContent: These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS)\n\nNOTE: This document was previously designated SEMI E60. Because this document is part of a suite of documents, its designation has been reassigned for ease of reference. Please note that the technical content of this document is unchanged from the 0697 version.  \nNOTICE: This document was balloted and approved for withdrawal in 2004.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 1   Purpose\n\nThis standard defines a communication protocol based on the Smart Distributed System (SDS) to enable communications between intelligent devices on a sensor/actuator network (SAN) to be used in semiconductor manufacturing equipment.  \n1.1   Background and Motivation — SDS provides interconnection of smart control devices such as sensors, actuators, and controllers in a fast-response time, low-cost network for industrial use. SDS enables multiple devices to share a single bus, thereby significantly reducing the point-to-point wiring between controllers, sensors, and actuators. The SDS system is based on CAN, the controller area network used in the automotive industry and defined by Bosch.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 2   Scope (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 2   Scope\n\nContent: This document specifies a SAN communications standard based on the Smart Distributed System (SDS) specification that is in compliance with the SEMI SAN Common Device Model specification. 2.1 This document specifies the protocol and services that compliant intelligent devices must support to interchange information over this semiconductor equipment sensor/actuator network. 2.2 This document is used in conjunction with a SEMI standard SAN Common Device Model specification and one or more SEMI standard specific device model specifications (e.g., for a mass flow controller). Together, the model documents describe the data structure and behavior that are characteristic of the various devices on the network. This SAN communications standard identifies the protocol for the interaction with such a device over the network to make the data structures and behavior available to other devices. 2.3 This standard, together with a sensor/actuator network interoperability guideline, the\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 2   Scope (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 2   Scope\n\nContent: sensor/actuator network common device model, one or more sensor/actuator network specific device model documents, and the SDS specifications, form a complete interoperability standard. The general sensor/actuator network document architecture is shown in the Sensor/Actuator Network Common Device Model document in Figure 1. The SDS Network communications standard document structure is shown in Figure 2. This standard specifies the mapping of the SAN common device model onto the SDS-specific network. In addition, the document will include mappings to specific device models (e.g., the mass flow controller). The latter mappings will be included in this document as the specific device models are defined.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 3   Limitations\n\n3.1   This document specifies a semiconductor equipment SAN based solely on SDS and is a companion document to the SDS specification; thus, a complete specification of this standard necessarily includes the SDS specifications. There are other semiconductor equipment SAN communications options. The specifications for these options are not included here.  \n3.2   This standard specifies enhancements that provide additional capabilities over and above those currently required by SDS. In order to avoid document consistency problems, information in the SDS specification that relates to this standard is not repeated in this document. This document is limited to describing enhancements or limitations to the SDS specification that are imposed by this standard.  \n3.3   A complete specification of the conformance testing procedure shall include the SDS protocol conformance testing specification. Conformance testing shall also include enhancements and limitations to the SDS specification required by this standard.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 4.1   SEMI Standards\n\nSEMI E30 — Generic Model for Communications and Control of SEMI Equipment (GEM)  \nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services  \nSEMI E54.1 —  Standard for Sensor/Actuator Network Common Device Model\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 4.2   ISO Standards1\n\nISO 7498 — Basic Reference Model for Open Systems Interconnection  \nISO 11898 — Road Vehicles — Interchange of  Digital Information — Controller Area Network (CAN) for High-Speed Communications\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 4.3   Other Documents\n\nDoc 84-08420-1 (GS 052 103) SMART DISTRIBUTED SYSTEM Application Layer Protocol Specification, Honeywell MICRO SWITCH, February 15, 1995  \nDoc 84-08421-A (GS 052 104) — SDS Physical Layer Specification, Honeywell MICRO SWITCH, December 15, 1994  \nDoc 85-08453-0 (GS 052 107) SMART DISTRIBUTED SYSTEM Component Model Specification, Honeywell MICRO SWITCH, January 29, 1995  \nDoc GS 052 108 Issue 1 — SMART DISTRIBUTED SYSTEM Conformance Test Procedure Specification, Honeywell MICRO SWITCH, January 2, 1995  \nController Area Network Specification: Version 2, R. Bosch GmbH, $^ +$ Postfach 50 D-7000, Stuttgart 1, Germany, 1991\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology\n\nContent: Terminology that is common to all of the documents in this SAN series may also be defined in the Sensor Actuator Network Interoperability Guideline. Terminology may be reproduced here which is defined in other SEMI documents. 5.1 Device Component Definitions — This standard is based on the concepts developed in the Sensor Actuator Network Common Device Model (SEMI E54) document and makes use of the following terms defined in it: a) device b) device model c) object d) instance e) attribute f) behavior g) service h) state diagram i) byte j) nibble k) character string 5.2 SDS-Specific Definitions — In addition to the above terms, the following terms are defined for SDS networks. 5.2.1 actions — operations that a client may request an Embedded Object to perform. The action typically modifies the state of the device. Actions are more powerful than writing to an attribute, in that multiple input arguments may be provided as part of an action request. Also, results of the action\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology\n\nContent: are typically returned. Actions, like attributes, have identifiers that are specific to the type of the object. However, these identifiers are independent from attribute or event identifiers. The “request” services specified in SEMI E54 are implemented as SDS actions. 5.2.2 controller area network $( C A N ) \\mathrm { ~ - ~ a ~ }$ protocol developed by the Bosch corporation for automotive invehicle networking. The CAN specification specifies OSI reference model layers 1 and 2, specifically the physical signaling and media access/data link protocols. 5.2.3 embedded objects — each SDS Logical Device contains at least one, and at most 32, Embedded Objects. An SDS Embedded Object is an abstraction representing an addressable entity “embedded” within a Logical Device having specific application-related interface characteristics. These characteristics include a defined set of attributes, actions, and events that are specific to the Embedded Object. Combinations of these Embedded\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology (Part 3)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology\n\nContent: Objects provide a mechanism for describing an arbitrary sensor/actuator network device. The behaviors required by SEMI E54 are specified as part of the definition of attributes, actions, and events. 5.2.4 events — Are used by objects to asynchronously report the occurrence of events within an Embedded Object. Event definitions specify the event reports that a specific Embedded Object type may emit. Events also have type-specific identifiers. Event definitions include: a text string defining the semantics of the event, an event identifier numerical value and textual name, and a syntax definition. The “notification” services specified in SEMI E54 are implemented as SDS events. 5.2.5 logical device — It is possible to have one or more independent Logical Devices within the Physical Component. This provides the illusion of multiple devices on the network that actually are implemented on the same physical hardware. Logical Devices are distinguished within the Physical Component\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology (Part 4)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 5   Terminology\n\nContent: using unique SDS bus addresses. The Logical Device defines a separately addressable entity within a Physical Component that has an independent interface definition. 5.2.6 physical component — An SDS Physical Component is an abstraction representing a single physical package of hardware and software that is connected to the network. This is equivalent to the CDM SEMI E54 definition for “device.” The Physical Component contains one or more Logical Devices. Table 1 provides a mapping of SEMI E54 definitions to SDS-specific definitions. Column 2 contains an equal sign $\\mathbf { \\tilde { \\Sigma } } ^ { \\left. \\epsilon \\right. } = \\mathbf { \\bar { \\Sigma } }$ if the definition is used exactly as specified in SEMI E54. Otherwise, the appropriate SDS-specific term(s) are identified. Table 1 Table 1 Mapping of Terms Between SEMI E54 and SDS\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure\n\nContent: The SDS protocol is based on a three-layer architecture. These layers constitute a collapsed form of the OSI seven-layer architecture, mapping into the physical, datalink, and application layers of the Open Systems Interconnection Reference Model. The high level protocol architecture is shown in Figure 3. Note that Figure 3 represents a conceptual view of the device architecture. Conforming implementations must implement the services defined in this specification at each layer and must appear (from the network) to have implemented this architecture; however, an internal modular partitioning is not required. Implementations may sacrifice modularity in order to achieve high performance. SDS uses a three-layer protocol stack consisting of the physical, datalink, and application layers. The SDS physical layer uses two twisted pair to deliver power and data to smart devices at speeds ranging from 125 Kbps to 1 Mbps and distances up to 500 meters.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure\n\nContent: At the data link layer, the CAN specification defines a carrier sense multiple access mechanism for media access control that avoids collisions and sends frames reliably. The application layer supports a concise set of services to set and get attributes of objects, to invoke operations on objects, and to report notifications from objects. These services are optimized for high performance in discrete control applications (e.g., 3 byte messages convey digital I/O state changes). In addition, a set of pre-defined and extensible component objects flexibly specifies all network-visible application level device capabilities. 6.1 Physical Layer — The device shall comply with the SDS physical layer specifications. These include physical signaling (levels and baud rates - detailed in the CAN specification), transceivers, node isolation, media topology, cable specifications, network connectors and taps, and power considerations (load limits, system\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure (Part 3)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure\n\nContent: tolerances, and power supply options). 6.2 Data Link Layer — The device shall comply with the SDS Data Link Layer Specifications (i.e., Controller Area Network Specification: Version 2). These include the media access control mechanism and the logical link control mechanism. Frame formats, interframe spacing, and error signaling shall comply with the CAN specifications. CAN frame identifiers shall be 11 bits in length. 6.3 Network Layer — There is no distinct network layer. A future extension of the SDS SEMI SAN protocol will support inter network messaging. 6.4 Transport Layer — There is no distinct transport layer. Specific functionality of this layer is implemented in the Application Layer. Functions include: segmentation and reassembly for large message delivery. 6.5 Session Layer — There is no distinct session layer. 6.6 Presentation Layer — There is no distinct presentation layer. Data types are specified as part of the SDS object\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure (Part 4)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 6   Communication Protocol High Level Structure\n\nContent: definitions. 6.7 Application Layer — The device shall comply with the SDS application layer specification. This includes application object to application object communication mechanisms. 6.7.1 Object Models — The SDS protocol provides an object-oriented specification for defining and addressing objects, including their attributes, actions, and events. The device shall comply with the object model specifications provided in the SDS Component Model Specification. In addition, the device shall comply with the object specifications defined in Section 7 of this document. 6.8 Network Management — The device shall comply with the SDS system and network management specifications.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: The Common Device Model specification identifies the objects that must be supported in SEMI SAN-compliant devices. These objects are specified in Table 1 of SEMI E54 and include the following: a) Device Manager (DM) b) Sensor/Actuator/Controller (SAC) c) Sensor (Si) d) Actuator (Ai) e) Controller (Ci). As specified in SEMI E54, a conforming device must support the DM, the SAC, and one or more of the remaining object types. This section specifies the implementation of these required and optional objects in the SDS object model. SDS object types are defined for the DM and SAC objects. Sensor, actuator, or controller objects may be implemented using existing standard SDS object types, or new types may be specified, depending on the specific device model needs. 7.1 Embedded Object Type Hierarchy — SDS classifies Embedded Objects into specific object types (classes), and these types are organized into a class inheritance hierarchy. (For more information on\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: classification and inheritance, see SEMI E39 -- Object Services Standard). Each SDS object type specifies the details of an object’s attributes, actions, and events. The Embedded Object (an instance of a type) is a networkaddressable entity within a logical device. The classification identifies common characteristics and enables reuse of object definitions. The top two levels of that hierarchy are shown in Figure 4 below. timers, type conversion, bit-wise operations, character strings, etc. Function Block Object (Type 3) — Collections of function objects that have a specific set of inputs and outputs (e.g., a predefined control algorithm). These may be used in the SAN devices as the controller objects. SDS Interface Object (Type 4) — Models, network interfaces, gateways, etc. SEMI Object (object Type 10) — Implement the additional object types necessary for SEMI SANcompliant networks. 7.1.1 SEMI Objects — To implement SEMI-specific object types, the SDS object type\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 3)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: hierarchy is augmented with type number 10 - SEMI object. This type, and the types derived from it, specify the new functionality necessary to implement this SEMI standard. Object type 10 is defined to include the common required attributes, services, and behaviors as described in the SAN Common Device Model standard SEMI E54. This definition is in terms of SDS Attributes, Actions, and Events. The SDS object types are specified in detail in the SDS Component Modeling Specification. There are four primary Embedded Object types in the SDS type hierarchy. These include: I/O, IEC 1131-3 Function Object, Function Block, and SDS Interface. In addition, a new SEMI object type has been defined for use in developing classes necessary for SEMI SAN-compliant networks. Each of these object types is derived from a common type called SDS Minimum, which defines the minimum characteristics that are common to all SDS Embedded Objects. All SDS object types inherit from the SDS\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 4)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: Minimum object type, which provides the fundamental characteristics of an SDS device. The other top level SDS object types shown in Figure 4 are summarized below. I/O Object (Type 1) — Defines the general characteristics of objects used for process I/O type functions. Subtypes of this type specify input and output objects with either analog or digital process variables. These may be used in SAN devices as the sensor or actuator objects. IEC 1131-3 Function Object (Type 2) — Defines standard IEC 1131-3 Function Objects such as counters, In addition, there are derived types: types 10.1 implementing the SAC object and 10.2 implementing the Device Manager (DM) object (Figure 5). Object instances of these types are required in the Common Device Model document SEMI E54. Each object type inheriting from the SEMI Object type 10 (e.g., 10.1 SAC object) automatically includes the features of the SEMI Object. Thus, both the SAC and the DM object have the reset, abort, and\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 5)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: recover actions that are defined for the SEMI Object type 10. (See Section 7.2.) The Device Manager type augments the SEMI Object to provide the required characteristics over and above those specified in type 10 and SDS minimum. As specific device models are defined, the SAC object type will be refined to be specific to that device. These object types are indicated in Figure 5 as object types SDM-1, SDM-2, etc. (examples include: Mass Flow Controller, Particle Counter, and Capacitance Manometer SAC objects). These object types have (at least) the set of attributes, actions, and events inherited from SDS Minimum, the SEMI Object type, and the SAC object type. Additionally, each SDM-n may have other, unique attributes, actions, and events which implement the desired behavior of a specific device SAC object. The optional sensor and actuator objects described in the SEMI E54 specification may be instances of existing SDS object types (e.g., of type I/O object in Figure\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 6)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: 4). In cases where a desired object type is not available under SDS object type 1, new I/O object types may be defined as sub-types of object type 10.3 SEMI I/O object. 7.1.2 Example SEMI Device — For clarification purposes, an example SEMI device is shown in Figure 6 (using Rumbaugh notation). It consists of three (or more) objects, including a DM, SAC, and binary input object. This is a complete and fully functional SEMI SAN-compliant digital input device. In Figure 6, the Device is assigned an SDS address (e.g., 125), and each object is assigned an object instance number. The device address may be changed during installation. Each SDS message contains a device address and an object instance number. 7.2 SEMI Object Type 10 Definition — Table 2 formally specifies the SEMI Object (type 10). The three sections in this table specify SDS identifiers to code the required attributes, actions, or events. The first column is the SDS identifier number, the unique\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 7)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: identifier used in SDS messaging. The second column is the SEMI E54-specified name associated with the ID#. The third column identifies the associated tag name (identifier) used in SEMI E54. Table 2 Table 2 SEMI Object Common Level Model(Object Type 10) There are no attributes that are currently identified in SEMI E54 that are common to all SEMI objects. As a result, there are no attributes defined in the table. However, 64 attribute IDs have been reserved for use in other sub-types derived from type 10 in this document and in future revisions of this document. SEMI E54 defines three service requests (reset, abort, and recover) that are common to the Device Manager and the SAC objects. These service requests are implemented as specific SDS Actions. Each service is mapped to a designated SDS action in Table 2. The actions are identified as ID# 80, 81, and 82 respectively. Additional action identifiers are reserved for use in sub-types of this type and for future\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 8)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: use. Not explicitly shown as Actions are the SEMI E54 Get and Set Attribute services. The equivalent behavior is provided by the SDS Read and Write Attribute services that are implicit for every attribute. The execution of a service request may cause a change in the object’s state variable. When a device receives an SDS action message indicating a service request, the object transitions to the appropriate state, after which an SDS response message is transmitted to the service requester indicating the response to the request. For example, the SAC Object Instance Behavior State Transition Matrix in Table 4 of the SEMI E54 document defines the valid SAC state transitions. Service Notifications (as defined in SEMI E54) are implemented with specific SDS event messages which are specified in the third part of the table. The SEMI object (type 10) has no events defined at this time. Additional event identifiers are reserved for use in subtypes of this type and for future\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 9)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: use. 7.3 Implementation of Sensor/Actuator/Controller Object Type $( S A C ) \\mathrm { ~ - ~ A ~ }$ single instance of a SAC object type is required in each SAN device. The actual object type used will typically be derived from the SAC object type rather than this exact type. The derived type will have added services and attributes that are devicespecific (according to a Specific Device Model specification). The generic SAC type is, nevertheless, defined as a semantic type definition (sensor actuator controller object). The features of the SAC object include service requests (for Reset, Abort, Recover, etc.) that are mapped to SDS Action functions. Since these have been defined in the super type (object type 10), they are not re-defined here. 7.3.1 SDS Object Model for Sensor/Actuator/Controller Object Type (SAC) — The SDS object model for the SAC object type (Table 3) needs only to include the appropriate mapping for SAC-specific attributes and behavior (i.e.,\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types (Part 10)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7   Required Object Types\n\nContent: augmenting the SEMI Object Common Level - Table 8-1). The SAC Object Model contains no attributes, actions, or events beyond those specified in its super type (type 10). An implementor of a specific device will normally derive a new SAC object type and add new attributes, actions, or events as necessary (i.e., 10.1.1 MFC SAC Object). Object type 10.1 is, in essence, a semantic grouping only—for a group of device-specific SAC object types implementing specific behavior. The default object identifier that should be used for the SAC object in an SDS device is 1. The actual object identifier used may be reassigned by the implementor. The identifier may be determined on line via reading the object type attributes from all objects on the device.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # Table 3  Table 3  SAC Object Model (Object Type 10.1)\n\n7.4   Implementation of Device Manager Object Type $( D M ) - \\mathbf { A }$ single instance of this type is required on each device.  \n7.4.1   SDS Object Model for Device Manager Object Type (DM) — The SDS object model for the DM object type includes the appropriate mapping for DM-specific attributes and behavior to SDS-specific identifiers (Table 4).  \nTable 4  Table 4  DM Object Model (Object Type 10.2)  \nThe DM Object Model maps exactly to the specification for the DM in SEMI E54. Refer to that document for detailed descriptions for the attributes, actions, and events defined in Table 4. The SEMI E54 tag column indicates the identifier used in SEMI E54.  \nThe default object identifier that should be used for the DM object in an SDS device is 2. The actual object identifier used may be reassigned by the implementer.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7.5   Implementation of Sensor Object Type $( S _ { i } ) - \\mathrm { Z e r o }$ or more instances of this object type are permitted on each device.\n\nSensor object types are already defined within the SDS object hierarchy (e.g., Object Type $1 \\mathrm { ~ - ~ } \\mathrm { { I } / O }$ Device). Implementation of a device which is compliant with this type results in compliance with this standard.  \nIf the existing sensor object types defined in the SDS specifications do not meet the requirements of the application, new SEMI-specific types may be defined deriving from type 10.3. If new types are required that are generic (i.e., not specific to SEMI), they should be derived from type 1 - I/O Device.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7.6   Implementation of Actuator Object Type $( A _ { i } ) \\_-$ Zero or more instances of this object type are permitted on each device. (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7.6   Implementation of Actuator Object Type $( A _ { i } ) \\_-$ Zero or more instances of this object type are permitted on each device.\n\nContent: Actuator object types are already defined within the SDS object hierarchy (e.g., Object Type $1 \\ \\cdot \\ 1 / 0$ Device). Implementation of a device which is compliant with this type results in compliance with this standard. If the existing actuator object types defined in the SDS specifications do not meet the requirements of the application, new SEMI-specific object types may be defined deriving from type 10.3. If new types are required that are generic (i.e., not specific to SEMI), they should be derived from type 1 - I/O Device. 7.7 Implementation of Controller Object Type $( C _ { i } ) -$ Zero or more instances of this object type are permitted on each device. Specific controller object types are defined within the SDS object hierarchy (e.g., Object type 3 - Function Block Object). Implementation of a device which is compliant with these types\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7.6   Implementation of Actuator Object Type $( A _ { i } ) \\_-$ Zero or more instances of this object type are permitted on each device. (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 7.6   Implementation of Actuator Object Type $( A _ { i } ) \\_-$ Zero or more instances of this object type are permitted on each device.\n\nContent: results in compliance with this standard. If the controller types defined in the SDS specifications do not meet the requirements of the application, new SEMI-specific object types may be defined deriving from type 10. If new types are required that are generic (i.e., not specific to SEMI), they should be derived from type 3 - Function Block Object.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 8   Protocol Compliance\n\nA method of testing protocol compliance is required to verify conformance to this standard. The device must satisfy the SDS protocol conformance requirements as documented in the SDS specifications. The SDS partners group provides a conformance verification test procedure service to its members. When this SEMI Sensor/Actuator Network standard is incorporated into the SDS Partners specification set, this service may be used to verify compliance with the SEMI guidelines.  \n8.1   Compliance Statement — Addendum A includes a compliance statement form that should be completed by device implementors for compliance verification.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # 9   Specific Device Model Mappings\n\n9.1   Device Model for Mass Flow Controller — This model will be specified after the MFC-specific device model (SDM) standard is complete.  \n9.2   Device Model for Capacitance Manometer — This model will be specified after the capacitance manometer SDM standard is complete.  \n9.3   Device Model for Particle Counter — This model will be specified after the particle counter SDM standdard is complete.  \n9.4   Device Model for Residual Gas Analyzer — This model will be specified after the residual gas analyzer SDM is defined.\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # APPENDIX 1 STATEMENT OF COMPLIANCE (Part 1)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # APPENDIX 1 STATEMENT OF COMPLIANCE\n\nContent: NOTE: This appendix was approved as an official part of SEMI E54.5 by full letter ballot procedure. This form is used to specify conformance options with respect to the SDS and common device model SEMI E5 specifications. If there are additional logical devices, they should be documented as above. NOTICE: These standards do not purport to address safety issues, if any, associated with their use. It is the responsibility of the user of these standards to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use. SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned\n\nSEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # APPENDIX 1 STATEMENT OF COMPLIANCE (Part 2)\n\nTitle: SEMI E54.5-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR THE SMART DISTRIBUTED SYSTEM (SDS) - # APPENDIX 1 STATEMENT OF COMPLIANCE\n\nContent: herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS\n\nNOTE: This document was previously designated SEMI E61. Because this document is part of a suite of documents, its designation has been reassigned for ease of reference. Please note that the technical content of this document is unchanged from the 0697 version.  \nNOTICE: This document was balloted and approved for withdrawal in 2004.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 1  Purpose (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 1  Purpose\n\nContent: This standard defines a communication specification based on the LonWorks technology specification to enable communications between intelligent devices on a sensor/actuator network (SAN) that operate according to SEMI-specified device models (common and device specific) in a semiconductor manufacturing tool. This document specifies a mapping of the SEMI common device model (CDM) onto LonWorks technology using the LonMark Interoperability Guidelines established for LonWorks devices. The LonMark Interoperability Association may incorporate into the Interoperability Guidelines any enhancements presented in this document. 1.1 Background and Motivation — The LonWorks communications system provides interconnection of smart control devices such as sensors, actuators, and controllers in a fast-response time, low-cost network for industrial use. LonWorks enables multiple devices to share a single network, thereby significantly reducing the point-to-point wiring between controllers, sensors, and actuators. The\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 1  Purpose (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 1  Purpose\n\nContent: LonWorks network communications standard (NCS) is based on the seven-layer LonTalk Protocol, implemented by the Neuron Chip, a physical layer transceiver, and an optional host processor. The LonTalk Protocol was developed by Echelon and may be freely licensed for implementation on any hardware platform. The SEMI NCS for LonWorks is based on the LonMark interoperability guidelines, which provide a framework for interoperable use of the LonTalk Protocol at layers 1-6, as well as at the application layer. Where the LonMark interoperability guidelines do not provide the functionality required by the SEMI CDM, the guidelines are extended with SEMI-specific requirements.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope\n\nContent: This document specifies a SAN communications standard, based on the LonWorks specification, that enables communication with SAN devices configured according to the SEMI SAN Common Device Model and appropriate Specific Device Model (SDM) specifications. 2.1 This document specifies the use of LonWorks technology for services that compliant intelligent devices must support in order to exchange information over this semiconductor equipment sensor/actuator network. 2.2 This document specifies the utilization of LonWorks technology to present externally visible device structure and behavior, specified in the CDM and appropriate SDMs, on a LonWorks network. 2.3 This document is used in conjunction with a SEMI standard SAN Common Device Model specification and one or more SEMI standard Specific Device Model specifications (e.g., for a mass flow controller). Together, the model documents describe the externally visible data structures and behavior of devices using LonWorks technology in a SEMI-compliant SAN system.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope\n\nContent: 2.4 This standard, together with a sensor/actuator network interoperability guideline, the sensor/actuator network common device model, one or more sensor/ actuator network specific device model documents, the LonTalk protocol specification, and the LonMark interoperability guidelines, specifies requirements for SEMI SAN implementations based on LonWorks technology. The general sensor/actuator network document architecture is shown in the Sensor/Actuator Network Common Device Model document in Figure 1. 2.5 Document Structure — The LonWorks network communications standard complies with the SEMI SAN NCS template document structure; this structure is shown in Figure 2. The standard document is composed of two main parts. The first part (Sections 1 through 8) specifies the SAN-enabling protocol as well as the presentation (i.e., mapping) of CDM object structure and behavior onto the network (referred to as the “CDM mapping”). The second part (Section 9) specifies the presentation (i.e., mapping) of SDM object\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 2  Scope\n\nContent: structure and behavior onto the network for each SEMIspecified SDM (referred to as the “SDM mapping”). Device-type-specific items, such as connector deviations (see Section 6.1), may also be noted in Section 9.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 3  Limitations (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 3  Limitations\n\nContent: 3.1 This document specifies a semiconductor equipment SAN based solely on LonWorks and is a companion document to the LonWorks protocol specification; thus, a complete specification of this standard necessarily includes the LonWorks specifications. There are other semiconductor equipment SAN communications options. The specifications for these options are not included here. 3.2 This standard specifies enhancements that provide additional capabilities over and above those currently required by the LonMark Interoperability Guidelines. In order to avoid document consistency problems, information in the LonWorks technology standard that relates to this standard is not repeated in this document. This document is limited to describing enhancements or limitations of LonWorks technology and the LonMark interoperability guidelines that are imposed by this standard. 3.3 A complete specification of the conformance testing procedure shall include the applicable LonMark interoperability conformance testing\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 3  Limitations (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 3  Limitations\n\nContent: specification. Conformance testing shall include enhancements to the LonMark guidelines required by this standard.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 4.1  SEMI Documents\n\nSEMI E30 — Generic Model for Communications and Control of SEMI Equipment (GEM)  \nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services  \nSEMI E54.1 — Standard for Sensor/Actuator Network Common Device Model  \n4.2  ISO Standard1  \nISO 7498 — Basic Reference Model for Open Systems Interconnection  \n4.3  Other Documents  \nLonTalk Protocol Specification, Echelon Corporation, 4015 Miranda Avenue, Palo Alto, CA 94304 USA  \nLonMark Layers 1–6 Interoperability Guidelines, Echelon Corporation  \nLonMark Application Layer Interoperability Guidelines, Echelon Corporation  \nNeuron Chip Data Book, Echelon Corporation  \nNeuron C Programmer’s Guide, Echelon Corporation  \nStandard Network Variable Type Master List and Programmer’s Guide, Echelon Corporation  \nStandard Configuration Parameter Type Master List and Programmer’s Guide, Echelon Corporation\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5  Terminology (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5  Terminology\n\nContent: Terminology that is common to all of the documents in this SAN series may also be defined in the Sensor Actuator Network Standard. Terminology may be reproduced here which is defined in other SEMI documents. 5.1.9 SAN — Sensor/actuator network 5.1.10 SCPT — Standard configuration parameter type 5.1.11 SDM — Specific device model 5.1.12 SNVT — Standard network variable type 5.2 Device Component Definitions — As this standard defines the presentation or mapping of CDM data structure and behavior over a network, it makes use of many of the terms in the CDM document. Table 1 provides a mapping of fundamental terminology of the CDM document into this document and the LonWorks definitions. The symbol $\\mathbf { \\tilde { \\Sigma } } ^ { \\left. \\right. } = \\mathbf { \\bar { \\Sigma } } ^ { , , }$ indicates that the definition is used exactly as specified on the CDM specification. In the following sections, additional clarification of some of these terms is provided in the context of the LonWorks protocol. Table\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5  Terminology (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5  Terminology\n\nContent: 1 Mapping of CDM to NCS Terminology\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.1  Acronyms (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.1  Acronyms\n\nContent: 5.1.1 CDM — Common device model 5.1.2 DM — DeviceManager 5.1.3 DS — Device status 5.1.4 NCS — Network communications standard 5.1.5 NV — Network variable 5.1.6 OSI — Open systems interconnect 5.1.7 OSS — Object services standard 5.1.8 SAC — Sensor, actuator, controller object 5.2.1 attribute — Attributes are either input network variables, output network variables, or configuration properties. Input and output network variables may be read and/or written by the device itself, and all attributes may be polled over the network. Additionally, input network variables and configuration properties may be updated over the network, and the receipt of such an update causes an event to be propagated to the device' s application layer. This corresponds to a RW (Read and Write) attribute of the object owning the network variable. Output network variables may not be updated over the network. This corresponds to a RO (Read Only) attribute of the object owning the network variable. When the device itself updates one\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.1  Acronyms (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.1  Acronyms\n\nContent: of its output network variables, the value of that variable may be propagated over the network to destination address(es) determined at installation time. Finally, configuration properties are attributes typically stored in non-volatile memory and preserved across device resets and power cycles.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: 5.2.3 device — A device (or node) consists of one network transceiver which implements the physical layer of the LonTalk Protocol, one Neuron Chip with associated firmware which implements the other layers of the LonTalk Protocol, and input/output hardware implementing the physical interface of the device to external sensor and/or actuator hardware. A LonWorks device may optionally contain a host processor and associated software or firmware which implements the application layer of the LonTalk Protocol. 5.2.4 device model — The device model comprises several elements which fully describe the external interface of the device for an interoperable network. The interface is made of the following pieces: a Device Manager (DM) object; a Sensor/Actuator/Controller (SAC) object; LonMark objects such as sensors, actuators, and\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: controllers; individual network variables; and configuration properties. 5.2.5 instance — Real devices may have zero or more instances of each of the defined LonMark objects and functional profiles. Object instances are identified by means of an instance number within the device. 5.2.6 object — LonMark objects are defined as a set of one or more network variable inputs and/or outputs, implemented as Standard Network Variable Types, and a set of configuration properties, implemented as Standard Configuration Property Types. LonMark objects form the basis of interoperability at the application layer. The LonMark objects describe standard formats for how information is input to, and output from, a device, and shared with other devices on the network. 5.2.7 service — Request services are represented by LonTalk messages\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: delivered to the device application. Notification services are represented by LonTalk messages originated by the device application. 5.2.8 state diagram — In a LonWorks device, state is represented by the collection of values of local and network variables of the application program. Transitions between states are the result of external events (such as the receipt of a network variable update, or other I/O event), or internal events (such as the expiration of a timer). 5.3 LonWorks-Specific Definitions — In addition to the standard data type definitions for bit, nibble, byte, and character, the LonTalk Protocol defines a set of standard data representations for use as attribute values. 5.3.1 binding — Network variables on the same or different devices may be associated together by means of a network management service\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 4)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: known as binding. Binding is permitted only if all the network variables in the set are of the same data type. The values of network variables that are bound together are propagated over the network by the LonTalk protocol. Table 2 shows the permitted combinations for updating and polling of network variables. Table 2 Updating and Polling of Network Variables NOTES: 1. When the device updates one of its own output network variables, input network variables that are bound to this output network variable receive an update from the network. 2. When the device polls one of its own input or configuration network variables, output network variables that are bound to this input or configuration network variable receive a poll from the network. 5.3.2 configuration properties — These are attributes of a LonMark object that are\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 5)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: used to configure the application-specific behavior of the object, such as sensor gain and offset, linearization table, and sample rate. These attributes are typically updated when the device is installed, configured, or calibrated, and are stored in non-volatile memory. 5.3.3 functional profile — A functional profile is a set of one or more LonMark objects, together with semantic definitions relating the behavior of the object(s) to the network variable values. The collection of functional profiles and LonMark objects in a device corresponds to the device-specific model for that device. Each type of functional profile is identified by a type number which is allocated when the profile is standardized. 5.3.4 network variable — This is a network-visible data attribute of a device, with a well-defined data type. Network\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 6)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: variables are either input variables, output variables, or configuration variables. The value of a network variable may be updated either by the device itself, or over the network by some other device. This corresponds to a SetAttribute operation. The value of a network variable may be polled over the network by some other device, or retrieved by the device itself. This corresponds to a GetAttribute operation. 5.3.5 object instance — A device’s external interface documentation specifies the type identifiers of the LonMark object instances contained within the device. Each instance is allocated an index number based on the order of the declaration of the instance in the device’s external interface documentation. This documentation may be uploaded from the device, and completely specifies the functional profiles and\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 7)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: LonMark objects contained within the device, as well as the network variables and configuration properties contained within each of the functional profiles. 5.3.6 object type — An object type is the definition of the attributes and behaviors of an abstract entity. Each type of LonMark object is identified by a type number which is allocated when the object type is standardized. A specific device type consists of instantiations of one or more of these object types. The term LonMark object is loosely used to refer to either a LonMark object type or to a specific instance of a LonMark object type. The attributes of a LonMark object are implemented as a collection of network variables of SNVT types and configuration properties of SCPT types. 5.3.7 standard configuration parameter types — These data types, also known as\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles. (Part 8)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 5.2.2  behavior — Generic object behavior is specified by the LonMark Application Layer Interoperability Guidelines. Additional object-specific behavior is specified by means of functional profiles.\n\nContent: SCPTs, provide a data type definition and a semantic behavior for the configuration properties of LonMark objects. A list of all available SCPTs and details of their definitions is provided in the SCPT Master List and Programmer’s Guide. 5.3.8 standard network variable types — These data types, also known as SNVTs, facilitate interoperability by providing a well-defined interface for communication between devices made by different manufacturers. A device may be installed in a network, and logically connected to other devices via network variables, as long as the data types match. A list of all available SNVTs and details of their definitions is provided in the SNVT Master List and Programmer’s Guide.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: The LonTalk Protocol is based on a seven-layer architecture. At each layer, there is a description of the services provided within that layer. The high level protocol architecture is shown in Figure 3. Note that Figure 3 represents a conceptual view of the device architecture. Implementations typically use the Neuron Chip and its associated firmware, which provide a conforming implementation of layers 2 through 6. The LonMark Interoperability Guidelines specify the protocol options to be used, most specifically at the physical layer (network transceivers) and at the application layer (object model). 6.1 Physical Layer — The device shall employ one of the LonMark-approved physical channels as specified in the LonMark Layers 1–6 Interoperability Guidelines. LonWorks-based SEMI SAN-compliant devices shall use, by default, a two-pin screw-terminal open pluggable connector (Weidmüller-Klippon SL2, Phoenix Combicon, or equivalent) for the network connection. The default\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: connector specification may be overridden for specific device types if special requirements apply; any such overrides shall be noted in Section 9 of this document. This connection is polarity-insensitive. The requirements of semiconductor equipment may be met by one of the twisted pair channel specifications listed below. 6.1.1 TP/XF-1250 Twisted Pair — This twisted-pair channel operates at a bit rate of 1,250kbps and supports a bus topology using transformer-coupled transceivers. 6.1.2 TP/FT-10 Twisted Pair — This twisted-pair channel operates at a bit rate of 78kbps and supports both free topology and bus topology wiring, as well as optional link power. The LonMark Layers 1-6 Interoperability Guidelines provide specific details of the characteristics of these transceivers. This document also provides specifications of wiring types and interconnection topologies to be used for guaranteed device interoperability. Note that the LonTalk Protocol supports heterogeneous\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: networks. Devices with dissimilar transceivers may be interconnected and communicate via routers or repeaters. Similarly, routers and repeaters may be used to extend a physical channel beyond the device count, wire length, or other physical limitations imposed by the chosen transceiver. Multiple physical layer protocols and data encoding methods are used in the LonTalk Protocol. Differential Manchester encoding is used on twisted pair physical layers. 6.2 Link Layer — The device shall comply with the LonTalk protocol link layer specification. This layer includes the media access control sublayer. For a number of reasons, including simplicity and compatibility with the multicast protocol, the LonTalk protocol supports a simple connectionless service. Its functions are limited to framing, frame encoding, and error detection, with no error recovery by retransmission. 6.2.1 Media Access Control Sublayer — In order to deal with a variety of media in the potential absence of\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 4)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: collision detection, the MAC (Media Access Control) sublayer employs a collision avoidance algorithm called Predictive $p$ -persistent CSMA (Carrier Sense, Multiple Access). 6.3 Network Layer — The device shall comply with the LonTalk protocol network layer specification. This layer handles packet delivery within a single domain, with no provisions for inter-domain communication. The network service is connection-less, unacknowledged, and supports neither segmentation nor re-assembly of messages. The routing algorithms employed by the network layer to learn the topology assume a tree-like network topology; routers with configured tables may operate on topologies with physical loops, as long as the communication paths are logically tree-like. In this configuration, a packet may never appear more than once at the router on the side on which the packet originated. The unicast routing algorithm uses learning for minimal overhead and no additional routing traffic. Use of\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 5)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: configured routing tables is supported for both unicast and multicast addresses. 6.4 Transport Layer — The device shall comply with the LonTalk protocol transport layer specification. The heart of the protocol hierarchy is the Transport and Session layers. A common Transaction Control sublayer handles transaction ordering and duplicate detection for both layers. The transport layer is connectionless and provides reliable message delivery to both single and multiple destinations. Authentication of the message sender’s identity is provided as an optional feature. The authentication server requires only the Transaction Control sublayer to accomplish its function. The transport and session layer messages may be authenticated using all of the LonTalk addressing modes other than broadcast. The transport layer supports end-to-end acknowledged service and an unacknowledged/ repeated service. 6.5 Session Layer — The device shall comply with the LonTalk protocol session layer\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 6)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: specification. This layer implements a simple Request-Response mechanism for access to remote servers. This mechanism provides a platform upon which application-specific remote procedure calls can be built. The LonTalk network management protocol, for example, is dependent on the Request-Response mechanism in the Session layer, even though it accesses the protocol via the application layer interface. 6.6 Presentation Layer — The device shall comply with the LonTalk protocol presentation layer specification. The Presentation layer and the Application layer taken together form the foundation of interoperability for LonTalk devices. The application layer provides all the usual services for sending and receiving messages, but it also contains the concept of network variables. The presentation layer provides information in the Application Protocol Data Unit (APDU) header for how the APDU is to be interpreted for network variable updates. This applicationindependent\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 7)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: interpretation of the data allows data to be shared among devices without prior arrangement. With agreement on which network variables are to be used for sensors, actuators, etc., intelligent components from different manufacturers may work together without prior knowledge of each other' s characteristics. 6.7 Application Layer — At the application layer, interoperability between LonWorks-based devices is facilitated through the use of LonMark objects and Standard Network Variable Types (SNVTs). LonMark objects build upon network variables and provide a concise application layer interface that incorporates semantic meaning for specific device functions. LonMark objects not only define which SNVTs to use to convey data, but also provide semantic meaning about the information being communicated. To aid in the specification of specific device models with welldefined functional behavior, collections of objects with defined relations can be aggregated and referenced as\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 8)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: functional profiles. The Application Layer also includes the LonTalk file transfer protocol, which provides segmentation and reassembly of arbitrary length files of data. This service may be used to get and set object attributes that exceed the network variable size limit of 31 bytes. 6.7.1 Object Models — The LonTalk Protocol provides an object-oriented specification for defining and addressing network variables and configuration properties, which are the representation of object attributes and events. The device shall comply with the object model specifications defined in Section 7 of this document. 6.7.2 LonMark Object Structure — The LonMark Application Layer Interoperability Guidelines define a number of object types. Each object type has a set of mandatory network variables, a set of optional network variables, a set of configuration properties (both mandatory and optional), and a manufacturer-defined section, which may be used for non-interoperable extensions to\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 9)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: the object. This is illustrated in Figure 4. This notation is defined in the LonMark Application Layer Interoperability Guidelines. The LonMark Application Layer Interoperability Guidelines provide for the definition of new Standard Network Variable Types, LonMark Object Types, and Functional Profiles. In the mapping of the SEMI CDM to the LonMark object structure in Section 7, extensions to the current SNVT list and Interoperability Guidelines are marked with an asterisk $( ^ { * } )$ . Object type numbers are specified by the guidelines; a device may consist of one instance of a node object type, and one or more instances of LonMark object types, which are assigned sequential instance numbers starting from one. 6.8 Network Management — The LonTalk Protocol defines a complete network management and diagnostic protocol for LonWorks devices. This protocol is a layer above the Session layer (request/response service) and provides mechanisms for application downloading,\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure (Part 10)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 6  Communication Protocol High Level Structure\n\nContent: device address assignment, distribution of destination addresses for implicit messaging, router configuration, and device-level diagnostics. The LonMark Application Layer Interoperability Guidelines define a device management layer for LonMark objects.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types\n\nContent: The LonMark Application Layer Interoperability Guidelines describe sensor, actuator, and controller objects. A specific device may be implemented using these objects or functional profiles based on these objects. The Common Device Model specification additionally identifies two objects (namely the Device Manager (DM) and Sensor Actuator Controller (SAC) objects) that must exist in all SEMI-compliant SAN devices. 7.1 Service Requests — Common Device Model service requests are implemented as LonTalk foreign frame messages delivered to the application using the LonTalk request/response protocol. The transaction layer protocol ensures that response messages are correlated with the original request message. Tables 3 and 4 show the LonTalk APDU format for the Request/Indication message, and for the Response/Confirmation message respectively. Table 3 SEMI SAN Request Message APDU Format Table 4 SEMI SAN Response Message APDU Format 7.2 Object Attributes — The GetAttribute and SetAttribute service\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types\n\nContent: requests may also be implemented as network variable fetch, poll, and update requests addressed to the network variable corresponding to the specified attribute. This is appropriate when application-layer service responses are not required. A GetAttribute service request may be addressed directly to any network variable as a LonTalk request message, using the LonTalk protocol network management NV fetch mechanism. A GetAttribute service request may also be addressed to an output network variable as a LonTalk NV poll message, using the NV selection mechanism. A SetAttribute service request may be addressed to an input network variable as a LonTalk NV update message, using the NV selection mechanism. The confirmation of a SetAttribute (network variable update) is provided by the acknowledged service of the LonTalk protocol transport layer. Each network variable in a LonMark object is identified by means of a self-documentation string stored in the device’s memory. This string contains the\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types\n\nContent: object id of the object to which this variable belongs, and the sequence number of the network variable within its enclosing object. For the LonWorks NCS, this sequence number is identical to the numerical sequence number specified by the CDM tag. Example: Suppose that the Device Manager object instance is declared as the second object instance in the device. It would, therefore, have object id 1. The Device Manager attribute Standard Revision Level has the tag DmA2. The self-documentation string for this network variable is, therefore, specified as $^ { \\ \\circ } ( \\varpi 1 |$ 2.” The Publish notification service is implicit when an output network variable is updated. The device propagates the value of the output network variable (equivalent to a read-only attribute) to any input network variable(s) to which it may be bound. The LonTalk protocol only supports propagation of output network variables. In CDM terminology, this means that only read-only attributes may be published. If a\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types (Part 4)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types\n\nContent: specific device model requires publication of a read/write attribute, an output network variable whose value mirrors the value of the input (read/write) network variable may be introduced to the object definition. 7.3 Sensor/Actuator/Controller Object (\\*) — The SEMI CDM SAC object coordinates the functionality of Sensor, Actuator, and Controller objects in the device. A new object type is defined, which forms part of the LonMark Functional Profile for SEMI SANcompliant devices based on LonWorks. Table 5 summarizes the services implemented by the SAC object. Table 5 SAC Object Services 7.4 Device Manager Object (\\*) — The SEMI CDM Device Manager Object combines attributes of device self-documentation with an exception reporting mechanism. A new object type is, therefore, defined with the following mandatory network variables and behaviors. This object type forms part of the LonMark Functional Profile for SEMI SAN-compliant devices based on LonWorks. Table 6 summarizes the network variables\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types (Part 5)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 7  Required Object Types\n\nContent: that implement the attributes of the Device Manager object. Table 6 Device Manager Object Network Variables 7.4.1 Device Manager Object Requests — Table 7 summarizes the services implemented by the Device Manager object. Table7 Device Manager Object Request Services\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: The Publish $\\mathrm { ( D m S 8 ) }$ ) notification service for the Device Manager exception status is implemented when the device updates the output network variable of type SNVT_exc_status. This causes the value of this network variable to be propagated across the network to other network variable(s) to which it may be bound. The implementation of the Device Manager object updates this output network variable according to the conditions specified by the Reporting Mode and Exception Status Reporting Interval configuration properties of the object. 7.4.2 Device Manager\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: Object Constant Output Network Variables — Table 6 lists the constant output network variables of the Device Manager object. The type of each of these network variables is either SNVT_str_asc, a Standard Network Variable Type that can represent from 0 to 30 ASCII characters, or SNVT_str_int, a Standard Network Variable Type that can represent from 0 to 14 international 16-bit characters. 7.4.3 Device Manager Object Configuration Properties — The DM object has two configuration properties to control exception reporting as shown in Table 6. These parameters are of Standard\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: Configuration Parameter Types (SCPTs). The type SCPT_rept_mode(\\*) contains two four-bit fields specifying the reporting method for alarms and warning conditions. For example, in Neuron C, the application programming language used on the Neuron Chip, the declaration of SCPT_rept_mode is as follows: typedef enum { REP_REQUEST $\\begin{array} { r l } { = } & { 0 , } \\\\ { = } & { 1 , } \\\\ { = } & { 2 , } \\\\ { = } & { 3 , } \\\\ { = } & { 4 , } \\\\ { = } & { 5 , } \\\\ { = } & { 6 , } \\end{array}$ REP_REQ_LATCHED REP_EVT_TRIGD_ON REP_EVT_TRIGD_ONOFF REP_TIME_TRIGD\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 4)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: REP_EVT_ON_TIME_TRIGD REP_EVT_ONOFF_TIME_TRIGD } rept_mode_t; typedef struct { rept_mode_t alarm_rept_mode :4; rept_mode_t warn_rept_mode :4; } SCPT_rept_mode; The type SCPT_exc_sts_t(\\*) is a 16-bit value representing times from 0.00 to 655.35 seconds, with a resolution of 0.01 seconds. This parameter is optional. The default reporting mode is REP_REQUEST. 7.4.4 Device Manager Object Output Network Variables — The Device Manager object has four output network variables as shown in Table 6. The data type SNVT_dev_status is an enumeration, corresponding to the device\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 5)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: status attribute defined in Table 6 of the CDM. The values of this type are defined in Table 8. The type SNVT_exc_status(\\*) is a union of two structures, depending on whether expanded or basic exception reporting mode is used. For example, in Neuron C, the declaration of SNVT_exc_status is as follows: Table 8 Device Status Enumeration Values The value DS_ABORT_1 corresponds to the Abort from Idle or Executing state, and the value DS_ABORT_2 corresponds to the Abort from Initialized/Self Testing or Self Test Exception state of the DM object. typedef union { struct { int\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 6)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: excpt_method : 1; //set to 0 int dev_spec : 7; } basic_method; struct { int excpt_method : 1; //set to 1 int warn_mfr_spec : 1; int warn_dev_spec : 1; int warn_dev_comn : 1; int resvd : 1; int alrm_mfr_spec : 1; int alrm_dev_spec : 1; int alrm_dev_comn : 1; } expanded_method; } SNVT_exc_status; The type SNVT_exc_detail(\\*) is a sequence of three structures containing arrays. The LonWorks Network Communication Standard limits the size of each of these arrays to 9 bytes, so that the type fits within the network variable size limit of 31 bytes. For example, in Neuron C, the\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 7)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: declaration of SNVT_exc_detail is as follows: typedef struct { u_char comn_exc_size; int resvd1 : 1; int real_time : 1; int communic : 1; int RAM : 1; int EEPROM : 1; int EPROM : 1; int microproc : 1; int diagnostic : 1; \\*/ int resvd2 : 1; int reset : 1; int notify_mfr : 1; int maintenance : 1; int power_inputV : 1; int power_outptV : 1; int power_resvd : 1; int power_overC : 1; u_char comn_exc_dtl[7]; 1 \\*/ u_char dev_exc_size; u_char dev_exc_dtl[9]; u_char mfr_exc_size; u_char mfr_exc_dtl[9]; } SNVT_exc_detail; 7.5 Sensor, Actuator, and Controller Objects — These\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 8)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: objects are necessarily specific to the Specific Device Models. The LonMark Application Layer Interoperability Guidelines provide a framework for defining LonMark objects, together with specifications of generic sensor and actuator objects. Specific Device Models may employ these objects, and/or may define their own objects and Standard Network Variable Types for device-specific requirements. As long as the LonMark object definition guidelines are followed, these device-specific objects may be proposed to the LonMark Interoperability Association for incorporation within\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field. (Part 9)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # The GetAttribute service may also be implemented as a network variable poll. ## The attribute ID is the numerical sequence number specified by the CDM tag for the attribute. This is the same as the LonMark member ID of the network variable in its owning object. ### The SetAttribute service may also be implemented as a network variable update. #### The Test ID parameter will be the first parameter in the Perform Diagnostics Request Parameters field.\n\nContent: the LonMark guidelines.\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 8  Protocol Compliance\n\nA method of testing protocol compliance is required to verify implementation conformance to the standard. By virtue of the fact that the intermediate layers of the LonTalk protocol are implemented in commercially available silicon, compliance verification is needed only at the physical and application layers. The LonMark Interoperability Association provides a compliance verification service to its members. When the SEMI Sensor/Actuator Network standard is incorporated into the LonMark guidelines, this service may be used to verify compliance with the SEMI guidelines.  \n8.1  Interoperability Guidelines Checklist\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information (Part 1)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information\n\nContent: 9.1 This section provides for the mapping of networkvisible specific device structure and behavior, specified in a SEMI standard SDM specification, to the LonWorks network. Each subsection is devoted to a single SDM specification (e.g., Section 9.1: Mass Flow Controller). Additional SDM mappings are added as subsections to this NCS specification according to SEMI guidelines and the guidelines of the SEMI SAN Interoperability standard. Device-type-specific items, such as overrides to the standard connector, may also be noted in these subsections. NOTICE: These standards do not purport to address safety issues, if any, associated with their use. It is the responsibility of the user of these standards to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use. SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information (Part 2)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information\n\nContent: suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility. Copyright by SEMI® (Semiconductor Equipment and Materials International), 3081 Zanker Road, San Jose, CA 95134. Reproduction of the contents in whole or in part\n\nSEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information (Part 3)\n\nTitle: SEMI E54.6-0997 (Withdrawn 0704) STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATIONS FOR LONWORKS - # 9  Specific Device Type Information\n\nContent: is forbidden without express written consent of SEMI.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX\n\nThis standard was technically approved by the Global Information & Control Committee and is the direct responsibility of the North American Information & Control Committee. Current edition approved by the North American Regional Standards Committee on July 15, 1999.  Initially available at www.semi.org August 1999; to be published September 1999.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 1  Purpose\n\n1.1  This standard defines a commu nication specification based on the Seriplex protocol to enable communications between intelligent devices on a sensor/actuator network (SAN) that operate according to SEMI specified device models (common and device specific) in a semiconductor manufacturing tool.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 1.2  Background and Motivation\n\n1.2.1  Seriplex is a component level network which provides a simple, inexpensive, fast, and deterministic means of exchanging data among control level industrial devices (e.g., sensors and actuators) and higher level devices such as controllers. Seriplex provides:  \nA solution to low-level device networking Access to intelligence present in low-level devices Networking between higher level controllers Master/Slave and Peer-to-Peer capabilities  \n1.2.2  Seriplex specifies a communic ation model and protocol as well as a complete Physical Layer definition.  \n1.2.3  This document enables commu nications between intelligent devices on a SEMI compliant SAN by providing a presentation mapping of common and specific device network visible structure and behavior to a Seriplex network.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 2  Scope (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 2  Scope\n\nContent: 2.1 This document specifies the pr otocol and services that compliant intelligent devices must support to exchange information over this semiconductor equipment sensor/actuator network. 2.2 This document specifies the ut ilization of the Seriplex protocol to present externally visible device structure and behavior, specified in the Common Device Model (CDM) and appropriate Specific Device Models (SDMs), on a Seriplex network. 2.3 This document is used in conju nction with a SEMI standard SAN Common Device Model specification, one or more SEMI standard Specific Device Model (SDM) specifications (e.g. for a mass flow controller) and the Seriplex Standard Specification. Together, they describe the Seriplex protocol, the externally visible data structures and behaviors of devices utilizing the Seriplex networking capability in a SEMI compliant SAN system. 2.4 This standard does not purport to address all of the safety issues associated with its use. It is the responsibility of the users of this standard to establish appropriate\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 2  Scope (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 2  Scope\n\nContent: safety and health practices and determine the applicablity of regulatory limitations prior to use.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 3  Limitations\n\n3.1  This document specifies a sem iconductor equipment SAN based solely on Seriplex and is a companion document to the Seriplex standard specification; thus a complete specification of this standard necessarily includes the Seriplex standard specifications. There are other semiconductor equipment SAN communications options. The specifications for these options are not included here.  \n3.2  This standard specifies enhanc ements that provide additional capabilities over and above those currently required by Seriplex.  In order to avoid document consistency problems, information in the Seriplex standard specification that relates to this standard is not repeated in this document.  This document is limited to describing enhancements or limitations to the Seriplex standard specification that are imposed by this standard.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 4.1  SEMI Standards\n\nSEMI E54.1 — Standard for Sensor/Actuator Network Common Device Model  \nSEMI E54.3 — Specification for Sensor/Actuator Network Specific Device Model for Mass Flow Device\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 4.2  Other Documents\n\nBulletin No. 8310PD9603 — Seriplex Standard Specification: August 1997, Technology Organization, Inc. Raleigh, NC, USA. 1  \nISO 7498 — Basic Reference Model for Open Systems Interconnection  \nNOTE 1: As listed or revised, all documents cited shall be the latest publications of adopted standards.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5  Terminology\n\n5.1  Terminology that is common t o all of the documents in this SAN standard may also be defined in the Sensor/Actuator Network Standard.  Terminology may be reproduced here which is defined in other SEMI documents.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.2  Abbreviations and Acronyms\n\nCDM — Common Device Model DM — Device Manager (object) NCS — Network Communication Standard OSI — Open Systems Interconnect OSS — Object Services Standard SAC — Sensor, Actuator, Controller (Object) SAN — Sensor/Actuator Network SDM — Specific Device Model STO — Seriplex Technology Organization VDC — Volts, Direct Current\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.3  Device Component Definitions\n\n5.3.1  As this standard defines the pr esentation or mapping of CDM data structure and behavior over a network, it makes use of many of the terms in the SEMI E54.1 CDM document.  Table 1 provides a mapping of fundamental terminology of the CDM document into this document and the Seriplex standard specification. Note that Column 2 contains an equal sign $\\mathbf { \\dot { \\omega } } = \\mathbf { \\dot { \\omega } }$ if the definition is used exactly as specified in the CDM specification.  \nTable 1  Mapping of CDM to NCS Terminology\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.4  Seriplex Specific Definitions (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.4  Seriplex Specific Definitions\n\nContent: class — a set of objects that all represent the same kind of system component. A class is a general-ization of an object. All objects in a class are identical in form and behavior, but may contain different attri-bute values. master/slave mode — communication over a Seriplex network that provides exclusive control of data by a “master” or “host” device. All bus input data is reported exclusively to the host, and the host has exclusive control over the states of all bus output signals, with all bus I/O devices acting as ‘slaves”. Master/Slave mode provides the typical request/ response oriented network communications. peer-to-peer mode — communication over a Seriplex network that provides sharing of bus input and output data directly among devices. This mode allows dedicated or broadcast data to be shared between a producing application and one or more consuming applications. Application specific I/O data moves though these devices. seriplex — an open protocol maintained by the Seriplex Technology\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.4  Seriplex Specific Definitions (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 5.4  Seriplex Specific Definitions\n\nContent: Organization (STO) as a standard means of interconnection for simple field devices. The Seriplex standard specification specifies OSI reference model layers 1, 2, 4 and 7 specifically the physical signaling, the media access/data link protocols, the transport capability of end-to-end transmission of data, and the application layer.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure\n\nContent: 6.1 The Seriplex protocol is loosel y based on a fourlayer architecture. These layers constitute a collapsed form of the OSI seven layer architecture, mapping into the physical, data link, transport and application layers of the Reference Model. The high level protocol architecture is shown in Figure 1. 6.1.1 Note that Figure 1 represents a conceptual view of the device architecture. Conforming implementations must implement the services defined in this specification at each layer and must appear (from the network) to have implemented this architecture, however an internal modular partitioning is not required. Implementations may sacrifice modularity in order to achieve high performance. 6.1.2 The Seriplex physical layer is fully specified in the Seriplex Standard Specification. There are guideline specified for the topology of the bus cable, length of bus cable and number of bus nodes within the system. Typical configurations include: Daisy Chain, Trunk/Dropline, Tree, Loop, Star and\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure\n\nContent: Combinations of the above. Reference guidelines are specified for the cable length and node limits determined by a system’s Clock rate and total data line capacity within a system. Bus Power Supply provides power for the Seriplex bus itself – that is, for the Seriplex bus communication circuitry within each bus device. The bus power supply normally provides a 24 VDC source for the bus. In general, the bus supply does not provide power to monitoring and control devices. 6.1.3 At the data link layer, the Serip lex standard messaging specification defines a carrier sense multiple access mechanism for media access control that supports non-destructive collision resolution and sends frames reliably. 6.1.4 The application layer is specif ied in the Seriplex standard specification and provides for the definition of Seriplex applications as a collection of addressable objects. A subset of these objects may be addressed over the network (as defined by the implementation). 6.1.5 In the remainder of\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure (Part 3)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6 Communication Protocol High Level Structure\n\nContent: this section the protocol structure is described in more detail in terms of the OSI seven layer reference model, the object model environment and network management specifications. 6.2 Physical Layer — The device shall comply with the Seriplex physical layer specification (contained in Seriplex standard specification). This includes physical signaling (levels and data rates), transceivers, node isolation, media topology, cable specifications, network connectors and taps, and power considerations (load limits, system tolerances, and power supply options). 6.3 Data Link Layer — The devic e shall comply with the Seriplex standard specification for the Data Link Layer. This includes the media access control mechanism and the logical link control mechanism. Addressing is currently limited to 8 bits of source address and 8 bits of destination address. Bitwise arbitration is used to gain access to the network in cases where multiple nodes contend for the same message bandwidth.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.4  Network Layer — There is no distinct network layer.\n\n6.5  Transport (Messaging) Layer — The device shall comply with the Seriplex standard specification for the Messaging Layer. The messaging layer provides transparent transfer of data between objects in application-entities. Some of the functionality, of this layer is implemented in the Application Layer.  Specific functions include: segmentation/re-assembly (fragmentation) for full message delivery.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer. (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer.\n\nContent: 6.7 Presentation Layer — There is no distinct presentation layer. Object addressing and data presentation in Seriplex messages are specified as part of the Seriplex object definitions and object attribute and service communication protocol. 6.8 Application Layer — The devi ce shall comply with the Seriplex application layer specification for defining and addressing objects, including their attributes and services, and enabling specified network behavior. The device shall comply with the object messaging and object model specifications included in the Seriplex standard specification. In addition the device shall comply with the object specifications defined in Section 7 of this document. 6.8.1 Object Models — The Seriplex protocol has been enhanced to provide an object-oriented specification for creating, defining and addressing objects explicitly, including their attributes and services, and creating, defining and communicating object attributes in an application dependent\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer. (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer.\n\nContent: format. The device shall comply with the object messaging and object model specifications included in the Seriplex standard specification documentation. In addition the device shall comply with the object specifications defined in Section 7 of this document. 6.8.2 Alternate Method for the Communication Transmission of Attributes — In order to take advantage of the Seriplex network’s speed and deterministic characteristics, the Seriplex Standard Specification details a mechanism of transmitting data over the network by assigning, in advance, a sequence of serial frames to be used collectively to deliver specific sensor and/or actuator attribute data. This mechanism can be utilized as an alternative to the object messaging specification of the Seriplex Standard Specification to implement the behavior associated with the GetAttribute and SetAttribute services detailed in Section 7. This mechanism may be used to provide an efficient and optimum implementation of data transmission\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer. (Part 3)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 6.6  Session Layer — There is no d istinct session layer.\n\nContent: over the network. 6.9 Network Management — The device shall comply with the Seriplex network management specifications detailed in the Seriplex Standard Specification (e.g., physical layer bit rate, master/slave and peer-to-peer network management, etc.). No (additional) network management functions are specified in this document.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: 7.1 At this time, the Seriplex Stan dard Specification does not require any specific objects to exist in a Seriplex device in order to be a compliant Seriplex device. The Seriplex Standard Specification will be extended to identify and describe objects (i.e. classes) that must exist in devices that are to be interoperable and interchangeable on a Seriplex SEMI compliant SAN network. 7.1.1 The Common Device Model s pecification identifies two objects (namely the Device Manager (DM) and Sensor Actuator Controller (SAC) objects) that must exist in all SEMI compliant SAN devices. The required object types for a SEMI compliant SAN device utilizing the network communication specification described herein, necessarily comprises the union of the above two requirements. 7.1.2 A list of required and optional object types is given in Table 2. Additional objects that are specified in a particular SDM are given identifiers in that SDM specification; Seriplex specific presentation information for these identifiers is given\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: in Section 9 of this document. 7.1.3 An embodiment of a specific d evice type, represented as an aggregation of the object types listed in Table 2, that is compliant with both the CDM specification and the Seriplex specification, is a candidate for a SEMI SDM as well as a Seriplex device definition. Conversely, all SEMI SDM’s and Seriplex device definitions specified for operation over a SEMI compliant Seriplex network must be an aggregation of the object types listed in Table 2, and be compliant with both the CDM specification and the Seriplex standard specification. 7.1.4 In the following sections the p resentation to the network of object addressing, object attributes, and object services for each of the object types listed in Table 2 is described in detail. Refer to the CDM standard to determine if the object instance attribute and service is specified as required or optional. Unless otherwise noted, all attributes and services described are instance level attributes (as opposed to class level\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 3)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: attributes). A class level attribute and service is accessed as instance number zero. 7.1.5 Note that the formats of object attributes and services are detailed in the CDM document; the presentation of object attributes and services to the Seriplex network is detailed in the tables contained in the following sub-sections and in the Seriplex standard specification. 7.2 Device Manager (DM) Object –– The DM object is the device component responsible for managing and consolidating the device operation. Each device must support one (and only one) DM object. The DM object as well as its common required and optional attributes, services and behavior are described in the CDM standard. The presentation of object instance attributes and services to the Seriplex network shall be as indicated in Table 3. 7.2.1 Note that the formats of DM o bject attributes are detailed in the CDM document; the presentation of DM object attributes to the Seriplex network is detailed in Table 3 and the Seriplex standard specification; the\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 4)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: format of DM object services is detailed in the CDM document and the Seriplex standard specification; and the presentation of the DM object services is detailed in Table 3 and the Seriplex standard specification. Table 2 Required and Optional Object Types NOTE 1: See Seriplex specification for further information; values are decimal; ‘i’, ‘j’, ‘k’, ‘l’, $\\mathbf { \\dot { m } } ^ { \\mathbf { \\prime } }$ , ‘n’, ‘o’, ‘p’, ‘q’ and ‘r’ represent arbitrary numbers (greater than or equal to 1) indicating that more than one instance may be supported. $\\bf \\cdot _ { X } ,$ is a number greater than or equal to 129 indicating that one or more application object classes may be supported. NOTE 2: See CDM specification for further information. NOTE 3: Application Dependent objects as specified in SDM. Table 3 DM Object Instance Attributes and Services 7.3 Sensor, Actuator, Controller (S AC) Object –– The SAC object is the device component responsible for coordinating the interaction of the device with the\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 5)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: sensory/actuation/control environment. Each device must support one (and only one) SAC object. The SAC object as well as its common required and optional attributes, services and behavior are described in the CDM standard. The presentation of object instance attributes and services to the Seriplex network shall be as indicated in Table 4. Table 4 SAC Object Instance Attributes and Services 7.3.1 Note that the format of SAC o bject attributes is detailed in the CDM document; the presentation of SAC object attributes to the Seriplex network is detailed in Table 3 and the Seriplex standard specification; the format of SAC object services is detailed in the CDM document and the Seriplex standard specification; and the presentation of the SAC object services is detailed in Table 3 and the Seriplex standard specification. 7.4 Assembly Object (Asm) –– The Assembly (Asm) object instances may be used to provide for grouping more than one attribute from one or more object instances is a device into a single data\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 6)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: structure for communication over the Seriplex network. The presentation of object instance attributes and services shall be as indicated in Table 5. Table 5 Assembly Object Instance Attributes and Services 7.5 Local Link Object (Lnk) –– Th e Local Link (Lnk) object instances may be used to ‘link” an attribute of one object instance to an attribute of another object instance. The presentation of object instance attributes and services are as indicated in Table 6. Table 6 Local Link Object Instance Attributes and Services 7.6 Sensor-AI Object (Sai) –– The presentation of the Sensor Analog Input (Sensor-AI) object instance attributes and services are as indicated in Table 7. Table 7 Sensor-AI Object Instance Attributes and 7.7 Sensor-EI Object (Sei) –– The presentation of the Sensor Enumerated Input (Sensor-EI) object instance attributes and services are as indicated in Table 8. Table 8 Sensor-EI Object Instance Attributes and Services 7.8 Sensor-BI Object (Sbi) –– The presentation of the Sensor Binary Input\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 7)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: (Sensor-BI) object instance attributes and services are as indicated in Table 9. Table 9 Sensor-BI Object Instance Attributes and Services 7.9 Actuator-AO Object (Aao) –– The presentation of the Actuator Analog Output (Actuator-AO) object instance attributes and services are as indicated in Table 10. Table 10 Actuator-AO Object Instance Attributes and Services 7.10 Actuator-EO Object (Aeo) –– The presentation of the Actuator Enumerated Output (Actuator-EO) object instance attributes and services are as indicated in Table 11. Table 11 Actuator-EO Object Instance Attributes and Services 7.11 Actuator-BO Object $( A b o )$ –– The presentation of the Actuator Binary Output (Actuator-BO) object instance attributes and services are as indicated in Table 12. Table 12 Actuator-BO Object Instance Attributes and Services 7.12 Controller Object $( C A )$ –– The presentation of the Controller (CA) object instance attributes and services are as indicated in Table 13. Table 13 Controller-CA Object Instance Attributes and\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types (Part 8)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 7  Required Object Types\n\nContent: Services\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 8  Protocol Compliance\n\n8.1  A method of testing protocol compliance is required to verify implementation conformance to the standard. The Seriplex Technology Organization (STO)3 has established a mechanism for self certification of devices on a Seriplex network. This certification includes procedures and reporting mechanisms to demonstrate conformance testing and interoperability testing of devices.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9  Specific Device Model Mappings\n\n9.1  This section provides for the m apping of network visible specific device structure and behavior, specified in a SEMI standard SDM specification, to the Seriplex network.  Each subsection is devoted to a single SDM specification.  Additional SDM mappings are added as sub-sections to this NCS specification according to SEMI guidelines and the guidelines of the SEMI SAN Interoperability standard.\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device (Part 1)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device\n\nContent: 9.2.1 This section details the networ k mapping required to support the Specific Device Model For Mass Flow Devices. Table 14 summarizes the Mass Flow Device Object types. Subsequent tables 15 to 24 details the attributes and services associated with each Mass Flow Device object type. Table 14 Mass Flow Device Object Types 9.3 Sensor-AI-MF –– The presenta tion of the Sensor Analog Input Mass Flow (Sensor-AI-MF) object instance attributes and services are as indicated in Table 15. Table 15 Sensor-AI-MF Object Instance Attributes and Services 9.4 Sensor-AI-AT –– The presenta tion of the Sensor Analog Input Ambient Temperature (Sensor-AI-AT) object instance attributes and services are as indicated in Table 16. Table 16 Sensor-AI-AT Object Instance Attributes and Services 9.5 Assembly-MFM The presentat ion of the Assembly Mass Flow Meter (Assembly-MFM) object instance attributes and services are as indicated in Table 17. Table 17 Assembly-MFM Object Instance Attributes and Services 9.6\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device (Part 2)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device\n\nContent: Sensor-AI-Aux–– The presenta tion of the Sensor Analog Input Auxiliary (Sensor-AI-Aux) object instance attributes and services are as indicated in Table 18. Table 18 Sensor-AI-Aux Object Instance Attributes and Services 9.7 Actuator-AO-MF –– The prese ntation of the Actuator Analog Output Mass Flow (Actuator-AO-MF) object instance attributes and services are as indicated in Table 19. Table 19 Actuator-AO-MF Object Instance Attributes and Services 9.8 Controller –– The presentation of the Controller (Ca) object instance attributes and services are as indicated in Table 20. Table 20 Controller Object Instance Attributes and Services 9.9 Local Link –– The presentation of the Local Link (Lnk) object instance attributes and services are as indicated in Table 21. Table 21 Local Link Object Instance Attributes and Services 9.10 SISO –– The presentation of th e Single Input Single Output (SISO) object instance attributes and services are as indicated in Table 22. Table 22 SISO Object Instance\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device (Part 3)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device\n\nContent: Attributes and Services 9.11 SISO-Setpoint –– The presentation of the Single Input Single Output Setpoint (SISO-Setpoint) object instance attributes and services are as indicated in Table 23. item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility. Table 23 SISO-Setpoint Object Instance Attributes and Services 9.12 Assembly-MFC –– The presentation of the Assembly Mass Flow Controller (Assembly-MFC) object instance attributes and services are as indicated in Table 24. Table 24 Assembly-MFC Object Instance Attributes and Services NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions,\n\nSEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device (Part 4)\n\nTitle: SEMI E54.7-0999 STANDARD FOR SENSOR/ACTUATOR NETWORK COMMUNICATION FOR SERIPLEX - # 9.2  Specific Device Model For Ma ss Flow Device\n\nContent: product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP\n\nThis specification was technically approved by the Global Information & Control Committee and is the direct responsibility of the European Information & Control Committee.  Current edition approved by the European Regional Standards Committee on October 7, 2004.  Initially available at www.semi.org February 2005; to be published March 2005.  Originally published September 1999.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 1  Purpose\n\n1.1  This specification is part of the SEMI Sensor/Actuator Network (SAN) suite of standards and defines a specific communications protocol based on the PROFIBUS-DP standard.  This Network Communication Standard (NCS) taken together with the SEMI Sensor/Actuator Network standard suite and the PROFIBUS standard completely and unambiguously defines an open standard providing an industry specific solution to off-the-shelf interoperability of networked devices in semiconductor manufacturing equipment.  \n1.2  PROFIBUS is a vendor independent, open fieldbus standard for a wide range of applications in manufacturing, process and building automation.  Vendor independence and openness are guaranteed by the IEC standards for PROFIBUS, IEC 61158 part 2 to part 6 and IEC 61784-1.  PROFIBUS-DP is one version of PROFIBUS which is optimized for high speed and inexpensive connectivity between automation control systems and distributed I/O at the device level.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 2  Scope (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 2  Scope\n\nContent: 2.1 This document specifies a SAN communications standard based on the PROFIBUS-DP specification that is in compliance with SEMI E54.1. As such, it specifies the protocol, services, and behavior that compliant intelligent devices must support in order to interchange information over this SAN in a method compatible with SEMI E39. 2.2 In conjunction with a SEMI standard SAN Common Device Model (CDM) specification and one or more SEMI standard Specific Device Model (SDM) specifications (e.g., for a Mass Flow Controller, In-Situ Particle Monitor Devices or Endpoint Devices), this Network Communication Standard (NCS) with the related PROFIBUS-DP standard describe the data structures, interactions, and behavior that are characteristic of the various devices on the network. This composite model forms a complete interoperability standard for communications among intelligent sensors, actuators, and controllers in semiconductor manufacturing equipment. NOTICE: This standard does not purport to address safety issues, if any,\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 2  Scope (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 2  Scope\n\nContent: associated with its use. It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 3  Limitations (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 3  Limitations\n\nContent: 3.1 This document specifies a semiconductor equipment SAN based solely on PROFIBUS-DP and is a companion document to the PROFIBUS-DP specification; thus, a complete specification of this standard necessarily includes the PROFIBUS-DP specifications. There are other semiconductor equipment SAN communications options. The specifications for these options are not included here. 3.2 The specifications within are strictly enhancements that provide additional capabilities over and above those currently required by PROFIBUS-DP. Included throughout this document, primarily in $\\ S 6$ , is information paraphrased from the PROFIBUS-DP specifications such as: protocol structure, capabilities, options, and limitations. This information is provided here for reference only and is not intended to provide specification definitions. In all such areas, refer to the PROFIBUS-DP specification documents for information. This document is limited to describing enhancements or limitations to the PROFIBUS-DP specification that are\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 3  Limitations (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 3  Limitations\n\nContent: imposed by this standard. 3.3 A complete specification of the conformance testing procedure shall include the PROFIBUS-DP protocol conformance testing specification. Conformance testing shall also include enhancements and limitations to the PROFIBUS-DP specification required by this standard.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 4  Referenced Standards (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 4  Referenced Standards\n\nContent: 4.1 SEMI Standards SEMI E39 — Object Services Standard: Concepts, Behavior, and Services SEMI E54.1 — Standard for Sensor/Actuator Network Common Device Model SEMI E54.3 — Specification for Sensor/Actuator Network Specific Device Model for Mass Flow Device SEMI E54.10 — Specification for Sensor/Actuator Network Specific Device Model for an In-Situ Particle Monitor Device SEMI E54.11 — Specific Device Model for Endpoint Devices 4.2 ISO Standard1 ISO 7498 OSI — Basic Reference Model for Open Systems Interconnection 4.3 IEC Standards2 IEC 61158-2 — Digital data communication for measurement and control – Fieldbus for use in industrial control systems – Physical Layer specification IEC 61158-3 — Digital data communication for measurement and control – Fieldbus for use in industrial control systems – Data Link Layer service definition IEC 61158-4 — Digital data communication for measurement and control – Fieldbus for use in industrial control systems – Data Link Layer protocol specification IEC 61158-5 —\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 4  Referenced Standards (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 4  Referenced Standards\n\nContent: Digital data communication for measurement and control – Fieldbus for use in industrial control systems –Application Layer service definition IEC 61158-6 — Digital data communication for measurement and control – Fieldbus for use in industrial control systems – Application Layer protocol specification IEC 61784-1 — Digital data communication for measurement and control – Profile sets for continuous and discrete manufacturing relative to fieldbus use in industrial control systems 4.4 PROFIBUS Standards3 PROFIBUS Profile Guidelines — Part 1: Identification & Maintenance Functions GSD Specification for PROFIBUS NOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5  Terminology (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5  Terminology\n\nContent: 5.1 Abbreviations and Acronyms 5.1.1 APDU — Application Protocol Data Unit 5.1.2 AREP — Application Reference Endpoint 5.1.3 ASE — Application Service Element 5.1.4 CDM — Common Device Model 5.1.5 DMPM — Data Link Mapping Protocol Machine 5.1.6 DP — Decentralized Periphery 5.1.7 DPM1 — DP-Master Class 1 5.1.8 DPM2 — DP-Master Class 2 5.1.9 DPV1 — DP Extensions Version 1 5.1.10 DSAP — Destination SAP 5.1.11 FDL — Fieldbus Data Link 5.1.12 FSPM — Fieldbus Service Protocol Machine 5.1.13 GSD — Generic Data Description 5.1.14 IM — Identification and Maintenance 5.1.15 NCS — Network Communication Standard 5.1.16 OSI — Basic Reference Model for Open Systems Interconnection (ISO 7498) 5.1.17 PDU — Protocol Data Unit 5.1.18 PHY — Physical Layer 5.1.19 SAN — Sensor/Actuator Network 5.1.20 SAP — Service Access Point 5.1.21 SDA — Send Data with Acknowledge 5.1.22 SDM — Specific Device Model 5.1.23 SDN — Send Data with No acknowledge 5.1.24 SRD — Send and Request Data with reply 5.1.25 SSAP — Source SAP 5.2 Terminology\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5  Terminology (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5  Terminology\n\nContent: Defined in Sensor/Actuator Network Common Device Model (SEMI E54.1) 5.2.1 attribute 5.2.2 behavior 5.2.3 byte 5.2.4 common device model 5.2.5 device 5.2.6 Device Manager (DM) Object 5.2.7 device model 5.2.8 instance 5.2.9 network communication standard 5.2.10 object 5.2.11 Sensor, Actuator and Controller (SAC) Object 5.2.12 service 5.2.13 specific device model 5.2.14 state diagram\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5.3  Terminology Mapping\n\n5.3.1  As this standard defines the mapping of CDM data structure and behavior over a network, it makes use of many of the terms in SEMI E54.1.  Table 1 provides a mapping of fundamental terminology of the CDM document into this document which uses the terminology of PROFIBUS.  \nTable 1  Mapping of CDM to NCS Terminology\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5.4  Terminology Defined in PROFIBUS (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5.4  Terminology Defined in PROFIBUS\n\nContent: 5.4.1 Device Data Base — an electronic file that provides a clear and comprehensive description of the characteristics of a device type in a precisely defined format. Also called a GSD File. 5.4.2 Device Profile — a Device Data Base Sheet, which specifies the characteristic features of a device, and a GSD File. 5.4.3 Data Link Mapping Protocol Machine — a protocol layer that provides an interface to the Application Layer Protocol Machines by translating service requests and responses between the Application Layer and the Fieldbus Data Link. 5.4.4 DP-Master Class 1 (DPM1) — a device that polls its assigned DP-Slave devices and handles user data exchange. 5.4.5 DP-Master Class 2 (DPM2) — a device that interacts as a configuration or diagnostic tool; usually a programming device. 5.4.6 DP-Slave — a device that is configured, managed, and polled by Master devices; a DP-Slave initiates no unsolicited communications. 5.4.7 Fieldbus Data Link — the PROFIBUS-DP model for the OSI Layer 2 definition.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5.4  Terminology Defined in PROFIBUS (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 5.4  Terminology Defined in PROFIBUS\n\nContent: 5.4.8 GSD File — see Device Data Base. 5.4.9 Service Access Point — an addressable location in a device for the directing of service requests. 5.4.10 Send Data with No acknowledge — a service request that sends data with no reply. 5.4.11 Send and Request Data with reply — a service request that sends data followed by a reply by the receiving device. 5.4.12 Slave Diagnostics — a method of retrieving a specifically formatted Data Structure that represents the diagnostic status of a DP-Slave.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure\n\nContent: 6.1 In a typical remote I/O configuration, single master architectures are used to optimize response times. In lower speed applications, multi-master architectures are also possible. PROFIBUS-DP uses the polling principle for communication (Master-Slave method). 6.1.1 Message transfer is organized in cycles. A message cycle mainly consists of a request-frame followed by a corresponding acknowledge/response-frame of the addressed station. An exception to this is the global-control function for synchronization and coordination of several remote I/O stations. 6.1.2 A brief description of the PROFIBUS-DP protocol as it relates to the ISO 7498 OSI model follows in the sections below. For protocol efficiency, PROFIBUS-DP does not define layers 3 to 6. Layer 7 is the interface between the Application Process and the communication stack. NOTE 1: The information contained in this section is for reference only. It in no way represents specifications for PROFIBUSDP. See related documentation\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure\n\nContent: for these specifications. 6.2 Physical Layer — Layer 1 6.2.1 There are three options specified for the Physical Layer (PHY): Manchester Coded Interface for Bus Powered Systems, RS-485 and Optical. See the PROFIBUS-DP standard for more information about these options. 6.3 Data Link Layer — Layer 2 6.3.1 Data Transfer 6.3.1.1 The Data Link Layer or Fieldbus Data Link (FDL) provides the functions for sending and receiving data over the network. Protocol Data Units (PDU) are packaged, delivered, and checked. Acknowledgements, responses, retries, and timeouts are used to guard against Line Protocol Errors (e.g., frame, overrun, and parity) and Transmission Protocol Errors (e.g., start and end delimiters, frame check, frame length, and response times). 6.3.1.2 A PDU is restricted to 246 bytes. In addition to the PDU, a transmission frame of variable length will contain 8 bytes of overhead; one of fixed length (8 bytes) will contain 6 bytes of overhead. Various acknowledgement and\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure (Part 3)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6  Communication Protocol High Level Structure\n\nContent: response frames are also defined. 6.3.1.3 To better understand the FDL, a summary of FDL data transfer services is given by the following list: Send Data with Acknowledge (SDA), Send Data with No Acknowledge (SDN), and Send and Request Data with Reply (SRD). 6.4 Application Layer — Layer 7 6.4.1 The PROFIBUS application layer is structured in a so called service definition and protocol specification. The service definition uses an object orientated approach and specifies the services for remote access and local functions together with their objects (the ASE is a class definition of these objects). The protocol specification includes both coding and state machines.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition (Part 1)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition\n\nContent: 6.4.2.1 Application layer services are structured to reflect the needs of flexible configurable automation devices. A Device consists of a set of modules that are placed in slots (see Figure 2). Modules are addressed uniquely by the slot number. The module view can be a hardware oriented or reflects the software structure of the DP-Slave. 6.4.3 Slot 0 is used to address the DP Slave itself. Subslot 0 represents the module and contains no IO Data. The other object classes can have instances scattered over the modules addressed by slot number. Each module can contain IO Data, Context parameter, Diagnosis information, Process Data and Alarms. Process Data is a generic class which can contain different application specific parameters accessible by read and write services. There is a set of identification and maintenance parameters defined in a PROFIBUS Guideline. 6.4.3.1 Object classes are defined for: IO Data for periodic reporting, Context for configuration, Diagnosis for event collection, Process Data\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition (Part 2)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition\n\nContent: for polled access, and Alarms for asynchronous event reporting. 6.4.3.1.1 A set of services are defined for these object classes. 6.4.3.2 IO Data is handled mainly by buffered services which allow decoupling between application and communication. Client/Server service structure (request/response) is used for Record Data, Context and Diagnosis. 6.4.4 Protocol Specification 6.4.4.1 A DP-Slave shall get a FDL address before using it in the target configuration. 6.4.4.2 To access a DP-Slave the DP-Master has to check the availability with a Slave-Diag service. To establish the context a SetPrm service is issued first. A check is done to ensure that the appropriate device type with the required resources is accessed. The following ChkCfg service. Another Slave Diag service has been used to check the establishment of the application relationship. 6.4.4.3 After this start up procedure the data exchange of IO data can be done and alarms can be signaled from the DP Slave to the DP Master. The DP Master can\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition (Part 3)\n\nTitle: SEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.2  Service Definition\n\nContent: invoke services to read and write process data that contain all kind of information e.g. produced units, calibration information, and batch information. 6.4.4.4 A context is monitored by the Data Exchange Service at the DP-Slave. The DP-Master monitors the communication by the receipt of the responses to the FDL services.\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.5  Data Link Mapping Protocol Machine (DMPM)\n\n6.4.5.1  The DMPM performs the interpretation of service requests from, and responses to, the Application Protocol Machines.  Table 2 is included to demonstrate the basic structure of the PROFIBUS-DP DMPM.  For speed and efficiency, the PROFIBUS-DP protocol defines the Service Access Point (SAP).  These are included in the transmission protocol to direct messages within the device for fast dedicated processing.  Defined are Destination SAP (DSAP) and Source SAP (SSAP).\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.6  I&M Functions\n\n6.4.6.1  “Identification & Maintenance Functions” (I&M functions) define general parameters and protocols.  The main purpose of the I&M functions is to support the end user during various scenarios of a device’s life cycle be it configuration, commissioning, parameterization, diagnosis, repair, firmware update, asset management, audit trailing, and alike.  Well-defined uniform parameters and rules should enable the manufacturers to offer devices that behave in a uniform manner These profile guidelines take into account requirements from FDA (Food & Drug Administration) and others.  The basic information offered can be characterized as “Type Plate” or “Boiler Plate”.  It consists of Manufacturer ID, Order ID, Serial Number, Hardware Revision, Software Revision, Revision Counter, and Profile ID.  \nTable 2  DMPM Primitive Functions\n\nSEMI E54.8-0305SPECIFICATION FOR SENSOR/ACTUATOR NETWORKCOMMUNICATIONS FOR PROFIBUS-DP - # 6.4.7  Service Access Point (SAP)\n\n6.4.7.1  The Service Access Point provides standard access addressing for messages.  The FDL message frame includes fields for Source and Destination SAP.  By directing a message to a particular Destination SAP, its context is immediately known.  This provides a fast and interoperable environment for device messaging.",
  "images": []
}