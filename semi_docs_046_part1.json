{
  "doc_id": "semi_docs_046",
  "chunk_id": 1,
  "content": "SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 70  BooleanValue Attribute Definition\n\n14.3.1.8  StringValue — Represents a string value.  \n14.3.1.9  StringValue Attribute Definition Table\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 71  StringValue Attribute Definition\n\n14.3.1.10  BinaryValue — Represents a binary value.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.4  Structured and Enumerated Parameter Values (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.4  Structured and Enumerated Parameter Values\n\nContent: 14.4.1 To make the data requested in a DCP available to a consumer, there must be a mechanism for representing the values of structured types such as arrays and structures in the type system being used. The specific structured types that should be represented are typically determined by the implementation technology that will be used to communicate values of the declared type (e.g., SECS-II, XML, OMG IDL, etc.). The primitive types described here should be considered a minimum set that could be refined and extended to work best with the type system in use. Any specification that translates these types into a specific type system shall define how it has mapped these primitive types into the technology-specific type system in addition to specifying any extended primitive types beyond those described here. 14.4.2 Figure 30 shows how to represent values of enumerated types, which have a discrete set of possible values, only one of which is provided by an instance of these classes (definition of the complete\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.4  Structured and Enumerated Parameter Values (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.4  Structured and Enumerated Parameter Values\n\nContent: set of possible values is out of scope for this specification). 14.4.2.1 EnumeratedStringValue — Represents a single value from a string-based enumeration.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 73  EnumeratedStringValue Attribute Definition\n\n14.4.2.3  EnumeratedIntegerValue — Represents a single value from an integer-based enumeration.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 74  EnumeratedIntegerValue Attribute Definition\n\n14.4.3  Figure 31 shows how to represent array values.  An array is an ordered collection of zero or more elements, each element of the same type.  In this case the UML $\\{ \\mathrm { X O R } \\}$ constraint is used to show that arrays must contain values of one type only (integers, reals, strings, etc.).  Note also that array values can be nested  (each element of an array can be an array).  \n14.4.3.1  ArrayValue — Represents an array of one or more values of the same type.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 75  ArrayValue Attribute Definition\n\n14.4.4  Figure 32 shows how to represent structure values.  A structure is an ordered collection of one or more elements, each element of a potentially different type.  Note also that structure values can be nested  (any element of a structure can be a structure).  \n14.4.4.1  StructureValue — Represents a structure of one or more values, each of which may be a different type.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.5  Time Format (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.5  Time Format\n\nContent: 14.5.1 This specification uses the ISO 8601 format for representing instants in time. ISO 8601 permits a variety of possible formats for the same time value, so it is necessary to establish a convention for the format used by time values in this document. 14.5.2 For representing time values, this document restricts the string representation of time to the form CCYYMM-DDThh:mm:ss.fff[- $- +$ ]hh:mm. ‘CC’ is the century (first century starts at $^ { \\cdot } \\mathrm { 0 0 ^ { \\cdot } }$ ), ‘YY’ is the year, ‘MM’ is the month, and ‘DD’ is the day, each represented as a two-digit number with leading zeroes as needed. For years beyond 9999, additional digits can be added to the ‘CC’ field. ‘T’ separates date information from time information. ‘hh’ is the hour, $\\cdot _ { \\mathrm { m m } ^ { \\prime } }$ are the minutes, ‘ss’ are the seconds, and ‘fff’ are the sub-seconds, supporting up to millisecond precision in local time. If equipment can’t measure time with millisecond precision, it shall fill in the sub-second field with zeroes as\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.5  Time Format (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 14.5  Time Format\n\nContent: appropriate up to the measurable precision (for example, if time can be measured with centi-second precision, all time values would contain a zero in the third column of the sub-second field). ‘[- $+ ] \\mathrm { { h h } : \\mathrm { { m m } } ^ { \\prime } }$ describes the difference from Coordinated Universal Time expressed as either $+$ hh:mm or –hh:mm.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15  DCP Consumer Interface\n\n15.1  Figure 33 shows the interface used to communicate data collection results and other notifications to a DCP consumer, as well as the data types of the arguments provided in each operation.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2  DCPConsumer\n\n15.2.1  The DCPConsumer interface allows the equipment to provide DCP consumers with data collection results, operational performance warnings, and DCP deactivation notifications.  All DCP consumers must implement this interface.  \n15.2.2  The notifications defined for the DCPConsumer interface are Fire-and-Forget messages.  No replies from consumers are specified.  The equipment is not required to take action on any protocol-level replies or errors received from consumers when sending these notifications, unless otherwise required by an implementation specification.  The equipment is not required to retry or buffer notifications if it determines that such notifications are not being successfully delivered to a consumer.  The equipment shall not deactivate any consumer’s DCPs if it detects an error in the delivery of these notifications.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 77  DCPConsumer Operation Definition\n\n15.2.4  NewData — The equipment shall send this notification whenever data from an active DCP is available for the consumer that activated the DCP.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2.4.1  NewData Operation Arguments\n\nTable 78  NewData Argument Definitions  \n15.2.5  PerformanceWarning The equipment shall send this notification to all consumers with ManageOnlyAuthoredDCPs privilege or higher whenever operational performance has degraded below a supplierspecified threshold (see Section 13.1.7).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2.5.1  PerformanceWarning Operation Arguments\n\nTable 79  PerformanceWarning Argument Definitions  \n15.2.6  PerformanceRestored The equipment shall send this notification to all consumers with ManageOnlyAuthoredDCPs privilege or higher when operational performance has returned above a supplierspecified threshold (see Section 13.1.7).\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2.6.1  PerformanceRestored Operation Arguments\n\nTable 80  PerformanceRestored Argument Definitions  \n15.2.6.1.1  PerformanceStatus — This class, shown in Figure 33, describes the current status of the equipment’s ability to perform its intended function.  It includes the time the performance status was last evaluated, whether or not the performance is below the equipment-defined threshold, and a description of the current status.  See Section 13 for further details.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 82  PerformanceStatus Association Definition\n\n15.2.6.1.4  ActiveJob — This class, shown in Figure 33, represents an active job that can be uniquely identified among all active jobs on the equipment.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 83  ActiveJob Attribute Definition\n\n15.2.6.1.6  AffectedSystem — This class, shown in Figure 33, represents an equipment component that is negatively impacted by the decrease in performance, and provides a description of how it is being affected.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2.6.1.7  AffectedSystem Attribute Definition Table\n\nTable 84  AffectedSystem Attribute Definition  \n15.2.6.2  DCPDeactivation — The equipment shall send this notification to a consumer whenever one or more DCPs that were activated by that consumer have been deactivated.  Note that the consumer should make no assumption regarding the timing of the receipt of this notification and the receipt of the last transmitted data for any deactivated DCPs provided in the notification.  The consumer may receive one or more data collection reports from the named DCPs after receiving this notification.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 15.2.6.2.1  DCPDeactivation Operation Arguments\n\nTable 85  DCPDeactivation Argument Definitions  \n15.2.6.3  DCPHibernation — The equipment shall send this notification to a consumer whenever one or more DCPs that were activated by that consumer are going into the hibernating state.  Note that the consumer should make no assumption regarding the timing of the receipt of this notification and the receipt of the last transmitted data for any deactivated DCPs provided in the notification.  The consumer may receive one or more data collection reports from the named DCPs after receiving this notification.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # Table 86  DCPHibernation Argument Definitions\n\n15.2.6.3.2  DCPHibernated — This class, shown in Figure 33, describes a persistent DCP that the equipment has placed in hibernation.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # 16  Requirements for Compliance\n\n16.1  Table 88  provides a checklist for Data Collection Management compliance.  Note that the DCP State Models described in Section 12 are internal to the equipment and have no SEMI-specified technology mapping.  \nTable 88  Data Collection Management Compliance Statement\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # RELATED INFORMATION 1 DATA COLLECTION CONTEXT\n\nNOTICE:  This related information is not an official part of SEMI Exxx and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: R1-1.1 This Related Information discusses some of the key requirements and expectations of the equipment for applications that make use of Data Collection Management services for performing near-real-time analysis of time series (trace) data from equipment. The essential goal is for the equipment to provide sufficient, correct, and timely contextual data to such applications in order to facilitate correct and timely analysis of trace data. R1-1.2 Typical Analysis Application Example Figure R1-1 Typical Time-Series Data Analysis Example R1-1.2.2 Consumers that collect trace data from the equipment need to be able to quickly make sense of incoming data in order to determine the proper analysis and/or limits to apply. In addition to the raw low level data values from sensors, actuators, and other devices of interest, applications need to be able to quickly determine the executing context associated with that data. The equipment needs to be able to provide sufficient context information to the application to allow it to determine at all times:\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: What module is the data coming from? What recipe is that module running? What step is that recipe executing? What material is in that module? What job is responsible for that material? R1-1.2.3 In addition to the information in Section R1-1.2.2 , typical consumers must also know the manufacturing execution context (for example, whether this an engineering lot, an experimental run, a characterization, a rework lot, a production run, a specific product, etc.) in order to properly analyze data from the equipment. While it is the consumer’s responsibility to manage this manufacturing context data, it is the equipment’s responsibility to provide the context information described in Section R1-1.2.2 . R1-1.2.4 In many cases, this context data may consist of a non-trivial amount of descriptive information. It is typically not practical for all of this contextual data to be provided with each TraceReport sent by the equipment. Trace data may also be collected at rates up to, for example, $1 0 \\mathrm { H z }$ ; much more frequently than the rate\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: at which the job-related context information changes. Because of this situation, it is normally sufficient for the equipment to communicate context changes when they happen by defining events that are generated whenever any of the context described in Section R1-1.2.2 changes (see Figure R1-1). R1-1.2.5 Along with such events, the equipment must also make available sufficient data with those events to completely describe the new context, as well as providing a way for consumers to query the current context at any time in an ad-hoc fashion. Additionally, some subset of this context data can be made available for inclusion with each TraceReport, such as the id’s of the material at each location in the equipment. R1-1.2.6 Some of this context data can be provided directly through the SEMI Data Collection Management and related specifications. Specifically, the Data Collection Management specification requires that all parameters, events, and exceptions have both a source and a name. The source can be used to specify the physical equipment\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 4)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: component that produces the parameter, event, or exception. This information can be made known to consumers, for example, through the use of SEMI E120 (Common Equipment Model) and E125 (Equipment Self Description). In this way, consumers are at all times aware of the physical equipment component from which the data, event, or exception is coming. What carrier did the material originate from? What job/rcpid is processing thematerial? Where is the material? Figure R1-2 SEMI Standard Context Data R1-1.2.7 Additional context data can be obtained from the SEMI $3 0 0 \\mathrm { m m }$ standards (SEMI E40, SEMI E94, and SEMI E90 data are shown as examples in Figure R1-2). However, at the time of this writing, some context data is not available in standard form, yet is often essential for most analysis applications. For example, SEMI E40 does not provide a means for consumers to determine which sub-recipes might be executing on each module of the equipment, and does not provide a way for consumers to determine which recipe step is currently being\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 5)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: executed on each sub-recipe. This information is essential for fault detection applications, which need to analyze and apply limits to process data that may change depending on which recipe step is being executed on which component of the equipment. Unless and until this information becomes standardized, equipment suppliers will need to provide this information to applications using proprietary events, exceptions and parameters. R1-1.2.8 Putting the standards data together with equipment-specific data to cover the gaps, we can see how a consumer can take an incoming Data Collection Management TraceReport and determine much of the processing context. A typical example might involve the following high-level steps: • Inspect the self-descriptive information available from the equipment via SEMI E125 to identify the low-level sensor/actuator and process Parameters from each SEMI E120 equipment component that are of significance to the purpose of the analysis application (diagnostic, fault detection, etc.) Create a DataCollectionPlan that\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 6)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: includes at least one TraceRequest at the desired frequency. The TraceRequest should include a ParameterRequest for each Parameter of interest from the previous step. Inspect the E125 data from the equipment to determine the SEMI standard carrier management, control job, process job, and substrate tracking events, exceptions, and available Parameters that provide key material and processing status context. • In the DataCollectionPlan created earlier, include an EventRequest and ExceptionRequest for each context event and exception of interest. For each EventRequest, include a ParameterRequest for each context data variable available for that event. Inspect the E125 data from the equipment to determine the supplier-defined events and data that communicate what sub-recipes and which steps are executing on which components of the equipment, and any other supplierspecific context data of significance to the purpose of the analysis application. In the DataCollectionPlan created earlier, include an EventRequest and ExceptionRequest for each\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 7)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: context event and exception identified in the previous step. For each EventRequest, include a ParameterRequest for each context data variable available for that event. Submit the DCP to the equipment using the DataCollectionManager “DefinePlan” operation, and activate using the “ActivatePlan” operation to begin receiving trace data and context events/exceptions. R1-1.2.9 Once such a DCP has been activated, consumers can begin tracking the location of each substrate on the equipment, so that their physical locations are always known. Since timestamps of all data are referenced to the tool, synchronization of the events and data can be correlated correctly. R1-1.2.10 Events from the equipment that inform what recipes are executing on which modules, and which step is currently executing can be tracked and stored by the consumer, so it is always known which module is executing which step in which recipe on which substrate. R1-1.2.11 By tracking Control and Process Job events and data, a consumer can always determine to which job a given\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview (Part 8)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R1-1  Overview\n\nContent: substrate at a given location belongs. R1-1.2.12 The consumer is responsible for managing the manufacturing context of each job, and so knows which analysis needs to be performed on data from material from those jobs. R1-1.2.13 Finally, because the consumer knows what the contents of the DCP are, it is also known which physical equipment component produces each trace data variable. So, the data from a TraceReport can be correlated to a physical equipment component, for which the consumer already knows the material located at that component, the recipe executing on the component, the step the recipe is executing, the job the material belongs to, and the manufacturing context for that job. Provided all of this information is provided correctly and in a timely fashion, a consumer can always determine which analysis and/or control limits need to be applied to each TraceReport.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # RELATED INFORMATION 2 UML TERMINOLOGY\n\nNOTICE:  This related information is not an official part of SEMI E125 and was derived from the work of the originating committee.  This related information was approved for publication by full letter ballot procedures.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 1)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: R2-1.1 In order to help with understanding terminology used in conjunction with object technology, this section shares excerpts from the glossary of the OMG standard for UML — the predominant modeling notation. R2-1.2 These definitions are taken from B.2 Glossary of Terms of version 1.4 of the OMG UML specification, 01- 09-67, available from http://www.omg.org/technology/documents/modeling_spec_catalog.htm. R2-1.2.1 abstract class — a class that cannot be directly instantiated. Contrast: concrete class. R2-1.2.2 aggregate [class] — a class that represents the “whole” in an aggregation (whole-part) relationship. See: aggregation. R2-1.2.3 aggregation — a special form of association that specifies a whole-part relationship between the aggregate (whole) and a component part. See: composition. R2-1.2.4 association — the semantic relationship between two or more classifiers that specifies connections among their instances. R2-1.2.5 attribute — a feature within a classifier that describes a range of values that instances of the classifier may\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 2)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: hold. R2-1.2.6 cardinality — the number of elements in a set. Contrast: multiplicity. R2-1.2.7 child — in a generalization relationship, the specialization of another element, the parent. See: subclass, subtype. Contrast: parent. R2-1.2.8 class — a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. See: interface. R2-1.2.9 class diagram — a diagram that shows a collection of declarative (static) model elements, such as classes, types, and their contents and relationships. R2-1.2.10 classification — the assignment of an object to a classifier. See: dynamic classification, multiple classification, static classification. R2-1.2.11 classifier — a mechanism that describes behavioral and structural features. Classifiers include interfaces, classes, datatypes, and components. R2-1.2.12 composition — a form of aggregation which requires that a part instance be included in at most\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 3)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: one composite at a time, and that the composite object is responsible for the creation and destruction of the parts. Composition may be recursive. Synonym: composite aggregation. R2-1.2.13 concrete class — a class that can be directly instantiated. Contrast: abstract class. R2-1.2.14 constraint — a semantic condition or restriction. Certain constraints are predefined in the UML, others may be user defined. Constraints are one of three extensibility mechanisms in UML. See: tagged value, stereotype. R2-1.2.15 dependency — a relationship between two modeling elements, in which a change to one modeling element (the independent element) will affect the other modeling element (the dependent element). R2-1.2.16 diagram — a graphical presentation of a collection of model elements, most often rendered as a connected graph of arcs (relationships) and vertices (other model elements). UML supports the following diagrams: class diagram, object diagram, use case diagram, sequence diagram, collaboration diagram, state diagram, activity diagram, component\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 4)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: diagram, and deployment diagram. R2-1.2.17 element — an atomic constituent of a model. R2-1.2.18 feature — a property, like operation or attribute, which is encapsulated within a classifier, such as an interface, a class, or a datatype. R2-1.2.19 generalization — a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element and contains additional information. An instance of the more specific element may be used where the more general element is allowed. See: inheritance. R2-1.2.20 inheritance — the mechanism by which more specific elements incorporate structure and behavior of more general elements related by behavior. See: generalization. R2-1.2.21 instance — an entity that has unique identity, a set of operations that can be applied to it, and state that stores the effects of the operations. See: object. R2-1.2.22 interface — a named set of operations that characterize the behavior of an element. R2-1.2.23 interface inheritance — the\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 5)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: inheritance of the interface of a more general element. Does not include inheritance of the implementation. Contrast: implementation inheritance. R2-1.2.24 message — a specification of the conveyance of information from one instance to another, with the expectation that activity will ensue. A message may specify the raising of a signal or the call of an operation. R2-1.2.25 method — the implementation of an operation. It specifies the algorithm or procedure associated with an operation. R2-1.2.26 model [MOF] — an abstraction of a physical system with a certain purpose. See: physical system. Usage note: In the context of the MOF specification, which describes a meta-metamodel, for brevity the metametamodel is frequently referred to as simply the model. R2-1.2.27 multiple inheritance — a semantic variation of generalization in which a type may have more than one supertype. Contrast: single inheritance. R2-1.2.28 multiplicity — a specification of the range of allowable cardinalities that a set may assume. Multiplicity specifications may be\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 6)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: given for roles within associations, parts within composites, repetitions, and other purposes. Essentially a multiplicity is a (possibly infinite) subset of the non-negative integers. Contrast: cardinality. R2-1.2.29 object — an entity with a well-defined boundary and identity that encapsulates state and behavior. State is represented by attributes and relationships, behavior is represented by operations, methods, and state machines. An object is an instance of a class. See: class, instance. R2-1.2.30 object diagram — a diagram that encompasses objects and their relationships at a point in time. An object diagram may be considered a special case of a class diagram or a collaboration diagram. See: class diagram, collaboration diagram. R2-1.2.31 operation — a service that can be requested from an object to effect behavior. An operation has a signature, which may restrict the actual parameters that are possible. R2-1.2.32 package — a general purpose mechanism for organizing elements into groups. Packages may be nested within other packages.\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 7)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: R2-1.2.33 parent — in a generalization relationship, the generalization of another element, the child. See: subclass, subtype. Contrast: child. R2-1.2.34 qualifier — an association attribute or tuple of attributes whose values partition the set of objects related to an object across an association. R2-1.2.35 relationship — a semantic connection among model elements. Examples of relationships include associations and generalizations. R2-1.2.36 role — the named specific behavior of an entity participating in a particular context. A role may be static (for example, an association end) or dynamic (for example, a collaboration role). R2-1.2.37 single inheritance — a semantic variation of generalization in which a type may have only one supertype. Synonym: multiple inheritance [OMA]. Contrast: multiple inheritance. R2-1.2.38 subclass — in a generalization relationship, the specialization of another class; the superclass. See: generalization. Contrast: superclass. R2-1.2.39 subtype — in a generalization relationship, the specialization of another\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 8)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: type; the supertype. See: generalization. Contrast: supertype. R2-1.2.40 superclass — in a generalization relationship, the generalization of another class; the subclass. See: generalization. Contrast: subclass. R2-1.2.41 supertype — in a generalization relationship, the generalization of another type; the subtype. See: generalization. Contrast: subtype. R2-1.2.42 type — a stereotyped class that specifies a domain of objects together with the operations applicable to the objects, without defining the physical implementation of those objects. A type may not contain any methods, maintain its own thread of control, or be nested. However, it may have attributes and associations. Although an object may have at most one implementation class, it may conform to multiple different types. See: implementation class. Contrast: interface. R2-1.2.43 visibility — an enumeration whose value (public, protected, or private) denotes how the model element to which it refers may be seen outside its enclosing namespace. NOTICE: SEMI makes no warranties or\n\nSEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary (Part 9)\n\nTitle: SEMI E134-0305SPECIFICATION FOR DATA COLLECTION MANAGEMENT - # R2-1  Glossary\n\nContent: representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM)\n\nThis provisional specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee. Current edition approved by the North American Regional Standards Committee on December 10, 2004.  Initially available at www.semi.org February 2005; to be published March 2005.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table of Contents\n\n1 Purpose .. 5\n1.1 SOAP Implementation Mapping .\n2 Scope ... 5\n2.1 Specification Scope .. 5\n3 Limitations..\n3.1 Provisional Specification.... 5\n4 Referenced Standards . 5\n4.1 SEMI Standards... 5\n4.2 OMG Standards... 5\n4.3 W3C Standards.. 5\n4.4 Other Specifications . .6\n5 Terminology ... .6\n5.1 Abbreviations and Acronyms.. 6\n5.2 Definitions And Acronyms . 6\n6 Conventions... .6\n6.1 Translating UML to XML Schema... 6\n6.2 Documenting XML Schema and WSDL Files ...\n6.3 Documenting XML Schema With Diagrams.... .8\n6.4 XML Schema Sample ... .. 9\n6.5 Translating UML to WSDL.. 10\n7 Mapping of E134 UML to XML Schema and WSDL 11\n7.1 WSDL Organization . .11\n7.2 DataCollectionManager.. ..12\n7.3 DCPConsumer. 49\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Figures (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Figures\n\nContent: Figure 1 XML Schema Example Diagram . .9 Figure 2 XML for Sample .. ..10 Figure 3 XML Schema and WSDL File Organization . ..11 Figure 4 WSDL and XML Schema Files for E134. ..11 Figure 5 Mapping the DataCollectionManager to a WSDL portType.... ..15 Figure 6 DefinePlanRequest .. ..16 Figure 7 DataCollectionPlanType . ..17 Figure 8 EventRequestType ... ..18 Figure 9 TraceRequestType.. ..19 Figure 10 DefinePlanResponseType .... ..21 Figure 11 InvalidPlanType . .22 Figure 12 InvalidEventRequestType .. .22 Figure 13 InvalidTraceRequestType ... ..24 Figure 14 GetDefinedPlanIdsRequest ... ..25 Figure 15 GetDefinedPlanIdsResponse .. .26 Figure 16 GetPlanDefinitionRequest..... .27 Figure 17 GetPlanDefinitionResponse .. 27 Figure 18 ActivatePlanRequest . 29 Figure 19 ActivatePlanResponse.. .29 Figure 20 GetActivePlanIdsRequest.... .31 Figure 21 GetActivePlanIdsResponse .. .31 Figure 22 DeactivatePlanRequest.. .32 Figure 23 DeactivatePlanResponse .. .33 Figure 24 DeletePlanRequest . .34 Figure 25\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Figures (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Figures\n\nContent: DeletePlanResponse . .35 Figure 26 GetParameterValuesRequest ... .36 Figure 27 GetParameterValuesResponse.... .37 Figure 28 ParameterValueType... .38 Figure 29 FieldValueType.. ..42 Figure 30 CompositeValueType. ..43 Figure 31 GetObjTypeInstanceIdsRequest.. ..44 Figure 32 GetObjTypeInstanceIdsResponse.. ..45 Figure 33 GetCurrentPerformanceStatusRequest ... ..47 Figure 34 GetCurrentPerformanceStatusResponse..... ..47 Figure 35 NewDataNotification .. .51 Figure 36 EventReportType . .52 Figure 37 ExceptionReportType.... .53 Figure 38 CollectedDataType... ..55 Figure 39 PerformanceWarningNotification .. ..56 Figure 40 PerformanceRestoredNotification ... ..57 Figure 41 DCPDeactivationNotification ... ....58 Figure 42 DCPHibernationNotification. .59\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: Table 1 Example Translation Table. Table 2 Example Translation Table for Operation Input/Output Arguments ... Table 3 Example Schema/WSDL Document Description Table. .7 Table 4 Altova XMLSPY Schema Diagram Symbols. ..8 Table 5 Example Interface WSDL Port Type Table.. ..10 Table 6 Example Interface WSDL Binding Table.. ..10 Table 7 Example Operation Binding Table . ..11 Table 8 Example PortType Operation Table .. ..11 Table 9 SEMI E134 to SEMI E132 Privilege mapping. .13 Table 10 Source/Event/Exception/Parameter Naming Convention.... ..13 Table 11 SEMI E134 Error Codes.. ..14 Table 12 XML Schema.. .14 Table 13 DataCollectionManager PortType Definitions . ..14 Table 14 DataCollectionManager Binding Definitions .. .14 Table 15 DefinePlan Operation Binding ... ..16 Table 16 DefinePlan PortType Operation . ...16 Table 17 DataCollectionManagement Binding ..16 Table 18 Translation Table for Input Arguments for the DefinePlan Operation ... ..17 Table 19 Translation Table for DataCollectionPlanType . ..17 Table\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: 20 Translation Table for EventRequestType . ....18 Table 21 Translation Table for ParameterRequestType . ..18 Table 22 Translation Table for ExceptionRequestType .18 Table 23 Translation Table for TraceRequestType . ..19 Table 24 Translation Table for EventTriggerType. ..19 Table 25 Translation Table for ExceptionTriggerType .. .20 Table 26 Translation Table for ParameterRequestType .. .20 Table 27 Translation Table for Output Arguments for the DefinePlan Operation . 20 Table 28 Translation Table for DCPDefinedTyp 21 Table 29 Translation Table for InvalidPlanTyp 21 Table 30 Translation Table for InvalidEventRequestType 22 Table 31 Translation Table for InvalidExceptionRequestType . 23 Table 3 able for InvalidParameterRequestType . 23 Table 3 able for InvalidTraceRequestTyp Table 3 InvalidTriggerTyp Table 3 r InvalidIntervalType.. Table 3 validCycleType.. Table ration Binding .. Table ype Operation. ment Binding 25 able for Output Arguments for the GetDefinedPlanIds Operation. 26 n Operation Binding ..\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: 26 n PortType Operation .... 26 nagement Binding .. 7 able for Input Arguments for the GetPlanDefinitionOperation..... 27 able for Output Arguments for the GetPlanDefinitionOperation ... 28 le for NoSuchPlanType ........ 28 peration Binding.. 28 ype Operation 28 ement Binding . 29 T ble for Input Arguments for the ActivatePlanOperation 29 T le for Output Arguments for the GetDefinedPlanIds Operation.... 30 T ble for DCPActivatedType.. 30 T e Ids Operation Binding . .30 Tabl PlanIds PortType Operation . .30 Table lectionManagement Binding .. .31 Table anslation Table for Output Arguments for the ActivatePlan Operation..... 31 Table ivatePlan Operation Binding .. 32 Table 5 Deact ivatePlan PortType Operation . 32 Table 5 DataCollectionManagement Binding ... 32 Table 60 ranslation Table for Input Arguments for the DeactivatePlan Operation.. 32 Table 61 Translation Table for Output Arguments for the DeactivatePlan Operation . 33 Table 6 Translation Table for DeactivatePlanResponseType.... 33 Table 63\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 4)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: Translation Table for DCPNotActiveType.. 34 Table 64 DeletePlan Operation Binding.. 34 Table 65 DeletePlan PortType Operation. 34 Table 66 DataCollectionManagement Binding . 34 Table 67 Translation Table for Input Arguments for the DeletePlan Operation..... 35 Table 68 Translation Table for Output Arguments for the DeletePlanOperation..... 35 Table 69 Translation Table for DCPDeletedType ....... 35 Table 70 GetParameterValues Operation Binding ....... 36 Table 71 GetParameterValues PortType Operation .... 36 Table 72 DataCollectionManagement Binding ... 36 Table 73 Translation Table for Input Arguments for the GetParameterValues Operation .... 36 Table 74 Translation Table for Output Arguments for the GetParameterValues Operation .... 37 Table 75 Translation Table for ParameterValueType..... ..38 Table 76 SEMI E134 and SEMI E125.1 Type Description Mapping Table..... .39 Table 77 Translation Table for F4 & F8.. ..39 Table 78 Translation Table for I1, I2, I4 & I8 ... .......40 Table 79 Translation Table\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 5)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: for S ... ..40 Table 80 Translation Table for B.. 40 Table 81 Translation Table for EI... .40 Table 82 Translation Table for ES.. 40 Table 83 Translation Table for B64.. 0 Table Table 85 NoValueReasonEnum Enumerated Values .41 Table 86 Translation Table for FieldValueType . 41 Table 87 GetObjTypeInstanceIds Operation Binding ..... .44 Table 88 GetObjTypeInstanceIds PortType Operation . .44 Table 89 DataCollectionManagement Binding . ..44 Table 90 Translation Table for Input Arguments for the GetObjTypeInstanceIds Operation ...... .44 Table 91 Translation Table for ObjTypeRequestType ... .45 Table 92 Translation Table for Output Arguments for the GetObjTypeInstanceIds Operation . 45 Table 93 Translation Table for ObjTypeResultType. .45 Table 94 Translation Table for ObjTypeInstanceType... ..46 Table 95 Translation Table for ObjTypeRequestErrorType... ..46 Table 96 GetCurrentPerformanceStatus Operation Binding .. ...46 Table 97 GetCurrentPerformanceStatus PortType Operation... .46 Table 98\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 6)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: DataCollectionManagement Binding . ..46 Table 99 Translation Table for Output Arguments for the GetCurrentPerformanceStatus Operation .. .47 Table 100 Translation Table for PerformanceStatusType . .48 Table 101 Translation Table for ActiveJobType . .48 Table 102 Supported Job Type Table for JobTypeEnumType ... ..48 Table 103 Translation Table for AffectedSystemType.. .48 Table 104 XML Schema.. .49 Table 105 DCPConsumer PortType Definitions ..... .49 Table 106 DCPConsumer Binding Definitions .. .49 Table 107 NewData Operation Binding .. ..50 Table 108 NewData PortType Operation . .50 Table 109 DCPConsumer Binding.. ..50 Table 110 Translation Table for Input Arguments for the NewDataNotification Operation.. .51 Table 111 Translation Table for DataCollectionReportType . .51 Table 112 Translation Table for ReportSelectorType . .52 Table 113 Translation Table for EventReportType . .53 Table 114 Translation Table for ExceptionReportType . .54 Table 115 Translation Table for TraceReportType . .54 Table 116\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 7)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: Translation Table for CollectedDataType .. ..55 Table 117 PerformanceWarning Operation Binding . .56 Table 118 PerformanceWarning PortType Operation ... ..56 Table 119 DCPConsumer Binding. ..56 Table 120 Translation Table for Input Arguments for the PerformanceWarning Operation... ..57 Table 121 PerformanceRestored Operation Binding.. .57 Table 122 PerformanceRestored PortType Operation .. .57 Table 123 DCPConsumer Binding.. .57 Table 124 Translation Table for Input Arguments for the PerformanceRestored Operation.... .58 Table 125 DCPDeactivation Operation Binding ... ....58 Table 126 DCPDeactivation PortType Operation . ..58 Table 127 DCPConsumer Binding.. ..58 Table 128 Translation Table for Input Arguments for the DCPDeactivation Operation. ..59 Table 129 DCPHibernation Operation Binding... ..59 Table 130 DCPHibernation PortType Operation... .59 Table 131 DCPConsumer Binding.. .59 Table 132 Translation Table for Input Arguments for the DCPHibernation Operation . ..60 Table 133 Translation Table for\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables (Part 8)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # List of Tables\n\nContent: DCPHibernatedType.. .60\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 1.1 SOAP Implementation Mapping\n\n1.1.1 The purpose of this specification is to provide an implementation mapping of the SEMI E134 specification for Data Collection Management to the SOAP 1.1 protocol.  This document provides a description of the XML Schema data types used to support the UML classes defined in SEMI E134, and also describes the WSDL port type and binding definitions used to support the operations defined by the interfaces specified in SEMI E134.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 2.1 Specification Scope\n\n2.1.1 The scope of this specification is the faithful representation of the DCM model in an XML Schema and corresponding WSDL port types and bindings.  It will not add new domain information or concepts to the SEMI E134 model.  The only additions made are those needed to render useful WSDL or XML Schema.  \n2.1.2 This specification requires SEMI E132 authentication, and defines requirements for the application of SEMI E132 concepts to the SEMI E134 specification.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 3.1 Provisional Specification\n\n3.1.1 This specification is provisional pending the approval of the SEMI specifications Common Components (SEMI E138), SEMI E120.1, SEMI E125.1, and SEMI E132.1.  This specification relies on XML Schema types defined by these specifications, and cannot be fully implemented without these types.  Finalization of these specifications is a condition for the removal of the provisional status of this document.  \n3.1.2 This specification is provisional pending approval of the SEMI specification for Units for the Semiconductor Industry.  This specification relies on the unit of measure symbols defined in that specification.  Finalization of this specification is a condition for the removal of the provisional status of this document.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 4.1 SEMI Standards (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 4.1 SEMI Standards\n\nContent: SEMI E121 — Guide for Style & Usage of XML for Semiconductor Manufacturing Applications SEMI E120.1 — XML Schema for the Common Equipment Model SEMI E132.1 — Specification for SOAP Implementation of Equipment Client Authentication and Authorization SEMI E125.1 — Specification for SOAP Implementation of Equipment Self Description SEMI E138 — XML Semiconductor Common Components SEMI Specification for the Representation of Measurement Units in XML 4.2 OMG Standards1 Unified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-67, (http://www.omg.org/technology/documents/modeling_spec_catalog.htm). 4.3 W3C Standards2 Extensible Markup Language (XML) 1.0 (Second Edition) W3C, 6 October 2000 (http://www.w3.org/TR/2000/REC-xml-20001006/). Namespaces in XML — W3C, 14 January 1999 (http://www.w3.org/TR/1999/REC-xml-names-19990114/). XML Schema Part 0: Primer — W3C, 2 May 2001 (http:// www.w3.org /TR/xmlschema-0/). XML Schema Part 1: Structures — W3C, 2 May 2001 (http:// www.w3.org\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 4.1 SEMI Standards (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 4.1 SEMI Standards\n\nContent: /TR/xmlschema-1/). XML Schema Part 2: Datatypes – W3C, 2 May 2001 (http:// www.w3.org /TR/xmlschema-2/). XML Path Language (Xpath) — W3C, 16 November 1999 (http:// www.w3.org /TR/xpath/). Web Services Description Language (WSDL) 1.1 — W3C Note, (http://www.w3.org/TR/wsdl) Simple Object Access Protocol (SOAP) 1.1 — W3C Note, (http://www.w3.org/TR/2000/NOTE-SOAP-20000508/) 4.4 Other Standards Secure Sockets Layer (SSL) (available from http://wp.netscape.com/eng/ssl3/draft302.txt) Web Services Interoperability (WS-I): Basic Profile Version 1.0a (available from http://www.wsi.org/Profiles/Basic/2003-08/BasicProfile-1.0a.html) NOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 5  Terminology\n\n5.1 Abbreviations and Acronyms  \n5.1.1 SOAP — Simple Object Access Protocol  \n5.1.2 UML — Unified Modeling Language  \n5.1.3 W3C — World Wide Web Consortium  \n5.1.4 WSDL — Web Service Description Language  \n5.1.5 XML — eXtensible Markup Language  \n5.2 Definitions  \n5.2.1 UML (Unified Modeling Language) — a notation for representing object-oriented designs and views created by Booch, Rumbaugh, and Jacobson in order to merge their three popular notations plus aspects of other existing notations into a single object-oriented notation intended to be usable by all.  \n5.2.2 XML (eXtensible Markup Language) — a markup language used for representing data rich with context and content in documents and in communications.  XML is an extension of SGML, a document-oriented markup language.  It was created by W3C for use on the Internet.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions\n\nContent: 6.1 Translating UML to XML Schema 6.1.1 The reader is expected to have a working knowledge of the UML, XML, and Schema specifications (See ¶¶0and 4.3). This document does not provide tutorial information on these subjects. 6.1.2 This document follows the guidelines for XML as outlined in SEMI E121. 6.1.3 Some of the key guidelines followed in this document are summarized here: Attributes of UML classes from SEMI E125 are generally represented as XML attributes, to improve efficiency in transferring metadata descriptions from the equipment. Exceptions to this convention are UML attributes that correspond to data structures or other constructs that cannot be represented as XML attributes, or may include text values that may need to include non-parsed character data (CDATA). Composition associations are mapped to a single XML element (or multiple such elements if the specified multiplicity is greater than 1). Aggregations are modeled as contained elements or arrays of references to one or more unique\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions\n\nContent: attributes of the target type. • Inheritance is mapped to using complexType extension. In cases where a reference to an abstract base class occurs in the UML model, a choice compositor for each of the possible derived types is used in order to restrict instance documents from including arbitrary extension through type substitution. 6.1.4 The translation of a UML class to XML Schema types is documented using a table format illustrated by Table 1. Operations defined for a UML class are translated into WSDL operations. 6.1.5 Translation Table Column Header Description • Attribute or Role Name — If an attribute, the name of the attribute is placed here. If an association (including aggregation or composition), the role name from the UML diagram is placed here. Compositions are often not assigned role names. In that case “none” is placed here. UML Name/Type — If an attribute, the data type of the UML attribute is place here. If an association, the type of association is placed here. The possible association\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6  Conventions\n\nContent: types are “Composition”, “Aggregation”, or the basic “Association”. UML defines these three types of association. • XML Element or Attribute — Lists the type of XML construct used to represent the UML attribute or association. XML Name/Type — Provides the name and data type of the resulting XML construct. The type may be a builtin type (for example, xs:string), or a named type defined within the XML Schema. Table 1 Example Translation Table\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.1.6 Translating Operations to XML Schema\n\n6.1.6.1  The translation of an operation defined for UML interface classes to XML Schema types is documented using a table format illustrated in Table 2.  One row is provided for each possible input/output argument for the operation being described.  \nTable 2  Example Translation Table for Operation Input/Output Arguments\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.2 Documenting XML Schema and WSDL Files\n\n6.2.1 Associated with this document are XML Schema and WSDL files that are Common Components of the specification.  Each such document is described using a table format illustrated by Table 3.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams\n\nContent: 6.3.1 This document provides graphical representations of the included XML Schema data type and element definitions. Although no standard graphical notation for XML Schema could be found, various XML tools have their own notation. This document will use the notation provided by XMLSpy from Altova Corporation Table 1 shows a sample XML Schema diagram that will be used to provide a basis for explanation of the schema graphical notation used in the rest of the document. 6.3.2 In the diagram, rectangular boxes represent XML element definitions. Ownership or containment is read from left to right in the diagrams. In the sample diagram, ParentType contains Child1, Child2, Child 3, and Child 4. In turn, Child2 contains Child2a, Child2b, and Child2c. The additional symbols (8-sided boxes) represent sequences or choices. See Table 4 for an explanation of these symbols. Table 4 Altova XMLSPY Schema Diagram Symbols $6 . 3 . 3 \\mathrm { ~ A ~ }$ graphic using a solid line is a required\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams\n\nContent: element; using a dashed line represents an optional element. Numbers r ranges in the lower right hand corner represent cardinality. The default cardinality is one. 6.3.4 To simplify a diagram or help focus on a particular aspect, detail may be hidden. The 8-sided symbols have a small square on the right end. If a minus sign “-” is in the box, then all detail is shown. If the box contains a plus sign $\" \\mathrm { \\Phi } _ { + } , \"$ , then all detail to the right of that symbol is hidden. The example has no hidden detail. 6.3.5 The yellow (or grey if printed in monochrome) boxes indicate the use of other defined types. So, Child4 is of type “Child4Type”. Child4Type defines Child4a and Child4b. This detail may be hidden in the diagram. Object oriented inheritance is typically represented in XML as type extension. In Figure 1, ParentType extends Child1and2Type by adding a sequence that includes Child3 and Child4. 6.3.6 Reading Figure 1 would yield the following additional\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.3 Documenting XML Schema With Diagrams\n\nContent: information: 1. Child1and2Type is an ordered sequence of two items: Child2 and Child1. 2. Child1 contains an optional ordered sequence of Child1a, one or more Child1b, and (optionally) Child1c. 3. Child2 contains a choice of one or two of the following: Child2a, Child2b, and Child2c. 4. Child3 contains an unordered sequence of Child3a and Child3b.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.4 XML Schema Sample\n\n6.4.1 The sample XML Schema for the example shown in Figure 1, is presented below. Refer to the XML documentation referenced in $\\ P 4 . 3$ for a complete description of the syntax and semantics of XML Schema.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 6.5 Translating UML to WSDL\n\n6.5.1 In general, UML interface classes defined in the abstract specification are translated into WSDL as portType definitions, and each portType definition has a corresponding WSDL binding definition.  The following tables show the convention used for documenting the WSDL port type and binding definitions for a given UML interface class.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 5  Example Interface WSDL Port Type Table\n\nTable 6  Example Interface WSDL Binding Table  \n6.5.2 Each operation defined for a given UML interface class has a corresponding operation definition and binding.\nOperations are described using a table format illustrated by Table 7 and Table 8.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 7  Example Operation Binding Table\n\nTable 8  Example PortType Operation Table\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.1 WSDL Organization\n\n7.1.1 Each interface definition in SEMI E134 is mapped to a WSDL portType and binding definition.  WSDL portType definitions are named after the interface and its operations as they appear in SEMI E134.  WSDL binding definitions for each portType are used to specify the SOAP 1.1 envelope contents for each operation, and to define the corresponding XML encoding styles and HTTP header usage.  All SEMI E134 WSDL interfaces use document/literal encoding, with the complete SOAP header and body contents defined in XML Schema file(s) via global element definitions.  \n7.1.2 Figure 3 shows the relationship between the WSDL binding and portType definitions and the XML Schema types used for each interface.  The portType definition imports XML Schema type definitions used in each operation via the XML Schema “import” statement.  The WSDL binding definition imports the portType definition via the WSDL “import” statement. Figure 4 shows the specific XML Schema and WSDL files defined for SEMI E134.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager\n\nContent: 7.2.1 Application of SEMI E132 Sessions 7.2.1.1 This section is provisional, pending the approval of SEMI E132.1 and the SEMI Specification for Semiconductor Common Components. 7.2.1.2 The DataCollectionManager shall use SEMI E132.1 for authentication and authorization. 7.2.1.3 Use of the interfaces defined in SEMI E134 to collect data can directly affect overall data throughput for the equipment, and may indirectly affect the equipment’s ability to perform its intended function. Additionally, data accessible from the equipment via the SEMI E134 interfaces may be proprietary to the equipment supplier and/or the factory that uses the equipment, and should be protected against unauthorized access within the factory. 7.2.1.4 For this reason, all operations defined by the SEMI E134 DataCollectionManager interface can be exchanged using the HTTPS transport (HTTP 1.1 over SSL 3.0) by enabling SSL authentication as specified in SEMI E132.1. Once enabled via SEMI E132.1, the equipment shall require\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager\n\nContent: mutual client-server SSL authentication for all SEMI E134 DataCollectionManager operations supported by the equipment, and the equipment shall not provide access to any operations except via the HTTPS transport. 7.2.2 There may be some integration, development, and/or test environments in which it is not practical or feasible to install equipment and/or client certificates in order to communicate with the equipment. As a practical consideration for such environments only, the equipment shall support the ability of the user to disable SSL authentication for the SEMI E134 DataCollectionManager interface, using the equipment configuration specified by E132.1. Users should be aware that disabling SSL authentication opens up complete unrestricted access to SEMI E134 data for any application with network access to the equipment. 7.2.2.1 Regardless of whether or not SSL authentication is enabled, the equipment shall reject all requests from clients that do not provide a valid SEMI E132 session\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2 DataCollectionManager\n\nContent: identifier in the SOAP envelope header provided with the request. The SEMI E132 session identifier shall be provided via the E132Header element, as specified by SEMI E132.1. If a client does not provide a recognized session identifier, the equipment shall immediately reject the request using the SEMI Common Error data type, with an error code of $\\cdot 6 0 0 5 ^ { \\prime }$ and a source of ‘urn:semi-org:E132’ as specified in SEMI E132.1. The equipment shall perform no other processing of an SEMI E134 request if the request is found to include an invalid SEMI E132 session identifier, or if no session identifier is provided.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction\n\nContent: 7.2.3.1 The equipment shall maintain DCP activity on a per-Session basis. For example, the same SEMI E132 Principal may establish one or more SEMI E132 Sessions on the equipment. If only one of those Sessions activates a DCP, the equipment shall only enable the DCP for that specific session. If two separate SEMI E132 sessions attempt to activate the same DCP, the equipment shall activate the DCP for both sessions. Similarly if one active SEMI E132 session attempts to activate the same DCP twice, the equipment shall respond to the second request with the DCPIsActive error, as defined in SEMI E134. 7.2.3.2 As described in $\\ P 7 . 2 . 1 . 3$ , the equipment shall use the URL provided with the HTTPEndpoint information provided with the SEMI E132 EstablishSession request to send all SEMI E134 communication. 7.2.3.3 If a consumer’s SEMI E132.1 Session is closed for any reason (either expressly closed or through a communication failure), the equipment shall stop sending data from all\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction\n\nContent: DCP’s previously activated by that consumer. This shall not affect data transmission from those DCP’s to consumers that still have SEMI E132 Sessions in the Established state. 7.2.3.3.1 If one or more of these DCP’s has more than one consumer, the equipment shall take the actions defined in transition 5 of the E134 DataCollectionPlan State model. These DCP’s will remain active, and the equipment shall remove the consumer’s session from the active consumers list and continue to send data to the other consumers for those DCP’s. 7.2.3.3.2 If one or more of these DCP’s has only one consumer, the equipment shall take the actions defined in transition 8 of the SEMI E134 DataCollectionPlan State model. The equipment shall remove the consumer’s session from the active consumers list and change the state of these DCP’s to Inactive. 7.2.3.4 If a DCP is returning from the Hibernating state and there is at least one consumer with an SEMI E132 persistent Session that had previously requested\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.3 Session and DCP State Interaction\n\nContent: activation of the DCP, then the equipment shall transition the DCP to the Active state, and resume sending data to each consumer with an SEMI E132 persistent Session. 7.2.3.5 If a DCP is returning from the Hibernating state and there are no consumers with SEMI E132 persistent Sessions, then the equipment shall transition the DCP to the Inactive state. 7.2.4 Authentication and Authorization Using SEMI E132.1 7.2.4.1 The equipment shall implement the SEMI E134 privilege levels as SEMI E132 privileges. 7.2.4.2 The equipment shall implement the SEMI E134 privilege levels naming convention as specified in Table 9. The privileges listed are of the format urn:semi-org:priv.<priv-name>.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 9  SEMI E134 to SEMI E132 Privilege mapping (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 9  SEMI E134 to SEMI E132 Privilege mapping\n\nContent: 7.2.5 Using SEMI E125 Metadata to Identify Sources, Events, Exceptions, and Parameters 7.2.5.1 Sources shall be named using a valid SEMI E120 Locator value (see SEMI E120, Related Information 2, and the SEMI E120.1 LocatorType). Events/exceptions are identified by their SEMI E125 “id” attribute, and Parameters are identified by their SEMI E125 “name” attribute. If the events, exceptions, or parameters are defined by an SEMI E39-compliant objType, then use the following naming conventions to distinguish between information from any instance vs. a specific instance. Table 10 Source/Event/Exception/Parameter Naming Convention 7.2.5.2 <typeName> and <instName> referenced in Table 10 shall be of the following format. “typeName” shall be the E39 objType name for the object type of interest. “instName” shall be equal to a string of the form <typeName>-<E39 objId>, where “typeName” specifies the object type of interest, and “objId” specifies the particular object of interest,\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 9  SEMI E134 to SEMI E132 Privilege mapping (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 9  SEMI E134 to SEMI E132 Privilege mapping\n\nContent: equal to the value of that instance’s SEMI E39 objId attribute.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.6 Use of Common Error Type\n\n7.2.6.1  This section is provisional, pending the approval of the SEMI Specification for Semiconductor Common Components.  \n7.2.6.2  Table 11 below provides a mapping of the SEMI E134 defined errors to its common error code.  The SEMI E134 mapped error codes below are in addition to any common error codes defined in the Common Components Specification.  SEMI E134 Error codes shall be denoted in the common error type structure by defining the “source” name of “urn:semi-org:E134”.  \n7.2.6.3  SEMI E134.1 implements the SEMI E134 Unauthorized Operation Class as the SEMI E132.1 UnauthorizedOperation class and will return the SEMI E132.1 error code $\\cdots 6 0 0 5 ^ { \\prime }$ and a source of “urn:semiorg:E132” Operation not authorized in the Common Components Error structure.  \nTable 11  SEMI E134 Error Codes\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.7 XML Schema and WSDL Files\n\n7.2.7.1  This section is provisional, pending the approval of SEMI E120.1, SEMI E125.1, and SEMI E132.1.  \n7.2.7.2  The XML Schema and WSDL defined by this specification for the DataCollectionManager interface is contained in the following documents:\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 12  XML Schema (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 12  XML Schema\n\nContent: Table 13 DataCollectionManager PortType Definitions Table 14 DataCollectionManager Binding Definitions 7.2.7.3 These documents are a part of this specification and should accompany this document. The contents of these documents constitute the core part of this specification. 7.2.7.4 E134-1-V0305-Schema.xsd imports types from the SEMI E132.1 Equipment Client Authentication and Authorization XML Schema namespace, specifically the E132Header and E132HashHeader types. 7.2.7.5 E134-1-V0305-Schema.xsd imports types from the SEMI 3570.1 Specification for XML Semiconductor Common Components XML Schema namespace, specifically the ErrorType type. 7.2.8 WSDL Port Type Overview 7.2.8.1 The DataCollectionManager WSDL portType definition organizes the SEMI E134.1 XML Schema data types into a collection of named operations with inputs and outputs that correspond to the UML operations that are defined for the DataCollectionManager interface in SEMI E134, ¶9.1. The WSDL portType itself is named after the SEMI E134\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 12  XML Schema (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 12  XML Schema\n\nContent: interface, and each WSDL portType operation is named after the corresponding UML operation defined for the interface. Each WSDL operation consists of two WSDL message definitions corresponding to the input and output (request and response) for the UML operation defined in SEMI E134. Figure 5 illustrates the relationship between the SEMI E134 UML interface and the WSDL portType definition. The WSDL message and operation definitions are described in $\\ P \\ P . 2 . 1 0$ through 7.2.20.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.9 WSDL Binding Overview\n\n7.2.9.1  The WSDL DataCollectionManager binding definition specifies a message and transport protocol to use for a given portType (SOAP and HTTP for SEMI E134.1), the interface style used (document style for SEMI E134.1). For each WSDL portType operation, the binding defines any SOAP headers used and whether or not they are required, the HTTP SOAPAction header value to use for that operation, and the XML encoding to use (literal).  The binding definitions for each portType operation are described in ¶¶7.2.10 through 7.2.20.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.10 WSDL Service Overview\n\n7.2.10.1  This specification does not provide a WSDL service definition.  WSDL service definitions define the address(es) at which a given interface can be accessed by a client.  Such information cannot be determined until the equipment has been installed on a factory network, and therefore is out of scope for this specification.  Users are responsible for defining the mechanisms by which clients locate SEMI E134 equipment services in the factory\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.1  WSDL Operation Binding\n\n7.2.11.1.1 See the operation binding for “DefinePlan” in SEMI E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.2  WSDL Operation\n\n7.2.11.2.1 See the portType operation definition for “DefinePlan” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.3  WSDL Message(s)\n\n7.2.11.3.1 See the message definitions for “E132HeaderMessage”, “DefinePlanRequest”, and “DefinePlanResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: 7.2.11.4.1 DefinePlanRequest - this global element acts as a top-level container entity representing the SOAP body of a DefinePlan request. As defined in SEMI E134, this operation has one input argument: the new DCP that is being defined. This argument is modeled as a single element named “NewPlan” of complexType “DataCollectionPlanType”. Table 18 Translation Table for Input Arguments for the DefinePlan Operation 7.2.11.4.2 DataCollectionPlanType — This global complexType is the XML Schema representation of the SEMI E134 Data Collection Plan class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 19 Translation Table for DataCollectionPlanType 7.2.11.4.3 EventRequestType — This global complexType is the XML Schema representation of the SEMI E134 Event Request class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 20 Translation Table for EventRequestType 7.2.11.4.4 ParameterRequestType – This\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: global complexType is the XML Schema representation of the SEMI E134 Event Request class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 21 Translation Table for ParameterRequestType 7.2.11.4.5 ExceptionRequestType — This global complexType is the XML Schema representation of the SEMI E134 Exception Request class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 22 Translation Table for ExceptionRequestType 7.2.11.4.6 TraceRequestType — This global complexType is the XML Schema representation of the SEMI E134 Trace Request class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 23 Translation Table for TraceRequestType 7.2.11.4.7 EventTriggerType — This global complexType is the XML Schema representation of the SEMI E134 Event Trigger class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 24\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: Translation Table for EventTriggerType 7.2.11.4.8 ExceptionTriggerType — This global complexType is the XML Schema representation of the SEMI E134 Exception Trigger class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 25 Translation Table for ExceptionTriggerType 7.2.11.4.9 ParameterRequestType — This global complexType is the XML Schema representation of the SEMI E134 Parameter Request class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 26 Translation Table for ParameterRequestType 7.2.11.4.10 DefinePlanResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 DefinePlan request. It contains either an element named “PlanDefined” of complexType “DCPDefinedType” or an element named “Error” of complexType “DefinePlanErrorType”. DefinedPlanErrorType contains the Common Components Error class and a choice of either an\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 4)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: UnauthorizedOperationError or InvalidPlanError as decribed in the following table. Table 27 Translation Table for Output Arguments for the DefinePlan Operation 7.2.11.4.11 DCPDefinedType — This global complexType is the XML Schema representation of the SEMI E134 DCPDefined class. The following table describes the mapping of the UML class to this XML Schema complexType Table 28 Translation Table for DCPDefinedType 7.2.11.4.12 UnauthorizedOperationType — UnauthorizedOperationType is defined and described in SEMI E132.1. Please reference E132.1 for the description of the UnathorizedOperationType. 7.2.11.4.13 InvalidPlanType — This global complexType is the XML Schema representation of the SEMI E134 InvalidPlan class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 29 Translation Table for InvalidPlanType 7.2.11.4.14 InvalidEventRequestType — This global complexType is the XML Schema representation of the SEMI E134 InvalidEventRequest class. The\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 5)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: following table describes the mapping of the UML class to this XML Schema complexType. Table 30 Translation Table for InvalidEventRequestType 7.2.11.4.15 InvalidExceptionRequestType — This global complexType is the XML Schema representation of the E134 InvalidExceptionRequest class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 31 Translation Table for InvalidExceptionRequestType 7.2.11.4.16 InvalidParameterRequestType — This global complexType is the XML Schema representation of the E134 InvalidParameterRequest class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 32 Translation Table for InvalidParameterRequestType 7.2.11.4.17 InvalidTraceRequestType — This global complexType is the XML Schema representation of the SEMI E134 InvalidTraceRequest class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 33 Translation Table for\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types (Part 6)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.11.4  XML Schema Types\n\nContent: InvalidTraceRequestType 7.2.11.4.18 InvalidTriggerType — This global complexType is the XML Schema representation of the SEMI E134 InvalidTrigger class. The following table describes the mapping of the UML class to this XML Schema complexType Table 34 Translation Table for InvalidTriggerType 7.2.11.4.19 InvalidIntervalType — This global complexType is the XML Schema representation of the SEMI E134 InvalidInterval class. The following table describes the mapping of the UML class to this XML Schema complexType Table 35 Translation Table for InvalidIntervalType 7.2.11.4.20 InvalidCycleType — This global complexType is the XML Schema representation of the SEMI E134 InvalidCycle class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 36 Translation Table for InvalidCycleType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.12.1  WSDL Operation Binding\n\n7.2.12.1.1 See the operation binding for “GetDefinedPlanIds” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.12.2  WSDL Operation\n\n7.2.12.2.1 See the portType operation definition for “GetDefinedPlanIds” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 38  GetDefinedPlanIds PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.12.3  WSDL Message(s)\n\n7.2.12.3.1 See the message definitions for “E132HeaderMessage”, “GetDefinedPlanIdsRequest”, and “GetDefinedPlanIdsResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.12.4  XML Schema Types\n\n7.2.12.4.1 GetDefinedPlanIdsRequest — this global element acts as a top-level container entity representing the SOAP body of a GetDefinedPlanIds request. As defined in SEMI E134, this operation has no input arguments.  \n7.2.12.4.2 GetDefinedPlanIdsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetDefinedPlanIds request.  It contains either an element named “DefinedPlans” of complexType “DCPDefinedType” or an element named “Error” of complexType “GetDefinedPlanIdsErrorType”. GetDefinedPlanIdsErrorType contains the Common Components Error class and the ability to specify an UnauthorizedOperationError if appropriate.  \nTable 40  Translation Table for Output Arguments for the GetDefinedPlanIds Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.13.1  WSDL Operation Binding\n\n7.2.13.1.1 See the operation binding for “GetPlanDefinition” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.13.2  WSDL Operation\n\n7.2.13.2.1 See the portType operation definition for “GetPlanDefinition” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 42  GetPlanDefinition PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.13.3  WSDL Message(s)\n\n7.2.13.3.1 See the message definitions for “E132HeaderMessage”, “GetPlanDefinitionRequest”, and “GetPlanDefinitionResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 16 GetPlanDefinitionRequest\n\n7.2.13.4.1 GetPlanDefinitionRequest — This global element acts as a top-level container entity representing the SOAP body of a GetPlanDefinition request. As defined in SEMI E134, this operation has one input argument: the Plan id that is being requested.  This argument is modeled as a single element named “PlanId” of simpleType “xsd:string”.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 44  Translation Table for Input Arguments for the GetPlanDefinitionOperation\n\n7.2.13.4.2 GetPlanDefinitionResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetPlanDefinition request.  It contains either an element named “PlanDefinition” of complexType “DataCollectionPlanType” or an element named “Error” of complexType “GetPlanDefinitionErrorType”. GetPlanDefinitionErrorType contains the Common Components Error class and the ability to specify an UnauthorizedOperationError or NoSuchPlanError if appropriate.  \nTable 45  Translation Table for Output Arguments for the GetPlanDefinitionOperation  \n7.2.13.4.3 NoSuchPlanType — This global complexType is the XML Schema representation of the SEMI E134 NoSuchPlan class.  The following table describes the mapping of the UML class to this XML Schema complexType.  \nTable 46  Translation Table for NoSuchPlanType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.14.1  WSDL Operation Binding\n\n7.2.14.1.1 See the operation binding for “ActivatePlan” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.14.2  WSDL Operation\n\n7.2.14.2.1 See the portType operation definition for “ActivatePlan” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.14.3  WSDL Message(s)\n\n7.2.14.3.1 See the message definitions for “E132HeaderMessage”, “ActivatePlanRequest”, and “ActivatePlanResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.14.4  XML Schema Types\n\n7.2.14.4.1 ActivatePlanRequest — This global element acts as a top-level container entity representing the SOAP body of a ActivatePlan request. As defined in SEMI E134, this operation has one input argument: the Plan id that is being activated.  This argument is modeled as a single element named “PlanId” of simpleType “xsd:string”.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 50  Translation Table for Input Arguments for the ActivatePlanOperation\n\n7.2.14.4.2 ActivatePlanResponse — this global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 ActivatePlan request.  It contains either an element named “activatedPlan” of complexType “DCPActivatedType” or an element named “Error” of complexType “ActivatePlanErrorType”. GetPlanDefinitionErrorType contains the Common Components Error class and the ability to specify specific errors as described in the following table.  \nTable 51  Translation Table for Output Arguments for the GetDefinedPlanIds Operation  \n7.2.14.4.3 DCPActivatedType — This global complexType is the XML Schema representation of the SEMI E134 DCPActivated class.  The following table describes the mapping of the UML class to this XML Schema complexType.  \nTable 52  Translation Table for DCPActivatedType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.15.1  WSDL Operation Binding\n\n7.2.15.1.1 See the operation binding for “GetActivePlanIds” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.15.2  WSDL Operation\n\n7.2.15.2.1 See the portType operation definition for “GetActivePlanIds” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 54  GetActivePlanIds PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.15.3  WSDL Message(s)\n\n7.2.15.3.1 See the message definitions for “E132HeaderMessage”, “GetActivePlanIdsRequest”, and “GetActivePlanIdsResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 55  DataCollectionManagement Binding\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.15.4  XML Schema Types\n\n7.2.15.4.1 GetActivePlanIdsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetActivePlanIds request. As defined in SEMI E134, this operation has no input arguments.  \n7.2.15.4.2 GetActivePlanIdsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetActivePlanIdsrequest.  It contains either an element named “ActivePlans” of complexType “DCPActivatedType” or an element named “Error” of complexType “GetActivatePlanIdsErrorType”. GetActivePlanIdsErrorType contains the Common Components Error class and the ability to specify specific errors as described in the following table.  \nTable 56  Translation Table for Output Arguments for the ActivatePlan Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.16.1  WSDL Operation Binding\n\n7.2.16.1.1 See the operation binding for “DeactivatePlan” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.  \nTable 57  DeactivatePlan Operation Binding\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.16.2  WSDL Operation\n\n7.2.16.2.1 See the portType operation definition for “DeactivatePlan” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 58  DeactivatePlan PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.16.3  WSDL Message(s)\n\n7.2.16.3.1 See the message definitions for “E132HeaderMessage”, “DeactivatePlanRequest”, and “DeactivatePlanResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 22 DeactivatePlanRequest (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 22 DeactivatePlanRequest\n\nContent: 7.2.16.4.1 DeactivatePlanRequest — This global element acts as a top-level container entity representing the SOAP body of a DeactivatePlan request. As defined in SEMI E134, this operation has two input arguments: the Plan id that is being deactivated and terminate specifying if the DCP should be deactivated for all consumers. These arguments are modeled as a attributes named “PlanId” of simpleType “xsd:string” and “terminate” of simpleType “xsd:boolean”. Table 60 Translation Table for Input Arguments for the DeactivatePlan Operation 7.2.16.4.2 DeactivatePlanResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 DeactivatePlan request. It contains either an element named “deactivatedPlan” of complexType “DCPDeactivatedType” or an element named “Error” of complexType “DeactivatePlanErrorType”. DeactivatePlanErrorType contains the Common Components Error class and the ability to specify specific errors as described in\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 22 DeactivatePlanRequest (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 22 DeactivatePlanRequest\n\nContent: the following table. Table 61 Translation Table for Output Arguments for the DeactivatePlan Operation 7.2.16.4.3 DCPDeactivatedType — This global complexType is the XML Schema representation of the SEMI E134 DCPDeactivated class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 62 Translation Table for DeactivatePlanResponseType 7.2.16.4.4 DCPNotActive — This global complexType is the XML Schema representation of the SEMI E134 DCPNotActive class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 63 Translation Table for DCPNotActiveType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.17.1  WSDL Operation Binding\n\n7.2.17.1.1 See the operation binding for “DeletePlan” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.17.2  WSDL Operation\n\n7.2.17.2.1 See the portType operation definition for “DeletePlan” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.17.3  WSDL Message(s)\n\n7.2.17.3.1 See the message definitions for “E132HeaderMessage”, “DeletePlanRequest”, and “DeletePlanResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 24 DeletePlanRequest\n\n7.2.17.4.1 DeletePlanRequest — This global element acts as a top-level container entity representing the SOAP body of a DeletePlan request. As defined in SEMI E134, this operation has one input argument: the Plan id that is being deleted.  This argument is modeled as a attributes named “PlanId” of simpleType “xsd:string”.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 67  Translation Table for Input Arguments for the DeletePlan Operation\n\n7.2.17.4.2 DeletePlanResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 DeletePlan request.  It contains either an element named “deletedPlan” of complexType “DCPDeletedType” or an element named “Error” of complexType “DeletePlanErrorType”. DeletePlanErrorType contains the Common Components Error class and the ability to specify specific errors as described in the following table.  \nTable 68  Translation Table for Output Arguments for the DeletePlanOperation  \n7.2.17.4.3 DCPDeletedType — This global complexType is the XML Schema representation of the SEMI E134 DCPDeleted class.  The following table describes the mapping of the UML class to this XML Schema complexType.  \nTable 69  Translation Table for DCPDeletedType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.1  WSDL Operation Binding\n\n7.2.18.1.1 See the operation binding for “GetParameterValues” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.2  WSDL Operation\n\n7.2.18.2.1 See the portType operation definition for “GetParameterValues” in E134-Equipment-PortType.wsdl.\nKey information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.3  WSDL Message(s)\n\n7.2.18.3.1 See the message definitions for “E132HeaderMessage”, “GetParameterValuesRequest”, and “GetParameterValuesResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4  XML Schema Types (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4  XML Schema Types\n\nContent: 7.2.18.4.1 GetParameterValuesRequest — This global element acts as a top-level container entity representing the SOAP body of a GetParameterValues request. As defined in SEMI E134, this operation has one input argument: the Parameters that are being requested. This argument is modeled as a attributes named “ParameterRequests” of complexType “ParameterRequestType”. Table 73 Translation Table for Input Arguments for the GetParameterValues Operation 7.2.18.4.2 GetParameterValuesResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetParameterValues request. It contains either an element named “PV” of complexType “ParameterValueType” or an element named “Error” of complexType “GetParameterValuesErrorType”. GetParameterValuesErrorType contains the Common Components Error class and the ability to specify specific errors as described in the following table. Table 74 Translation Table for Output Arguments for the\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4  XML Schema Types (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4  XML Schema Types\n\nContent: GetParameterValues Operation 7.2.18.4.3 ParameterValueType — This global complexType is the XML Schema representation of the SEMI E134 ParameterValues class. The following table describes the mapping of the UML class to this XML Schema complexType.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4.4 Extended Parameter Value Types (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4.4 Extended Parameter Value Types\n\nContent: 7.2.18.4.4.1 This specification adds new parameter value elements to the minimal set defined in SEMI E134. The following table shows how each SEMI E134 element has been mapped to the XML Schema element in this specification, and lists the additional classes not defined in SEMI E134. Table 75 Translation Table for ParameterValueType 7.2.18.4.5 SEMI E125.1 Parameter to SEMI E134.1 Parameter Mapping — If a requested Parameter has an SEMI E125.1 type definition, then suppliers shall communicate their values according to the following table. The following table describes the mapping of SEMI E125 ParameterTypes into SEMI E134 ParameterValueTypes. Table 76 SEMI E134 and SEMI E125.1 Type Description Mapping Table 7.2.18.4.6 NullType — This element is an extension to the E134 base document. There is no direct corollary in SEMI E134 or SEMI E125 to this type. This type is used to represent a null value as a ParameterValue. $7 . 2 . 1 8 . 4 . 7 \\ F 4$ & $F \\&$ — These elements are the\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4.4 Extended Parameter Value Types (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.18.4.4 Extended Parameter Value Types\n\nContent: XML Schema representations of the SEMI E134 RealValue class. The following table describes the mapping of these UML class to these XML Schema elements.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 77  Translation Table for F4 & F8\n\n7.2.18.4.8 I1, $\\varPi$ , $I 4$ & I8 — These elements are the XML Schema representations of the SEMI E134 IntegerValue class.  The following table describes the mapping of these UML class to these XML Schema elements.  \nTable 78  Translation Table for I1, I2, I4 & I8  \n$7 . 2 . 1 8 . 4 . 9 \\ : S$ — This element is the XML Schema representations of the SEMI E134 StringValue class.  The following table describes the mapping of this UML class to the XML Schema element.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 79  Translation Table for S\n\n$7 . 2 . 1 8 . 4 . 1 0 B$ — This element is the XML Schema representations of the SEMI E134 BooleanValue class.  The following table describes the mapping of this UML class to the XML Schema element.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 80  Translation Table for B\n\n7.2.18.4.11 EI — This element is the XML Schema representations of the SEMI E134 EnumeratedIntegerValue class.  The following table describes the mapping of this UML class to the XML Schema element.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 81  Translation Table for EI (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 81  Translation Table for EI\n\nContent: 7.2.18.4.12 ES — This element is the XML Schema representations of the SEMI E134 EnumeratedStringValue class. The following table describes the mapping of this UML class to the XML Schema element. Table 82 Translation Table for ES 7.2.18.4.13 B64 — This element is the XML Schema representations of the SEMI E134 BinaryValue class. The following table describes the mapping of this UML class to these XML Schema element. Table 83 Translation Table for B64 7.2.18.4.14 NoValue — This element is the XML Schema representation of the SEMI E134 NoValue class. The following table describes the mapping of the UML class to this XML Schema element. Table 84 Translation Table for NoValue 7.2.18.4.15 NoValueReasonEnum — This elements is the XML Schema representation of the SEMI E134 NoValueReasonEnum class. NoValueReasonEnumType is an xsd:string based enumeration with the following available values. 7.2.18.4.16 FieldValueType — This element is the XML Schema container class representation of the\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 81  Translation Table for EI (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 81  Translation Table for EI\n\nContent: SEMI E134 ParmeterValue class. The following table describes the mapping of the UML class to this XML Schema elements. The FieldValueType class references the base classes defined in ¶¶7.2.18.4.7 through 7.2.18.4.17. Table 85 NoValueReasonEnum Enumerated Values Table 86 Translation Table for FieldValueType 7.2.18.4.17 CompositeValueType — This elements is the XML Schema representation of the SEMI E125.1 VariableTypeType class. The following table describes the mapping of the UML class to this XML Schema elements. The CompositeValueType class references the base classes defined in ¶¶7.2.18.4.7 through 7.2.18.4.17.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.1  WSDL Operation Binding\n\n7.2.19.1.1 See the operation binding for “GetObjTypeInstanceIds” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.  \nTable 87  GetObjTypeInstanceIds Operation Binding\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.2  WSDL Operation\n\n7.2.19.2.1 See the portType operation definition for “GetObjTypeInstanceIds” in E134-Equipment-PortType.wsdl.\nKey information is shown for convenience in the following table.  \nTable 88  GetObjTypeInstanceIds PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.3  WSDL Message(s)\n\n7.2.19.3.1 See the message definitions for “E132HeaderMessage”, “GetObjTypeInstanceIdsRequest”, and “GetObjTypeInstanceIdsResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types\n\nContent: 7.2.19.4.1 GetObjTypeInstanceIdsRequest — This global element acts as a top-level container entity representing the SOAP body of a GetObjTypeInstanceIds request. As defined in SEMI E134, this operation has one input argument: the Parameters that are being requested. This argument is modeled as an element named “Request” of complexType “ObjTypeRequestType”. Table 90 Translation Table for Input Arguments for the GetObjTypeInstanceIds Operation 7.2.19.4.2 ObjTypeRequestType — This global complexType is the XML Schema representation of the SEMI E134 ObjTypeRequest class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 91 Translation Table for ObjTypeRequestType 7.2.19.4.3 GetObjTypeInstanceIdsResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetObjTypeInstanceIds request. It contains either an element named “objTypeInstances” of complexType “ObjTypeResultType” or an\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types\n\nContent: element named “Error” of complexType “dcm:GetObjTypeInstanceIdsErrorType”. Table 92 Translation Table for Output Arguments for the GetObjTypeInstanceIds Operation 7.2.19.4.4 ObjTypeResultType — This global complexType is the XML Schema representation of the SEMI E134 ObjTypeResult class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 93 Translation Table for ObjTypeResultType 7.2.19.4.5 ObjTypeInstanceType — This global complexType is the XML Schema representation of the SEMI E134 ObjTypeInstance class. The following table describes the mapping of the UML class to this XML Schema complexType Table 94 Translation Table for ObjTypeInstanceType 7.2.19.4.6 ObjTypeRequestErrorType — This is a container class representing the errors that can be returned from the ObjTypeRequest message. ObjTypeRequestErrorType has the ability to specify specific errors as described in the following table. The following table describes the mapping of the UML class to\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.19.4  XML Schema Types\n\nContent: this XML Schema complexType Table 95 Translation Table for ObjTypeRequestErrorType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.20.1  WSDL Operation Binding\n\n7.2.20.1.1 See the operation binding for “GetCurrentPerformanceStatus” in E134-Equipment-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.20.2  WSDL Operation\n\n7.2.20.2.1 See the portType operation definition for “GetCurrentPerformanceStatus” in E134-EquipmentPortType.wsdl.  Key information is shown for convenience in the following table.  \nTable 97  GetCurrentPerformanceStatus PortType Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.2.20.3  WSDL Message(s)\n\n7.2.20.3.1 See the message definitions for “E132HeaderMessage”, “GetCurrentPerformanceStatusRequest”, and “GetCurrentPerformanceStatusResponse” in E134-Equipment-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # GetCurrentPerformanceStatusRequest (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # GetCurrentPerformanceStatusRequest\n\nContent: 7.2.20.4.1 GetCurrentPerformanceStatusRequest — This global element acts as a top-level container entity representing the SOAP body of a GetCurrentPerformanceStatus request. As defined in SEMI E134, this operation has no input arguments. 7.2.20.4.2 GetCurrentPerformanceStatusResponse — This global element acts as a top-level container entity representing the SOAP body of the response to an SEMI E134 GetCurrentPerformanceStatus request. It contains either an element named “objTypeInstances” of complexType “ObjTypeResultArrayType. Table 99 Translation Table for Output Arguments for the GetCurrentPerformanceStatus Operation 7.2.20.4.3 PerformanceStatusType — This global complexType is the XML Schema representation of the SEMI E134 PerformanceStatus class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 100 Translation Table for PerformanceStatusType 7.2.20.4.4 ActiveJobType — This global complexType is the XML Schema representation of the\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # GetCurrentPerformanceStatusRequest (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # GetCurrentPerformanceStatusRequest\n\nContent: SEMI E134 ActiveJob class. The following table describes the mapping of the UML class to this XML Schema complexType.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 101  Translation Table for ActiveJobType\n\n7.2.20.4.5 JobTypeEnumType — JobTypeEnumType is a string restricted to the following supported values.  \nTable 102  Supported Job Type Table for JobTypeEnumType  \n7.2.20.4.6 AffectedSystemType — This global complexType is the XML Schema representation of the SEMI E134 AffectedSystem class.  The following table describes the mapping of the UML class to this XML Schema complexType.  \nTable 103  Translation Table for AffectedSystemType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.1 XML Schema and WSDL Files\n\n7.3.1.1  This section is provisional, pending the approval of SEMI E120.1, SEMI E125.1, and SEMI E132.1.  \n7.3.1.2  The XML schema and WSDL defined by this specification for the DCPConsumer interface is contained in the following documents:  \nTable 104  XML Schema\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Table 106  DCPConsumer Binding Definitions\n\n7.3.1.3  These documents are a part of this specification and should accompany this document.  The contents of these documents constitute the core part of this specification.  \n7.3.1.4  E134-1-V0305-Schema.xsd imports types from the SEMI E132.1 Equipment Client Authentication and Authorization XML Schema namespace, specifically the E132Header and E132HashHeader types.  \n7.3.1.5  E134-1-V0305-Schema.xsd imports types from the SEMI 3570.1 Specification for XML Semiconducto Common Components XML Schema namespace, specifically the ErrorType type.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.2 WSDL Port Type Overview\n\n7.3.2.1  The DCPConsumer WSDL portType definition organizes the SEMI E134.1 XML Schema data types into a collection of named operations with inputs and outputs that correspond to the UML operations that are defined for the DCPConsumer interface in SEMI E134, $\\ P \\{ 9 . 1$ .  The WSDL portType itself is named after the SEMI E134 interface, and each WSDL portType operation is named after the corresponding UML operation defined for the interface.  Each WSDL operation consists of two WSDL message definitions corresponding to the input and output (request and response) for the UML operation defined in SEMI E134.  The WSDL message and operation definitions are described in ¶¶7.3.5 through 7.3.9.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.3 WSDL Binding Overview\n\n7.3.3.1  The WSDL DCPConsumer binding definition specifies a message and transport protocol to use for a given portType (SOAP and HTTP for SEMI E134.1), the interface style used (document style for SEMI E134.1).  For each WSDL portType operation, the binding defines any SOAP headers used and whether or not they are required, the HTTP SOAPAction header value to use for that operation, and the XML encoding to use (literal).  The binding definitions for each portType operation are described in $\\ P \\ P . 3 . 5$ through 7.3.9.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.4 WSDL Service Overview\n\n7.3.4.1  This specification does not provide a WSDL service definition.  Client suppliers shall provide a WSDL service definition file with the client that supports E134.1.  This service description shall conform to the WS-I Basic Profile 1.0a, $\\ P 7 . 1$ , for which the HTTPS transport with mutual authentication is required.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.4.2  Application of SEMI E132 Sessions\n\n7.3.4.3  Operations defined by the SEMI E134 DCPConsumer interface shall be exchanged via HTTP and shall not be exchanged via HTTPS.  The equipment shall include a hash of the client’s SEMI E132 session identifier in the SOAP envelope header provided with the operation using the E132HashHeader element, as specified by SEMI E132.1  \n7.3.4.4  The equipment shall only send SEMI E134 notifications to instances of the DCPConsumer interface if the corresponding SEMI E132 Session(s) for that client are in the “Established” state.  The equipment shall use the URL provided with the HTTPEndpoint information included in the SEMI E132 EstablishSession request to send all SEMI E134 notifications to the DCPConsumer interface.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.5.1  WSDL Operation Binding\n\n7.3.5.1.1 See the operation binding for “NewData” in E134-Client-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.5.2  WSDL Operation\n\n7.3.5.2.1 See the portType operation definition for “NewData” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.5.3  WSDL Message(s)\n\n7.3.5.3.1 See the message definitions for “E132HashHeaderMessage” and “NewDataNotification” in E134-ClientPortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification\n\nContent: 7.3.5.4.1 NewDataNotification — This global element acts as a top-level container entity representing the SOAP body of a NewData Notification. As defined in SEMI E134, this operation has one output argument: the Data Collection Report, DCR. This argument is modeled as an element named “DCR” of complexType “dcm:DataCollectionReportType”. Table 110 Translation Table for Input Arguments for the NewDataNotification Operation 7.3.5.4.2 DataCollectionReportType — This global complexType is the XML Schema representation of the SEMI E134 DataCollectionReport class. The following table describes the mapping of the UML class to this XML Schema complexType Table 111 Translation Table for DataCollectionReportType 7.3.5.4.3 ReportSelectorType — This global complexType is the XML Schema representation of the SEMI E134 Report class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 112 Translation Table for ReportSelectorType 7.3.5.4.4 EventReportType —\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification\n\nContent: This global complexType is the XML Schema representation of the SEMI E134 DataCollectionReport class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 113 Translation Table for EventReportType 7.3.5.4.5 ExceptionReportType — This global complexType is the XML Schema representation of the SEMI E134 ExceptionReport class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 114 Translation Table for ExceptionReportType 7.3.5.4.6 TraceReportType — This global complexType is the XML Schema representation of the SEMI E134 TraceReport class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 115 Translation Table for TraceReportType 7.3.5.4.7 CollectedDataType — This global complexType is the XML Schema representation of the SEMI E134 CollectedData class. The following table describes the mapping of the UML class to this XML Schema complexType. 7.3.5.4.8\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification (Part 3)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # Figure 35 NewDataNotification\n\nContent: CollectedDataType — This global complexType is the XML Schema representation of the SEMI E134 CollectedData class. The following table describes the mapping of the UML class to this XML Schema complexType. Table 116 Translation Table for CollectedDataType\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.6.1  WSDL Operation Binding\n\n7.3.6.1.1 See the operation binding for “PerformanceWarning” in E134-Client-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.6.2  WSDL Operation\n\n7.3.6.2.1 See the portType operation definition for “PerformanceWarning” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.6.3  WSDL Message(s)\n\n7.3.6.3.1 See the message definitions for “E132HashHeaderMessage” and “PerformanceWarningNotification” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.6.4  XML Schema Types\n\n7.3.6.4.1 PerformanceWarningNotification — This global element acts as a top-level container entity representing the SOAP body of a PerformanceWarning notification. As defined in SEMI E134, this operation has one output argument: the warning.  This argument is modeled as an attributes named “Warning” of complexType “PerformanceStatusType”.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.7.1  WSDL Operation Binding\n\n7.3.7.1.1 See the operation binding for “PerformanceRestored” in E134-Client-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.7.2  WSDL Operation\n\n7.3.7.2.1 See the portType operation definition for “PerformanceRestored” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.7.3  WSDL Message(s)\n\n7.3.7.3.1 See the message definitions for “E132HashHeaderMessage” and “PerformanceRestoredNotification” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.7.4  XML Schema Types\n\n7.3.7.4.1 PerformanceRestoredNotification — This global element acts as a top-level container entity representing the SOAP body of a PerformanceRestored notification. As defined in SEMI E134, this operation has one output argument: the Status.  This argument is modeled as an attributes named “Status” of complexType “PerformanceStatusType”.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.8.1  WSDL Operation Binding\n\n7.3.8.1.1 See the operation binding for “DCPDeactivation” in E134-Client-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.8.2  WSDL Operation\n\n7.3.8.2.1 See the portType operation definition for “DCPDeactivation” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.8.3  WSDL Message(s)\n\n7.3.8.3.1 See the message definitions for “E132HashHeaderMessage” and “DCPDeactivationNotification” in E134- Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.8.4  XML Schema Types\n\n7.3.8.4.1 DCPDeactivationNotification — This global element acts as a top-level container entity representing the SOAP body of a DCPDeactivation notification. As defined in SEMI E134, this operation has one output argument: the Deactivation Notice.  This argument is modeled as an attributes named “DeactivationNotice” of complexType “DCPDeactivatedType”.  \nTable 128  Translation Table for Input Arguments for the DCPDeactivation Operation\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.1  WSDL Operation Binding\n\n7.3.9.1.1 See the operation binding for “DCPHibernation” in E134-Client-Binding.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.2  WSDL Operation\n\n7.3.9.2.1 See the portType operation definition for “DCPHibernation” in E134-Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.3  WSDL Message(s)\n\n7.3.9.3.1 See the message definitions for “E132HashHeaderMessage” and “DCPHibernationNotification” in E134- Client-PortType.wsdl.  Key information is shown for convenience in the following table.\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.4  XML Schema Types (Part 1)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.4  XML Schema Types\n\nContent: 7.3.9.4.1 DCPHibernationNotification — This global element acts as a top-level container entity representing the SOAP body of a DCPHibernation notification. As defined in SEMI E134, this operation has one output argument: the HibernatingPlans. This argument is modeled as a attributes named “HibernatingPlan” of complexType “DCPHibernatedType”. Table 132 Translation Table for Input Arguments for the DCPHibernation Operation 7.3.9.4.2 DCPHibernatedType — This global complexType is the XML Schema representation of the SEMI E134 DCPHibernated class. The following table describes the mapping of the UML class to this XML Schema complexType Table 133 Translation Table for DCPHibernatedType NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels,\n\nSEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.4  XML Schema Types (Part 2)\n\nTitle: SEMI E134.1-0305 PROVISIONAL SPECIFICATION FOR SOAP BINDING OF DATA COLLECTION MANAGEMENT (DCM) - # 7.3.9.4  XML Schema Types\n\nContent: product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS\n\nThis standard was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee. Current edition approved by the North American Regional Standards Committee December 10, 2004.  Initially available at www.semi.org January 2005; to be published March 2005.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 1  Purpose\n\n1.1  This document is a central location for the definition of common XML elements that are not specific to a single standard, but common across multiple standards.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 2  Scope\n\n2.1  This document currently defines the representation of Error.  This common component is used in association with other XML documents or schemas generated as part of a SEMI standard interface specification for communication between software entities.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 3  Limitations\n\n3.1  The purpose of this document is to define basic components and to allow for future additions as common components are discovered and required.  Only one component (Error) is being defined at this time.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 4  Referenced Standards\n\n4.1  SEMI Standards  \nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nSEMI E87 — Specification for Carrier Management (CMS)  \nSEMI E121 — Guide for Style and Usage of XML for Semiconductor Manufacturing Applications  \nSEMI E125 — Specification for Equipment Self Description (EqSD)  \nSEMI E132 — Specification for Equipment Client Authentication and Authorization  \n4.2  Other References  \nExtensible Markup Language (XML) 1.0 (Second Edition) — W3C Recommendation, 6 October 2000 (http://www.w3.org/TR/2000/REC-xml-20001006)  \nXML Schema Part 1: Structures — W3C Recommendation, 2 May 2001 (http://www/w3/org/TR/xmlschema-1)  \nXML Schema Part 2: Datatypes — W3C Recommendation, 2 May 2001 (http://www/w3/org/TR/xmlschema-2)  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 5  Terminology\n\n5.1  Abbreviations and Acronyms  \n5.1.1  W3C — World Wide Web Consortium  \n5.1.2  WWW — World Wide Web  \n5.1.3  XML — Extensible Markup Language\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 6  Resources, Organizations, and Standards\n\n6.1  Important resources and organizations used in the generation and definition of this document are found in:  \n6.1.1  XML Schema Part 2: Datatypes — W3C Recommendation\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions (Part 1)\n\nTitle: SEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions\n\nContent: 7.1 XML Schema — This specification includes an XML schema file, “CommonComponents-V0305-Schema.xsd”, and should be provided with this document. That XML schema file provides the normative definitions of the types described here. 7.2 Data Type for Error Handling — Error handling in most cases even with standard interface specifications is implementation-specific. It is not practical for one specification to define all possible error conditions, error codes, descriptions and supplementary information that is needed to properly recover from the error. Regardless, a common approach to communicating error conditions can simplify error management for standards implementers and application developers. 7.3 Error Data Structure — The following data structure defines a common error structure that can be extended with additional implementation-specific information that can be used by other standards or suppliers. 7.3.1 Source — The “Source” attribute represents the document from where the attribute code value is defined. For error codes defined by\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions (Part 2)\n\nTitle: SEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions\n\nContent: SEMI standards, the content of Source is the urn representation of the standard number. For error codes defined by a supplier, it is the urn representation of the supplier’s name. (i.e. For SEMI E132 errors, the content of “Source” is: urn:semi-org:E132; for supplier ACME errors the content is: urn:ACME-com) Additional information may be included by the supplier by adding such information after the “:” colon symbol and separating the fields with a “.” period symbol. Table 1 Example of Error Sources 7.3.2 Code — Error code is an integer value that directly maps to a particular specification error code list. The following is an example of a list of code ranges. This specification does not require the allocation of any code range by other specification. The following is just an example of codes. Table 2 Example of Error Code Range 7.3.3 Description — This is a human readable description of the error code being reported. It maps directly to the definition of the error code for each of the expected result of the services as defined by the\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions (Part 3)\n\nTitle: SEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions\n\nContent: specific standard. Additional information may be supplied after this string to provide more detail about the error. Use the “:” colon symbol as delimiter (i.e. Common Component, Code 5001, “Insufficient Arguments Provided:Argument “SessionID” missing). Table 3 Example of Error Descriptions 7.3.4 Extension — This attribute allows the supplier to include additional information regarding the error code encountered. This field is used when the description does not explicitly cover the problem and more specific information is required. 7.4 Common Standardized Errors — This section defines common errors to be reported by any application processing a service. Most of these errors are related to the validation of the service. Table 4 Common Standardized Error Codes NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's\n\nSEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions (Part 4)\n\nTitle: SEMI E138-0305 XML SEMICONDUCTOR COMMON COMPONENTS - # 7  XML Type Definitions\n\nContent: instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility.\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP)\n\nThis specification was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org in June 2005 and on CD-ROM in July 2005.  Originally published March 2005.\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # Table of Contents (Part 1)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # Table of Contents\n\nContent: 1 Purpose . 3 2 Scope . 3 3 Limitations... .4 4 Referenced Standards . .4 4.1 SEMI Standards.. 4.2 ISO Standards.. 4 4.3 OMG Standards... 4 5 Terminology . .5 5.1 SEMI Compilation of Terms ... 5 5.2 Acronyms .. 5 5.3 Definitions ..... 5 6 Conventions.. .6 6.2 Object Modeling .. 6 6.2.1 Unified Modeling Language (UML) . .6 6.2.2 Class Diagrams .. .6 6.2.3 Name of a Class... .6 6.2.4 Abstract and Concrete Classes ... .6 6.2.5 Class Attribute Definition .. .6 6.2.6 Association Documentation ... .7 6.2.7 Association Navigability. 7 Overview of RaP .. 8 7.3 RaP Participants... .8 7.6 RaP Environment... ..8 7.7 Execution of Recipes.. .8 7.8 Creation and Editing of Recipes... .9 7.9 Tracking and Storage of Recipes.. .9 7.10 Communication Overview .9 7.11 Key Recipe Concepts .9 7.12 ProcessDefinitionElement .. .9 7.12.2 Recipe Structure... 11 7.12.3 Parameterization ... .13 7.12.4 TransferContainer . 15 7.13 Realizing the Purpose.... ..15 8 Requirements. 15 8.1 Requirements Overview ... ..15 8.2 Recipe Object Model . 16 8.3 PDE\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # Table of Contents (Part 2)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # Table of Contents\n\nContent: Class Diagram ... ..16 8.3.2 PDEheader Class . 17 8.3.3 AntecedentData Class.... ..18 8.3.4 ReferencedPDE Class...... .19 8.3.5 ExecutionTarget Class..... .19 8.3.6 PDEparameter Class ..... 20 8.3.7 PDEbody Class.. ..21 8.3.8 PDEbodyReference Class... 21 8.4 RaP Services. 21 8.5 RaPnode Requirements and Clarifications.. .33 9 Compliance.. ... 36 10 Related Documents.. 37\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # List of Figures\n\nFigure 1 — RaP Subject Matter.. .3\nFigure 2 — RaPnodes.. .8\nFigure 3 — PDE Contents .. .10\nFigure 4 — PDE With Separate PDEbody . .11\nFigure 5 — Recipe Structure Illustration.. .12\nFigure 6 — Parameter Flow Illustration . .14\nFigure 7 — PDE Class Diagram.... .16\nFigure 8 — RaPnode Class Diagram. 22\nFigure 9 — TransferContainer Illustration .. .32\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # List of Tables (Part 1)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # List of Tables\n\nContent: Table 1 — Attribute Table Format . .6 Table 2 — Navigable Associations for Class xxx . Table 3 — PDE Class Attributes.. 17 Table 4 — Navigable Associations for PDE ... .. 17 Table 5 — PDEheader Class Attributes.. .17 Table 6 — Navigable Associations for PDEheader .. ..18 Table 7 — AntecedentData Class Attributes. 19 Table 8 — Navigable Associations for AntecedentData .. 19 Table 9 — ReferencedPDE Class Attributes... .19 Table 10 — ExecutionTarget Class Attributes .... .20 Table 11 — PDEparameter Class Attributes .. ..20 Table 12 — PDEbody Class Attributes . 21 Table 13 — PDEbodyReference Class Attributes ... .21 Table 14 — RaPnode Class Attributes . .22 Table 15 — Service Descriptions .. 23 Table 16 — Service Parameter Dictionary . .23 Table 17 — Service Parameters . 28 Table 18 — Req/Ind and Rsp/Cnf Codes 28 Table 19 getPDEdirectory() Service Parameters.. 28 Table 20 — deletePDE() Service Parameters.. .29 Table 21 — getPDEheader() Service Parameters ... .29 Table 22 — getPDE() Service Parameters . 29 Table 23 —\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # List of Tables (Part 2)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # List of Tables\n\nContent: requestToSendPDE() Service Parameters..... ..30 Table 24 — sendPDE() Service Parameters.. 30 Table 25 resolvePDE() Service Parameters.. 31 Table 26 — verifyPDE() Service Parameters .. ..31 Table 27 — RaP Compliance Table .. 37\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 1  Purpose (Part 1)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 1  Purpose\n\nContent: 1.1 The purpose of this specification is to specify the cooperative interaction between the Factory Information & Control System (FICS) and the equipment to manage the specifications of equipment processing (for instance, equipment recipes). 1.2 There are six primary elements that must be supported to achieve this purpose: • On-tool & Off-tool Recipe Management — Support the management of multi-part recipes within the equipment as well as at the FICS level without the requirement that these management applications be integrated. • Recipe Integrity — Guarantee that the recipes that define process execution on a piece of equipment are the same as those intended for that use within the FICS. • Process Integrity — Ensure that all configuration values/settings of the tool that can be changed by the user and which affect the process outcome can be managed by the host within the context of a process job. Adjustable Parameter Definition — Support the definition of recipe parameters to be used by other SEMI standards (for example SEMI E40)\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 1  Purpose (Part 2)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 1  Purpose\n\nContent: to adjust the parameter values in a consistent manner across all equipment. • On-tool & Off-tool Recipe Creation & Editing — Define a consistent interaction protocol between the FICS and the systems(s) that support recipe creation/editing functionality. • Information Accessibility — Make key information about the recipes visible to the FICS. 1.2.1 See $\\ S 7$ for a discussion of how the purpose is achieved. A summary is contained in ${ \\ P } \\mathrm { { 7 } } . 1 3$\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 2  Scope (Part 1)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 2  Scope\n\nContent: 2.1 This specification defines concepts, behavior, and services to support automated management of equipment recipes and related process definition elements within a semiconductor factory. It addresses the mechanisms for interaction between semiconductor equipment, recipe editors, and the Factory Information and Control System (FICS). 2.2 Figure 1 illustrates the interactions that are addressed in this specification. The thicker arrows are fully specified interfaces. The dashed arrows are completely unspecified interfaces that are shown here to aid in understanding the concepts of recipe management. The thinner arrow represents a partially specified interface (between equipment and recipe editor) that may be proprietary to the supplier. For this last interface, the messaging details are not specified, but the required function of the interface is defined. This will be further explained later in the document. 2.3 In summary, these are the interfaces that are specified in this document: $\\mathrm { F I C S } $ Equipment – full messaging\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 2  Scope (Part 2)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 2  Scope\n\nContent: services $\\mathrm { F I C S } P D E /$ Recipe Editor – full messaging services Equipment $ P D E /$ Recipe Editor – functional requirements only NOTICE: This standard does not purport to address safety issues, if any, associated with its use. It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 3  Limitations\n\n3.1  The following items are out of scope and are not specified in this document:  \n• The content or format of the PDEbody.\n• The message format and communication details of message services.\n• How PDEs are used or executed within the equipment.\n• How the FICS initiates execution of PDEs within the equipment.\n• How and when the parameter values are communicated to the equipment. How data is collected to document what $P D E s$ and parameter values were used in a specific situation. The interactions between a human user and the PDE/Recipe Editor. Design of FICS applications (for example, Station Controller and PDE/Recipe Manager as shown in Figure 1). These applications are shown to enhance the clarity of the content of this specification.\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 4.1  SEMI Standards1\n\nSEMI E5 — SEMI Equipment Communication Standard 2 (SECS-II)\nSEMI E30 — Generic Model for Communications and Control of SEMI Equipment (GEM)\nSEMI E40 — Standard for Process Job Management (PJM)\nSEMI E120 — Common Equipment Module (CEM)  \n4.2  ISO Standards2  \nuuid: ISO/IEC 11578:1996 Information technology - Open Systems Interconnection – Remote Procedure Call (RPC), http://www.iso.ch/cate/d2229.htm.  \n4.3  OMG Standards3  \nUnified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-67, available from http://www.omg.org/technology/documents/modeling_spec_catalog.htm.  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 5.1  SEMI Compilation of Terms\n\n5.1.1  Definitions or descriptions of many of the terms used in this specification can be found in the SEMI Compilation of Terms, available on the SEMI web site, http://www.semi.org/; and in the OMG UML specification. For terms related to object models, the definition from the OMG UML specification has precedence.  \n5.2  Abbreviations and Acronyms  \n5.2.1  FICS — Factory Information & Control System  \n5.2.2  PDE — Process Definition Element  \n5.2.3  RaP — Recipe and Parameter Management – this specification.  \n5.2.4  UML — Unified Modeling Language\n\nSEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 5.3  Definitions (Part 1)\n\nTitle: SEMI E139-0705 SPECIFICATION FOR RECIPE AND PARAMETER MANAGEMENT (RaP) - # 5.3  Definitions\n\nContent: 5.3.1 Checksum — a single unique value calculated from a sequence of data (a file, a string, etc.) that uniquely identifies that data. It is sometimes called a “digital fingerprint” or a “message digest”. No two (different) sequences of data are likely to have the same checksum. Therefore, a checksum can be used to check data integrity. A typical method is to 1) calculate the checksum for a data sequence; 2) deliver that data sequence and its checksum value to a separate entity; 3) the receiving entity recalculates the checksum value and compares it with the original from the sender. If the checksums are the same, the receiver is assured that the data has not been modified or corrupted. 5.3.2 Factory Information and Control System (FICS) — the software system that controls the operation of the factory and its equipment. It may include such components commonly referred to as the MES, Station Controllers, Recipe Managers, etc. 5.3.3 Module Parameter — settings that affect processing on an equipment module (typically a Process",
  "images": []
}