[
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service\n\nContent: 12.4 Delete — The service user may request to delete an object. 12.4.1 Parameters for Delete are listed in Table 11. Table 11 Delete Service 12.5 Attach — A service user may request an object to attach itself to the service user. 12.5.1 Parameters for Attach are listed in Table 12. Table 12 Attach Service 12.6 AttachSetAttr — A supervisor may request an attached object to set one or more attributes at any time while the object is attached. 12.6.1 Parameters for AttachSetAttr are listed in Table 13. Table 13 AttachSetAttr Service 12.7 Detach — The supervisor of an attached object may request the object to detach itself. 12.7.1 Parameters for Detach are listed in Table 14. Table 14 Detach Service 12.8 Reattach — An object may request an object attached to another supervisor to reattach to itself to the service user as its new supervisor. 12.8.1 Parameters for Reattach are listed in Table 15. Table 15 Reattach Service 12.9 AttachSupervisedObject — A service user may request a supervisor to attach a specified object."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service\n\nContent: 12.9.1 Parameters for AttachSupervisedObject are listed in Table 16. Table 16 AttachSupervisedObject Service 12.10 DetachSupervisedObject — A service user may request a supervisor to detach a specified attached object. 12.10.1 Parameters for DetachSupervisedObject are listed in Table 17. Table 17 DetachSupervisedObject Service 12.11 ObjectAction — A service user may request a specific action to be performed by, or on, a particular object. The object specifier represents either the target object as its owner, depending upon the object and action. 12.11.1 Completion, either normal (successful) or abnormal, may be indicated in either of two ways. If the action can be completed in a very short time, then it should be completed before a response to the request is sent. If the action takes more time than would be normal for the response, or if the action must wait for one or more conditions to be fullfilled, then a response to the request indicating the action will be performed later and the notification sent of its"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service (Part 3)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service\n\nContent: completion. See Section 12.12 below. 12.11.2 Figure 11 illustrates the first case, where the action is completed before the response is sent. The value of ObjectActionAcknowledgement should be set to any value other than “Action will be performed and notification sent later”. 12.11.3 It is recommended that OperationID be always set to a unique non-zero value. However, if a value of zero is used, then the host should not send additional request until informed of the results of the outstanding request. Otherwise it may be ambiguous to which request an ObjectActionCompletion notification pertains. The definition of the target object type must include specification of the specific actions that it supports, together with the arguments that are required and the arguments that are optional for each action. Table 18 ObjectAction Service 12.12 ObjectActionCompletion Notification — This notification is sent to the requestor of an earlier action when the completion of that action occurred after the response to the request was"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service (Part 4)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 10  Create Service\n\nContent: sent. 12.12.1 Figure 12 illustrates the scenario where the notification message is sent. The value of ObjectActionAcknowledgement should be set to “Action will be performed and notification sent later”. Table 19 ObjectActionCompletion Notification 12.13 GetServiceNames — A service user may ask an object owner for a list of the services supported by its owned objects. 12.13.1 The definition of the target object type must include specification of the specific actions that it supports, together with the arguments that are required and the arguments that are optional for each action."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # Table 20  GetServiceNames Service",
    "content": "12.14  GetServiceParameters — This message may be sent to an object to determine the service parameters that are used by that object for a set of different services that it supports.  \nTable 21  GetServiceParameters"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications\n\nContent: 13.1 This section provides examples of applications of object services. 13.2 Get All of an Object’s Attributes — In the most straight-forward case, GetAttr is used to get all of the current attribute values of a single target object known to the provider of the GetAttr service. The object specifier is omitted, and the object type is set to the type of the target object. To get all of the object’s attributes, both the attribute filter and the names of requested attributes are also omitted. 13.3 Determine All Objects of a Specific Type and with Specific Characteristics — To determine subordinate objects with specific characteristics, such as of type “Module” with an identifier ObjID starting with “ABC”, set object type to “Module”. In the attribute filter, set the attribute name to “ObjID”, set the attribute value to $^ { 6 6 } \\mathrm { A B C ^ { * } } ^ { , , , }$ , and set the qualifying relationship to “is equal to” (or omit it). 13.4 Determine Specific Attributes of a Specific Object Instance — To determine the current"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications\n\nContent: value of certain attributes of a specific object, set the object type appropriately. Either set the list of ObjID to a list containing the one identifier of the target instance, or alternatively, in the attribute filter, set the attribute name to “ObjID”, set the attribute value to the identifier, and set the qualifying relationship to “is equal to” (or omit it). 13.5 Determine Types of Subordinate Objects — To determine all object types that are owned by another object, the GetType service is used with the single parameter of the object specifier of the owner. The service provider returns an error of “Unknown object type” if it has no types of owned objects. 13.6 Determine Names of Attributes of Subordinate Objects — To determine the names of the attributes of specific objects owned by the service provider, the GetAttrName service is used with two parameters: the object specifier of the owner and a list of the types of the target objects. The service provided returns an error of “Unknown object type” if it has no types of"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications (Part 3)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 13  Applications\n\nContent: owned objects."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 14  Requirements for Compliance (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 14  Requirements for Compliance\n\nContent: 14.1 Object Services are common to all service resources that define public objects with operations for getting (reading) and setting (writing) attribute values and for getting object types and attribute names for objects. Object services provide common definitions for public objects and object services that may be incorporated into these service resources, thereby avoiding unnecessary duplication. 14.2 Fundamental Requirements All objects compliant to any part of OSS shall be subtypes of the top object. That is, they shall inherit (provide) the ObjType and ObjID attributes as described in Section 8.2. 14.2.1 They shall provide documentation of their public attributes in the form of an Object Attribute Definition table as described in Section 5.2. 14.2.2 They shall also provide the services GetAttr and SetAttr as defined in Section 11.5. Support for an owner’s object specifier and filter are not required for fundamental compliance with OSS. If the service user provides parameters for scope or filter in its"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 14  Requirements for Compliance (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 14  Requirements for Compliance\n\nContent: request, they may be ignored by the service provider. However, they shall not cause errors in the response due to their presence."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # 14.3  Additional Capabilities",
    "content": "14.3.1  Filters — Support for attribute filters in GetAttr and SetAttr requests is an optional capability.  \n14.3.2  Owner Objects — All owner objects (aggregates, containers, and supervisors) shall support both scope and filters for the GetAttr and SetAttr services, as defined in Sections 9.3, 11.2, and 11.3.  \n14.3.2.1  In addition, they shall provide the service GetType as defined in Section 11.6, with support for wild characters in the specification of object types.  \n14.3.3  Multiple Inheritance Hierarchy  Inheriting objects shall identify inherited objects with an inheritance expression in the object specifier."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # APPENDIX 1",
    "content": "NOTICE: The material in this appendix is an official part of SEMI E39 and was approved by full letter ballot procedures on March 16 and April 21, 2000 by the Japanese Regional Standards Committee."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology\n\nContent: A1-1.1 This section provides an introduction to the basic terminology for object models. A1-1.2 A model is an abstraction of a problem, a realworld phenomena, things, etc. for the purpose of understanding it. A model typically is a simplification that omits nonessential details. Examples: architectural scale models, behavioral state models. A1-1.3 An object is an entity (concept, abstraction, or “real world” thing) with a particular behavior and with associated properties (information, or attributes). An object type (class) refers to a group of objects that have common (1) properties (but not specific values), (2) behavior, (3) relationships with other objects, and (4) semantics (public interfaces). The term “object” may be used either to refer to a type of object or to a particular instance of an object type.8 The notation used for diagrams of objects used in this document is described in Section A1-2. A1-1.4 An object model is a static graphic model of objects to show structure — the identity of"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology\n\nContent: objects, their attributes and operations, and their relationships with one another. A1-1.5 An instance of an object is an instantiation of an object type. For example, a specific installation of equipment is an instance of the object type “Equipment.” A1-1.6 Objects have items of associated information called attributes. For example, for an object “Equipment,” attributes of interest include the manufacturer, model, serial number, and a logical userassigned name (nickname). Attributes used to uniquely identify a particular instance of an object type is called an identifier. An object may have more than one identifier. Also, a set of more than one attribute may be used as an identifier. In the example of “Equipment,” name could be used as an identifier, and the combination of manufacturer and serial number also could be an identifier. A1-1.7 Objects have operations that may be applied to or by an object type. Operations are functions or transformations that are either performed by, or on, an object."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology (Part 3)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology\n\nContent: Operations of interest to Object Services are “get (read) attributes,” “set (write) attributes,” and “get type.” A service provides a service user with an interface to the functionality of the operation. A1-1.8 A high-level model may show a particular type of object with certain operations, while a more detailed model shows that a second type of object actually performs one or more of the operations on the first object. As an example, a model might show a process program object with the operation “delete,” to show that the “delete” operation is inherently associated with the process program. A more detailed model might show that a “process program manager” actually performs the operation of deleting a process program. A1-1.9 A method is an implementation of an operation (e.g., the software code that performs the operation). A1-2.2.3 Instances of objects are shown as rounded rectangles. The instantiation relationship is shown by a dotted arrow from an instance of an object type to the type. A1-2-2.4 The"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology (Part 4)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-1  Overview of Object Terminology\n\nContent: example for an object type “Equipment” is shown in Figure A1-2; here “Etch01” is a specific real-world installation of type “Equipment.” Figure A1-2 Example of Object Type and Instance A1-2.3 Associations — An association describes a set of potential bi-directional relationships between instances of objects. An association uses a formal structure and semantics. A1-2.3.1 An association shows a specific multiplicity at both ends of the relationship. For example, a single factory manufacturing system may be associated with many equipment (one-to-many). Possible multiplicities of association types are shown in Figure A1-3."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation\n\nContent: A1-2.1 The material contained in this section is provided as a reference for auxiliary information. A1-2.1.1 Object Modeling Technique (OMT) is a graphical notation for models of objects that is useful for analyzing a wide variety of problems, in all phases of software design and development, and in preparing documentation. OMT was developed by Rumbaugh, Blaha, et al., in Object Modeling and Design, Prentice Hall, Englewood Cliffs, NJ, $\\mathbb { O } 1 9 9 1$ . OMT has been adopted by different standards to describe requirements in terms of objects and relationships between objects. The purpose of this document is to provide a description of OMT notation as a reference for such SEMI standards and other SEMI documents. A1-2.2 Basic Notation — Figure A1-1 illustrates notation for object type, showing object type, object attributes, object operations, object instance, and the relationship between an object type and instance. Figure A1-2 provides an example. A1-2.2.1 Object types in OMT are shown"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation\n\nContent: as rectangles. The rectangle may be further subdivided into two or three parts. The object type always appears at the top. Object attributes are shown in a second part of the rectangle. Operations are shown in a third part of the rectangle. High-level models often omit the operations section and sometimes omit the attributes section. A1-2.2.2 The name of an attribute may be followed by additional details, such as data type and initial value. Figure A1-3 Multiplicities of Associations A1-2.3.2 Figure A1-4 shows an example of a one-toone relationship. The name of the association (using a verb) appears above the line connecting a pair of objects and describes the relationship that the object to the left (or above) has to the object to the right (or below). Figure A1-4 Association of Objects A1-2.3.3 The name of the role of each object within the relationship may be placed beneath the line and near that object. Role names are nouns. In the example above, the roles might be “supervisor” and"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation (Part 3)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation\n\nContent: “subordinate.” Role names are optional. Figure A1-5 Qualified Association example, “vehicle” is a supertype with many subtypes, including “aircraft,” “automobile, “cart,” and “robot.” A1-2.3.4 A qualified association, shown in Figure A1- 5, uses a qualifier to reference an object. Qualifiers may be shown to specify the identifier used by one object to associate with instances of the other object. If Type-1 object is “Factory Host” and Type-2 object is “Equipment,” a user-assigned “name” attribute may be used as a qualifier for the equipment. Figure A1-8 Non-Overlapping Subtypes A1-2.3.5 Figure A1-6 illustrates a link object, where link attributes are placed in an object box that is attached to the association with a loop. A link object may be used to show attributes that are dependent on the association between instances of one object type to instances of another type. A1-3.1.1 An instance of a subtype is also an instance of its supertype. Attributes and operations of the supertype are"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation (Part 4)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation\n\nContent: inherited by all the subtypes. That is, the subtype has all of the same attributes and operations of the supertype, and in addition it adds attributes and operations of its own. Figure A1-6 Link Object A1-3.1.2 The OMT notation for the generalization (supertype/subtype) relationship is shown by a solid triangle. White triangles indicate that the subtypes are non-overlapping; an instance of one subtype may not be an instance of another subtype. A1-3.1.3 The method for a subtype of an object might be different from that of the supertype or from a different subtype, perhaps due to more specialized knowledge that allowed a more efficient implementation for the subtype. As an example, a Geometrical Figure object type might have the operation “draw.” The methods for subtypes of “circle” and “rectangle” would differ, however. A1-2.3.6 Figure A1-7 gives an example of a link object for the association “Authorized On” between an “Authorized User” and “Equipment.” Figure A1-7 Example of a Link Object"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation (Part 5)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-2  Object Modeling Technique (OMT) Notation\n\nContent: A1-3.1.4 Figure A1-10 gives an example of an “agent” as a generalization of various types of active entities that might be found in a factory, and “equipment” as a generalization of specific kinds of equipment."
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance (Part 1)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance\n\nContent: Figure A1-9 Aggregation with Two Component Types A1-3.1 Figure A1-8 shows the concept of generalization. Generalization categorizes a set of object types and allows the abstraction of their common features into a supertype, with refinements of the supertype shown as subtypes. The subtype may be thought of as a specialization of the supertype. For A1-3.2 Object Composition and Containment — Figures A1-9 and A1-10 illustrate the diamond notation used to show aggregation. An aggregation object is also referred to as an assembly in object-oriented literature. Figure A1-10 An Example of Generalization Copyright by SEMI® (Semiconductor Equipment and Materials International), 3081 Zanker Road, San Jose, CA 95134. Reproduction of the contents in whole or in part is forbidden without express written consent of SEMI. A1-3.2.1 An aggregation object is composed of other objects called the components of the aggregation. Components may be of the same type as the aggregation (illustrated in Figure A1-10), or they may"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance (Part 2)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance\n\nContent: be of one or more different types. A1-3.2.2 In Figure A1-9, the “Superior” object type is composed of one or more objects of type “Subordinate-1,” of exactly one component of object type “Subordinate-2,” and of zero or one objects of type “Subordinate-3.” A1-3.2.3 In addition, an aggregate also may be optionally composed of other objects of the same type, as Figure A1-10 illustrates. The “agent” in this figure is a very general supertype of a factory system. Additional subtypes of agents, not shown in the figure, could include cells, clusters, and cluster modules. Cells, with equipment as components, and clusters, with modules as components, are examples of types of agents that are aggregates composed of other subtypes of agent. NOTICE: SEMI makes no warranties or representations as to the suitability of the standard set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s"
  },
  {
    "title": "SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance (Part 3)",
    "content": "Title: SEMI E39-0703 OBJECT SERVICES STANDARD: CONCEPTS, BEHAVIOR, AND SERVICES - # A1-3  Generalization and Inheritance\n\nContent: instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS)",
    "content": "This standard was technically approved by the Global Information & Control Committee and is the direct responsibility of the North American Information & Control Committee. Current edition approved by the North American Regional Standards Committee on March 12, 2003.  Initially available at www.semi.org May 2003; to be published July 2003. Originally published in 1995; previously published November 2002."
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 1  Purpose",
    "content": "1.1  This document maps the services and data of the parent document to SECS-II streams and functions and data definitions."
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 2  Scope",
    "content": "2.1  This document applies to all implementations of Object Services that use the SECS-II message protocol (SEMI E5).  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 3  Referenced Documents",
    "content": "SEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.  \nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services"
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 4  Mapping of Object Services",
    "content": "4.1  Table 1 shows the specific SECS-II streams and functions that shall be used for SECS-II implementations for the object services defined in OSS.  \nTable 1  Services Mapping Table"
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 5  Service Parameter Mapping",
    "content": "5.1  Table 2 shows the mapping between message parameters defined by OSS and data items defined by SECS-II. For parameters specified in the definitions of an OSS service, either the parameters themselves, or individual elements of complex parameters, map to a specific data item.  \nTable 2  Service Parameters Item Mapping Table"
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 5.2  SECS-II Data Items Without Corresponding SEMI E94 Parameters",
    "content": "5.2.1  Table 3 contains the SECS-II data items that do not correspond to SEMI E39’s service parameters.  \nTable 3  Additional Data Item Requirements Table"
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # 6  Data Item Format Restrictions",
    "content": "ATTRID Format: 20  \nThe ASCII version of ATTRID is restricted to the characters from $2 0 _ { 1 6 }$ through $\\mathrm { 7 E _ { 1 6 } } ,$ , excluding the following characters: the “greater than” symbol $^ { 6 6 } > ^ { , 9 }$ , the colon “:”, the question mark “? ”, the asterisk “\\*”, and the tilde $\" \\sim \"$ . The space character $( 2 0 _ { 1 6 } )$ may not be used as the first or last character. Maximum length is 40 characters."
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # OBJTYPE Format: 20 (Part 1)",
    "content": "Title: SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # OBJTYPE Format: 20\n\nContent: The ASCII version of OBJTYPE is restricted to the characters from $2 0 _ { 1 6 }$ through $7 \\mathrm { E } _ { 1 6 }$ , excluding the following characters: the “greater than” symbol $^ { 6 6 } > ^ { , , }$ , the colon “:”, the question mark “? ”, the asterisk “\\*”, and the tilde $\" \\sim \"$ . The space character $( 2 0 _ { 1 6 } )$ may not be used as the first or last character. Maximum length is 40 characters. OBJID Format: 20 The ASCII version of OBJID is restriced to the characters from $2 0 _ { 1 6 }$ through $\\mathrm { 7 E _ { 1 6 } } .$ , excluding the following characters: the “greater than” symbol $^ { 6 6 } > ^ { , , }$ , the colon “:”, the question mark “? ”, the asterisk “\\*”, and the tilde $\\cdots , v$ . The space character $( 2 0 _ { 1 6 } )$ may not be used as the first or last characer. The equipment shall allow the OBJID to be any length from 1 to 80 characters, inclusive. A zero length OBJID implies that no OBJID is specified. NOTICE: SEMI makes no warranties or representations as to the suitability of the"
  },
  {
    "title": "SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # OBJTYPE Format: 20 (Part 2)",
    "content": "Title: SEMI E39.1-0703 SECS-II PROTOCOL FOR OBJECT SERVICES STANDARD (OSS) - # OBJTYPE Format: 20\n\nContent: standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT",
    "content": "This standard was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org in June 2005 and on CD-ROM in July 2005.  Originally published in 1995; last published June 2003."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 1  Purpose (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 1  Purpose\n\nContent: 1.1 Automated management and command of material processing in equipment is a crucial aspect enabling factory automation. This standard addresses the communications needs within the semiconductor manufacturing environment with respect to the processing of material in equipment. 1.2 This standard specifies the application of the appropriate processing to specified material received at the processing agent. It describes the concepts of material processing, the behavior of the equipment in relation to processing, and the messaging services which are needed to accomplish the task. 1.3 The communications services defined here enable standards-based interoperability of independent systems. They allow application software to be developed that can assume the existence of these services and allow software products to be developed which offer them. 1.4 Implementation of automated processing management will help eliminate misprocessing of material. The adoption of the standards described will greatly reduce the effort required to integrate compliant equipment"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 1  Purpose (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 1  Purpose\n\nContent: components and reduce time to set up for processing. Compliance requires a minimal but specific set of standard services."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope\n\nContent: 2.1 The scope of this standard is automated material processing based on discrete processing jobs. It provides the functionality required for process management for modules within a cluster tool. It may be applied to sub-systems of other multi-resource equipment, as well as to host control of many types of equipment. 2.2 This standard supports individual management of jobs for identical processing of material within a group and concurrent processing of independent groups. Where material contains other material (such as carriers containing wafers), processing may be specified in terms of either material type. 2.3 A simple tuning mechanism is provided for limited feedforward and feedback control between process steps. A method is defined for taking advantage of recipe variable parameters. This is not expected to satisfy all closed loop control requirements. Other mechanisms are anticipated with greater flexibility for late tuning and handling complex data. 2.4 This standard does not provide services for receiving material for processing, or disposing of it"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope\n\nContent: after processing is complete. Automation of material transfer is assumed to be provided through other services, such as those defined in applicable SEMI standards. 2.5 This standard presents a solution from the concepts and behavior down to the messaging services. It does not define the messaging protocol. 2.6 A messaging service includes the identification that a message shall be exchanged and a definition of the data which is contained in that message. It does not include information on the structure of the message, how the data is represented within the message, or how the message is exchanged. This additional information is contained within the message protocol. 2.7 The defined services may be applied to multiple protocols. Information on the mapping of processing management services to special protocols (e.g., SECS-II) are added as adjunct standards. 2.8 The services assume a communications environment in which a reliable connection has been established between the user of the services and the provider of the services. Establishing, maintaining,"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 2  Scope\n\nContent: releasing a connection, and handling communication failures are beyond the scope of this standard. NOTICE: This standard does not purport to address safety issues, if any, associated with its use. It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 3.1  SEMI Standards",
    "content": "SEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nSEMI E30 — Generic Model for Communications and Control of Manufacturing Equipment (GEM)  \nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services  \nSEMI E53 — Event Reporting  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4  Terminology",
    "content": "4.1  The following definitions are arranged in alphabetical order. Some definitions use terms defined elsewhere within this section. No references beyond this section should be necessary for a basic understanding of these terms."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions\n\nContent: 4.2.1 agent — an intelligent system within a factory that provides one or more service resources and uses the services of other agents. A generalization of host, equipment, cell, cluster, cluster module, station controller, and work station. Agents are associated with a physical system or a collection of physical systems, including computer platforms. 4.2.2 form — type of data representing information contained in an object attribute or service message parameter. 4.2.3 fundamental requirements — the requirements for information and behavior that must be satisfied fo compliance to a standard. Fundamental requirements apply to specific areas of application, objects, or services. 4.2.4 post-conditioning — activities performed by the processing resource after departure of the material being processed but related to the processing of that material (e.g., cleanup). 4.2.5 pre-conditioning — activities performed by the processing resource before arrival of the material being processed but related to the processing of that material. 4.2.6 processing agent"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions\n\nContent: — an intelligent system within a factory which is independently capable of providing manufacturing value added to material. 4.2.7 processing resource — an entity within a processing agent which provides the manufacturing value added to material. 4.2.8 process job — a material processing job for a processing resource specifying and tracking the processing to be applied to the material. 4.2.9 recipe — the pre-planned and reusable portion of the set of instructions, settings, and parameters under control of a processing resource that determines the processing environment seen by the material. Recipes may be subject to change between runs or processing cycles. 4.2.10 recipe executor — a component of a module that stores and executes recipes. 4.2.11 recipe namespace — a logical management domain with the responsibility for the storage and management of recipes. It ensures the uniqueness of recipe identifiers and provides services pertaining to recipes stored within that domain. 4.2.12 service — the set of messages and definition of the behavior of a"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions\n\nContent: service-provider that enables remote access to a particular functionality. 4.2.13 service-provider — the software control entity that is the provider of a particular functionality which may be accessible remotely. 4.2.14 service-user — the software control entity that is the user of any of the related services. 4.2.15 supervisor — an entity or entities having supervisory control responsibilities for one or more processing resource. It is the service-user of the processing management services. 4.2.16 tuning — specification of information which supplements the pre-defined recipe used to achieve the particular process goals. 4.3 Data Type 4.3.1 boolean — may take on one of two possible values, equating to TRUE or FALSE. 4.3.2 enumerated — may take on one of a limited set of possible values. These values may be given logical names, but they may be represented by any single-item data type. 4.3.3 form — type of data: positive integer, unsigned integer, integer, enumerated, boolean, text, formatted text, structure, list, ordered list. 4.3.4 formatted"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions (Part 4)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 4.2  Definitions\n\nContent: text — a text string with an imposed format. This could be by position, by use of special characters, or both. 4.3.5 integer — may take on the value of any negative or unsigned integer. Messaging protocol may impose a limit on the range of possible values. 4.3.6 list — a set of one or more items that are all of the same form (one of the above forms). 4.3.7 ordered list — a list for which the order in which items appear is significant. 4.3.8 positive integer — may take the value of any positive whole number. Messaging protocol may impose a limit on the range of possible values. 4.3.9 structure — a complex structure consisting of a specific set of items, of possibly mixed data types, in a specified arrangement. 4.3.10 text — a text string. Messaging protocol may impose restrictions, such as length or ASCII representation. 4.3.11 unsigned integer — may take the value of any positive integer or zero. Messaging protocol may impose a limit on the range of possible values."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: 5.1 Harel State Model — This document uses the Harel State Chart notation to describe the dynamic behavior of the objects defined. An overview of this notation is presented in an appendix of SEMI E30. The formal definition of this notation is presented in Science of Computer Programming 8, “Statecharts: A Visual Formalism for Complex Systems,” by D. Harel, 1987. 5.1.1 The Harel notation does not include the concept of “creation” and “deletion” of state models to represent transient entities. The “job” described in this document is such an entity, where each new job created uses a copy of the same state model. In this document, an oval is used to denote the creation of an entity and also the deletion of that entity. 5.1.2 Transition tables are provided in conjunction with the state diagrams to describe explicitly the nature of each state transition. A transition contains columns for Transition #, Current State, Trigger, New State, Action(s). The “trigger” (column 3) for the transition occurs while in the “current” state. The “actions” (column 5)"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: include a combination of (1) actions taken upon exit of the current state, (2) actions taken upon entry of the new state, and (3) actions taken which are most closely associated with the transition. No differentiation is made. 5.1.3 The state models included in this standard are a requirement for Processing Management compliance. A state model consists of a state model diagram, state definitions, and a state transition table. When using SEMI E30, E53 or similar style collection events, all state transitions in this standard, unless otherwise specified, shall correspond to collection events. 5.1.4 A state model represents the host’s view of the equipment, and does not necessarily describe the internal equipment operation. When using collection events, all Processing Management state model transitions shall be mapped sequentially into the appropriate internal equipment collection events that satisfy the requirements of those transitions. In certain implementations, the equipment may enter a state and have already satisfied all of the conditions"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: required by the Processing Management state models for transition to another state. In the case, the equipment makes the required transition without any additional actions in this situation. 5.2 Object Attribute Representation — The object information models for standardized objects will be supported by an attribute definition table with the following column headings: 5.2.1 The Access column uses RO (Read Only) or RW (Read and Write) to indicate the access that service-users have to the attribute. 5.2.2 A ‘Y’ or ‘N’ in the requirement (Rqmt) column indicates if this attribute must be supported in order to meet fundamental compliance for the service. 5.2.3 The Form column is used to indicate the format of the attribute. (See $\\ P [ 4 . 1$ for definitions.) 5.3 Service Message Representation 5.3.1 Service Resource Definition — A service resource definition table defines the specific set of messages for a given service group, as shown in the following table: 5.3.1.1 Type can be either ${ \\bf N } =$ Notification or ${ \\bf R } = { \\bf R }$ equest."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 4)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: 5.3.1.2 Notification type messages are initiated by the service provider, and the provider does not expect to get a response from the consumer/subscriber. 5.3.1.3 Request messages are initiated by a service consumer or subscriber. Request messages ask for data or an activity from the provider. Request messages expect a specific response message (no presumption on the message content). 5.3.2 Service Parameter Dictionary — A service parameter dictionary table defines the parameters used in a service, as shown in the following table: 5.3.2.1 A row is provided in the table for each parameter of the service. The first column contains the name of the parameter. This is followed by columns describing the form and contents of the corresponding primitive. 5.3.2.2 The Form column is used to indicate the type of data contained in a parameter. (See $\\ P 4 . 2$ for definitions.) 5.3.2.3 The Description column in the Service Parameter Dictionary table describes the meaning of the parameter, the values it can take on, and any inter-relationships with other"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 5)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: parameters. 5.3.2.4 To prevent the definition of numerous parameters named “XxxList,” this document adopts the convention of referring to the list as “(List of) Xxx.” In this case, the definition of the variable Xxx will be given, not of the list. The term “list” indicates a collection (or set) of zero or more items of the same data type. Where a list is used in both the request and the response, the list order in the request is retained in the response. A list must contain at least one element unless zero elements are specifically allowed. 5.3.3 Service Message Definition — A service message definition table defines the parameters used in a service, as shown in the following table: 5.3.3.1 The columns labeled Req/Ind and Rsp/Cnf link the parameters to the direction of the message. The message sent by the initiator is called the “Request.” The receiver terms this message the “Indication” or the request. The receiver may then send a “Response,” which the original sender terms the “Confirmation.” 5.3.3.2 The following codes appear in the Req/Ind and"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions (Part 6)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 5  Conventions\n\nContent: $\\mathrm { R s p / C n f }$ columns and are used in the definition of the parameters (e.g., how each parameter is used in each direction):"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview\n\nContent: 6.1 Processing management is concerned with the processing of material by a processing resource. Its principle function is to ensure that material delivered to the processing resource is processed with the correct recipe. It defines the services needed by a supervisor (service-user) to initiate and track processing of a particular material. It also defines commands which affect the processing operation. 6.1.1 The processing resource is the entity which adds manufacturing value to the material. It may take several forms, including the processing element of a cluster tool process module or the entity managing processing for a complete stand-alone equipment. The processing agent is considered to be the provider of the processing services. 6.1.2 Process management allows for pre-conditioning before material arrival and post-conditioning after material departure. A simple tuning mechanism provides support for limited feedforward and feedback control. The tuning, applied at process initiation, sets recipe variable parameters. 6.1.3 The services are fully"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview\n\nContent: defined in terms of the functionality provided by the processing agent (service-provider) and, as such, do not dictate the architecture of the supervisor (service-user). 6.1.4 This standard describes the concepts and processing model on which the communications are based, followed by the detailed behavioral model used. It then describes the standard object attributes and message services in detail. 6.2 Compliance — Compliance to this standard includes adherence to all stated requirements in this document where implemented. Standard services are to be used where related functionality is required. This includes defined message services and state models. 6.2.1 Some capabilities are not required to be supported for compliance, such as queuing, multiple concurrent jobs, material groups, manual start, pause/resume, and tuning. Required capabilities are indicated throughout the document and are also listed in the Fundamental Requirements section. 6.2.2 A processing agent shall provide the funda-mental requirements, plus the set of optional services,"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 6  Overview\n\nContent: appropriate to achieve effective processing management for the particular hardware architecture and automated processing requirements."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: 7.1 Material Processing Model — Processing management ensures that the appropriate processing is applied to a particular material by a processing resource through the definition of a process job. The process job provides a widely applicable supervisory control capability for automated processing of material in equipment, irrespective of the particular process being used. 7.1.1 This standard assumes that, given the material and the recipe specification, the processing resource is capable of independently achieving the required processing objectives. 7.1.2 Processing management does not provide services for material movement, but the service-provider does need to coordinate its activities with regard to the receiving and sending of material, thereby maintaining system integrity. 7.2 Process Job — The process job is a dynamic ob-ject specified by the process supervisor (service-user) to effect material processing by the processing resource. The high-level job contains all the information required by the processing resource to achieve processing of the"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: material, once it arrives, without further intervention by the supervisor. 7.2.1 The process job encompasses up to four sequential phases: processing resource pre-conditioning before material arrival, material and processing resource preparation for processing, material processing, and processing resource post-conditioning after material departure. 7.2.2 The material processing phase is the only phase in which the material is altered and is the only required phase. 7.2.3 This standard specifies services for the creation, control (pausing, aborting, etc.) and tracking of the process job. It does not define the low-level control of processing since this is application-dependent. The processing resource performing a process job is responsible for doing whatever is appropriate to achieve its processing objectives, as specified by the recipe and tuning parameters. 7.2.4 The material specified in a process job may be the actual single material elements to be processed or a container, such as in the case of a cassette of wafers. 7.2.5 The process job"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: lifecycle may extend beyond the active processing of the material. It may exist from before material arrival, through setup and processing, and until after material departure. This allows for material processing-related pre-conditioning of the processing resource before the material is received and for processing resource post-conditioning (e.g., cleanup) after material is sent. Pre-conditioning and post-conditioning support is not a fundamental requirement. 7.2.6 The processing resource may provide process job queuing in order to offer flexibility in systems where work is pre-scheduled or the order of material arrival is unknown. Queuing is the acceptance of multiple process jobs in advance of performing the processing activities. Queuing is generally needed to support more complex systems requiring concurrent and consecutive jobs (see below). The jobs are listed in the queue in the order created. Execution order may be significant, such as consecutive jobs on the same material. Queuing is not a fundamental requirement. 7.3 Relation to Material"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 4)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: Movement — Processing Management does not provide services for receiving material into the processing agent domain for processing or sending the material away after processing is complete. 7.3.1 Processing depends on the presence of the material, and material departure depends on process completion. There is also an interdependency requiring synchronization with material movement if processing resource preconditioning and post-conditioning are applied. The equipment is responsible for maintaining integrity between material transfer and processing. 7.3.2 Material movement management is outside the scope of this standard but may be achieved using applicable SEMI standards. 7.4 Processing Description — The description of the processing to be applied by the Process Job is crucial. The description may be supplied in the form of a Process Recipe (see SEMI E42) or a Process Program (see SEMI E30). This specification will define mes-sages referencing only Process Recipes. Where there are special considerations for using Process Programs instead of a Process"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 5)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: Recipe, they will be noted. 7.4.1 The process job includes a processing descrip-tion (a recipe or process program) identifier that shall be unique within the domain of the processing agent. The type and content of the processing description must be appropriate for the processing resource and the type of material. 7.4.2 Creation and management of recipes and process programs is outside the scope of this standard. 7.5 Process Tuning — Feedforward and feedback control between process steps is becoming increasingly important for process tuning in stabilizing processes, such as those which lack in-situ metrology, and demand increasing yields (or performance). The process tuning requirements differ considerably with application, and there is little consensus on any particular method. It is not the intention of this standard to provide compre-hensive support for process tuning, but rather to provide a simple mechanism which may be extended. Support for recipe tuning is not a fundamental requirement. 7.5.1 Processing management provides a mechanism for"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 6)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: specification of the type of recipe method to be applied. Two methods are defined in the standard: RecipeID only, and RecipeID and Variables. User-defined methods may also be used, requiring all com-municating entities to have a common understanding of the particular definition and application requirements. 7.5.2 The RecipeID only method accepts the identifier of the recipe to be applied but no additional tuning parameters. The application recipe body is not precluded from defining any application tuning, but there is no standardized support. 7.5.3 The RecipeID and Variables method provides a simple process tuning mechanism at process job creation to support limited run to run feedforward and feedback control. It defines the VariableTuning method, which supplies a list of variable names and values in the process job create. This sets variables defined in the recipe. Each variable name shall be one of the exposed variable definitions supported in recipe management, and its value shall fall within the range specified in the variable definition. 7.5.4"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 7)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: Recipe parameter names (RecipeVarName) shall be specified using the nomenclature defined for ‘Object Specification’ (ObjSpec) in SEMI E39 (Object Services Standard) within the scope of SEMI E40 (Note: see OBJSPEC in SEMI E5). This use of the ObjSpec nomenclature is required to unambiguously identify parameters within some complex recipes (e.g., cluster tool process recipes). If the specification of a recipe parameter is unambiguous, then the form of the ObjSpec may be simplified to just the parameter name. Using the ObjSpec nomenclature for SEMI E40 recipe parameter names requires an object model to describe equipment recipe structure. 7.5.5 Figure 1 shows an example of a typical set of cluster tool hierarchical recipe relationships. A processing parameter might be specified through Sequence Step AB, Process Recipe BB, Process Step CB, to Process Parameter DB. In this example, the object specifier for Process Parameter DB would be: “Sequence:Erma>SequenceStep:AB $>$ ProcessRecipe: BB>ProcessStep:CB>ProcessParameter:DB>” 7.6 Processing Material Groups —"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 8)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: Many equipment architectures require concurrent processing of groups of material. A single process job can control a group of material, with certain restrictions. All material in the group needs to be of the same type and processed identically. The processing of each material should be dependent on the arrival of the group. That is, the full material group shall be received by the equipment before processing begins and may not depart until all processing is complete. This ensures that the process job remains a simple logical control mechanism while maintaining robust control, good coordination with material movement, and effective material data tracking. 7.6.1 Two common examples of allowable material group processing are: a) an equipment receiving a cassette of wafers to be processed identically. All the wafers in the group are received together, in the cassette. The processing of the wafers may or may not be simultaneous but can only proceed once the cassette has arrived. All wafer processing shall complete before the cassette may be removed. Note"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 9)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: that this may alternatively be specified as a simple process job with the cassette as the material; and b) a cluster tool batch process module processing wafers together. Wafers are received singly. Processing of the wafer group in the batch chamber begins when all the wafers specified in the process job have arrived. Wafers are sent after processing is complete. 7.7 Concurrent Process Jobs — Concurrent process jobs is the situation where multiple jobs are active (not queued) at the same time. A single process job is not always appropriate for concurrent processing of multiple material. In such cases, multiple concurrent jobs shall be supported by the processing resource. Support of concurrent process jobs is not a fundamental requirement. 7.7.1 An example of concurrent wafer processing which may not be achieved with a single process job is a carousel type cluster tool process module. The processing of a single wafer is not dependent on the arrival of the group. In this case, concurrent process jobs would be created, one for each wafer, even if they"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 10)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: were to be processed identically. This allows effective control and tracking of the process jobs. 7.7.2 Processing management considers concurrent process jobs to be logically independent of one other. They are distinguished by unique job identifiers. Concurrent jobs may not apply to the same material because the processing resource may not have more than one active process job associated with a particular material. 7.7.3 There may be interdependencies between concurrent jobs due to resource availability and equipment hardware architecture. 7.8 Consecutive Process Jobs — Consecutive process jobs is a situation where multiple process jobs are applied to material while it is in the processing resource. The process jobs requested on the same material are maintained in the order received, and a subsequent job becomes active once the previous one has completed material processing. 7.8.1 A process job normally specifies all the processing to be applied to the material during a single visit to the processing resource. For example, a process job for a cluster"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 11)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: tool would specify all the processing in the multiple sequential steps in the various process modules of the tool. Certain situations may require application of subsequent process jobs to material without it leaving the processing resource. 7.8.2 Processing management requires that a subsequent process job on the same material does not interrupt the previous process job processing. The previous process job terminates immediately once it completes active material processing, even though the material has not left the processing resource, and it is superceded by the subsequent job. The material becomes associated with the superceding process job. This allows sequential processing and maintains a single active association between material and process job. 7.9 Process Job without Material — This standard is primarily intended for the management of material processing. However, it permits application of a process job to a processing resource which contains no processing material. This may be used to achieve processing resource conditioning which is not"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts (Part 12)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 7  Concepts\n\nContent: related to a specific material. 7.9.1 The process job has the normal control characteristics, except that it has no dependency on material arrival and terminates at the end of active processing. Support of process jobs without material is not a fundamental requirement."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: 8.1 This section provides a high-level definition of the communications between the supervisor and the processing resource needed to achieve material processing. It does not define the message detail, concentrating instead on the concepts. The message detail is addressed in $\\ S 1 0$ , Messaging Services. 8.2 Process Job Communications 8.2.1 Process Job Control Messaging — The control message flow for normal operation is presented in Figure 1. The arrows represent significant information exchange. 8.2.1.1 A detailed description of each message used in normal operation follows. 8.2.1.2 PR Job Create — The supervisor requests that the processing resource perform the specified process job. This request may be acted upon immediately, or queued for later execution if the processing resource is busy or the order of material arrival unknown. If the processing resource does not support queuing or the queue is full, the request may be rejected. The request shall supply a process specification in which the supervisor supplies such information as: identification"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: of the material to be processed, the recipe defining the processing, and whether processing will be started manually (optional, normal operation is automatic). 8.2.1.2.1 Upon receipt of the PR Job Create request and before acknowledging, the processing resource checks the process specifications to ensure that they are valid (i.e., that the specified parameters (recipe, material, manual start) are sufficient) and have legal values for the capabilities of the processing resource. Depending on its ability to queue jobs, it may also check such dynamic information as availability of the processing resource to receive the material or presence of correct material, etc., to determine whether to accept or reject. 8.2.1.2.2 The processing resource sets the process start attribute if automatic start is requested (normal operation). 8.2.1.3 PR Job Create Acknowledge — The processing resource informs the supervisor that the requested job i accepted or rejected, and if rejected, supplies error codes and textual reasons for the failure. 8.2.1.4 PR Job Setup — The"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: processing resource reports that the process job is active and setting up for process. It may have been on the queue or have just been created. If the material is not already present, the processing resource performs any pre-conditioning required then awaits material arrival. Upon arrival of all the material, it prepares for processing and automatically initiates processing if the process start attribute is set. 8.2.1.5 PR Job Processing — The processing resource reports that material processing has commenced. 8.2.1.6 PR Job Processing Complete — The processing resource reports that material processing is completed and that the material is available for removal. 8.2.1.7 PR Job Complete — The processing resource declares the process job to be complete once it has completed processing the material, the material has departed, and any required processing resource post-conditioning has completed. This message is also used when a process job ends abnormally. The message provides information on the success or failure of the processing and, if failed, supplies"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 4)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: error codes and textual reasons for the failure. 8.2.2 Process Job Informational Events — There are process job related events which may be of significance to the service-user. These are designated as “collection events” and shall be available for event reporting. This section describes those collection events and shows how they fit into the chronology of a process job. These collection events, as specified by the PRJobEvent service, shall be implemented per definition of one of the following standards, SEMI E30, SEMI E40, SEMI E53 or similar style events, as required by the service-user. The equipment may also optionally implement the collection events per the remaining standards. However, the service-user shall only utilize one of the standards for collection event implementations. The selection mechanism by the service-user is equipment specific. For example, it may be part of an equipment power-on process or via an equipment specific equipment constant. 8.2.2.1 If SEMI E30, SEMI E53 or similar style collection events are used for PRJobEvent, the"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 5)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: equipment may also implement equivalent events for the process job milestones as defined by the PRJobAlert service. 8.2.2.2 Collection event messages provide valuable information but are not strictly required to perform material processing. Therefore, it is expected that some message protocol implementations will provide a method by which the service-user may disable those events which are not needed in a particular implementation. For SEMI E40 style events, the activation for disabling the events is user specific. For SEMI E30, SEMI E53 or similar style events, the activation is as defined in those standards. 8.2.2.3 PR Job Waiting for Material — The processing resource reports that all required pre-conditioning has completed and that it cannot proceed until the process job material arrives. It is considered to be awaiting material arrival if it is not aware of activities in progress with the aim of receiving all or part of the material. This event may be generated only during process job setup. This event requires, at a minimum, PRJobID and Timestamp"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 6)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: as its data. 8.2.2.4 PR Job State Change — The processing resource reports that it has changed state. All state transitions in the state model Figure 4 shall trigger this collection event. These events require, at a minimum, variables PRJobID, PRJobState, and TimeStamp (SEMI E30). 8.2.3 Process Job Extended Messaging — In this section, the extended messaging of Abort/Stop/Cancel, Pause/Resume and manual Start Process is added to the normal messaging described above. The only extended functionality required to be supported in processing management is Abort. 8.2.3.1 A detailed description of each message used in extended operation follows. 8.2.3.2 PR Job Abort — The supervisor may command the processing resource to abort a process job at any time. The goal of the abort command is to end the process job activities as quickly as possible. This includes halting all processing of material in progress, which may result in an unknown material condition. Abort is intended for use when serious problems are detected and further damage needs to be prevented. The"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 7)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: abort command terminates the process job. In many cases, error recovery may be required before normal operation may continue and subsequent jobs can be executed. For processing equipment a part of the error recovery procedure may require the removal of substrates belonging to the aborted process job that still reside in the equipment. This is determined by the processing agent, which may use applicable service standards to handle the exception. 8.2.3.2.1 The abort command takes precedence over the stop, cancel, and pause commands. If the specified process ob is queued, the abort command acts identically to a cancel command. 8.2.3.3 PR Job Stop — The supervisor may command the processing resource to stop a process job at any time. The stop command terminates the job in an orderly manner. The object of the stop command is to cease the current activity at the next safe, convenient point, preserving material integrity. In the situation of processing equipment, this convenient point may require that all related substrates are sent to their output"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 8)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: destination. This implies that each material is either processed as specified in the recipe or not at all. As stop terminates the job, a new process job is needed to continue processing the material in the processing resource. If restart of the same job is needed, pause and resume should be used instead of stop. A new job is required if additional processing is needed after a job is stopped. 8.2.3.3.1 If the specified process job is queued, the stop command acts identically to a cancel command. 8.2.3.4 PR Job Cancel — The supervisor may cancel a process job which has not yet become active (e.g., a job which is queued). Cancel is used when the supervisor would like to remove a process job — to reschedule, for example — but does not want to affect process job activities already in-progress. A cancelled job is removed from the queue and ceases to exist. No physical action is associated with canceling a process job. If the specified process job is active, the processing resource shall reject this command. 8.2.3.5 PR Job Pause — The supervisor may issue a"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 9)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: command to pause a process job at any time. A pause command shall cause the processing resource to continue to the first safe, continual, pausing place and then cease activity. The activity may cease only at points that allow for resumption of the activity (see the resume command) such that material integrity is maintained and the processing goals are accomplished. Note that a paused process job may be aborted or stopped as an alternative to the resume command. In this case, the stop command may cause the equivalent of a resume in order to ensure material integrity (either fully processed or not processed at all) upon termination of the process job. 8.2.3.6 PR Job Resume — The resume command is used to continue a previously paused process job activity. 8.2.3.7 PR Job Create — The PR Job Create request as previously described is for normal automatic process job operation. If the process start attribute is not set, the processing resource waits for a manual start from the supervisor before processing the material. The control message flow for manual"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 10)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: start is presented in Figure 3. 8.2.3.8 PR Job Waiting for Start — The processing resource is ready to process once the material has arrived and has been prepared for processing. The processing resource reports that it is ready to process and is waiting for start, if the process job PRProcessStart attribute is not set. The PRProcessStart attribute is not set if the job is defined to start manually and the start command has not yet been received. The WAITING FOR START state shall be a safe condition which maintains material integrity. If the process job is stopped or aborted while in this state, the material will not have been altered. 8.2.3.9 PR Job Start Process — The supervisor which has defined a process job to start manually issues a PR Job Start Process to allow processing of the material to proceed when the processing resource is ready. The start may be issued at any time after process job creation. On receiving the start command, the processing resource sets the process start attribute and starts processing if it is already in the WAITING FOR"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 11)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: START state. 8.2.3.10 PR Job Start Acknowledge — The processing resource responds to the supervisor that the requested start process is accepted or rejected and, if rejected, supplies errorcodes and textual reasons for failure. 8.3 Process Job State Model — The process job is a transient entity. It is created on request of the supervisor, executes, and then is deleted by the processing resource. The job usually spans the time period from shortly before material is physically delivered to the processing resource, through the processing, and until shortly after material is taken away. 8.3.1 Process Job State Model Diagram — Figure 4 shows the Process Job State Model diagram. 8.3.2 Process Job State Descriptions — The detailed state definitions follow. 8.3.2.1 ABORTING (ACTIVE Substate) — While the PR Job is in the ABORTING substate, the processing resource is performing an abort or an optional error recovery procedure. The abort procedure will cause immediate termination of the processing. It is the responsibility of the processing resource to cease"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 12)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: physical activity as quickly as possible, having achieved a safe condition. NOTE 1: For processing equipment the termination may have to be followed by an error recovery procedure with which remaining substrates can be brought to the output destination. 8.3.2.2 ACTIVE — ACTIVE is the parent state of all substates where the context of an active process job execution exists. 8.3.2.3 EXECUTING (ACTIVE Substate) — EXECUTING is the parent state of those substates that refer to the preparation and execution of a process job. 8.3.2.4 SETTING UP (EXECUTING Substate) — While the PR Job is in the SETTING UP substate, the processing resource performs pre-conditioning, awaits material arrival, and prepares for material processing. Pre-conditioning includes all operations in the processing resource, which are required by the recipe in advance of material arrival. 8.3.2.4.1 In cases where the material is already present, it is simply prepared for processing. If pre-conditioning (without material present) is required to achieve the processing goals specified by the"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 13)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: recipe, the job fails and terminates. 8.3.2.5 PAUSE (ACTIVE Substate) — While the PR Job is in the PAUSE substate the processing resource is suspending or has suspended activity. 8.3.2.6 PAUSED (PAUSE Substate) — While the PR Job is in the PAUSED substate all processing resource activity has ceased. The PR Job is awaiting a RESUME (or STOP or ABORT) command. 8.3.2.7 PAUSING (PAUSE Substate) — While the PR Job is in the PAUSING substate, the processing resource continues to the first safe, continuable pausing place and then ceases activity. The activity may only cease at points that allow for resumption of the activity such that material integrity is maintained and the processing goals are accomplished. 8.3.2.8 PROCESSING (EXECUTING Substate) — While the PR Job is in the PROCESSING substate, the processing resource is doing the actual material processing using the equipment recipe(s) specified by the PR Job. 1 8.3.2.9 PROCESS COMPLETE (POST ACTIVE Substate) — While the PR Job is in the PROCESS COMPLETE substate the processing resource has completed"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 14)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: processing all material specified by the PR Job. When all material removed from the processing resource, processing resource performs any required post-conditioning. Postconditioning includes all operations in the processing resource after material departure, which are required by the recipe. 8.3.2.9.1 In cases where the process job is superseded by another process job on the same material and postconditioning is not required, the first job terminates successfully while the material is still present. If postconditioning is required, the second job may not supersede and remains on the queue. 8.3.2.10 QUEUED/POOLED — While the PR Job is in the QUEUED/POOLED substate, the process job has been accepted by the processing resource through a PR Job Create/Acknowledge transaction (such as PRJobCreate, PRJobCreateEnh, and PRJobMultiCreate) and is awaiting execution. One or more jobs may be in this state depending upon specific equipment capabilities. That is, if equipment does not support job queuing, then only one PR Job may be in this state at a time. If"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 15)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: equipment does support job queuing, then the number of jobs that may be in this state must at least be equal to the number of load ports on the equipment. Advanced equipment job management capabilities require multiple jobs (greater than two) be in this state per load port. 8.3.2.10.1 The order that jobs become active is dependent upon whether the equipment supports job queuing and/or job pooling. Example methods for job activation include FIFO (first-in/first-out) order, material arrival order, and host ordering of jobs (provided by additional services). The equipment may support only one method of selecting jobs for activation, or more than one method allowing only one method to be used at a time or more than one method to be used at a time. 8.3.2.10.2 All process jobs pass through this state. If the processing resource supports queuing/pooling, jobs may remain in this state for prolonged periods. In any case, a process job remains queued/pooled until the material positions (of the processing resource) needed for the process are available or are"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 16)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: already occupied by the material to be processed. 8.3.2.11 STOPPING (ACTIVE Substate) — While the PR Job is in the STOPPING substate, the processing resource is performing a stop procedure to terminate processing in an orderly manner. It is the responsibility of the processing resource to cease the current activity at the next safe, convenient point, preserving material integrity. For processing equipment this may require sending all related substrates to its output destination. This implies that each material is processed as specified in the recipe or not at all. 8.3.2.12 WAITING FOR START (EXECUTING Substate) — The substate WAITING FOR START is used only in manual start process jobs. It is entered once SETUP is complete and a PR Job Start Process has not yet been received by the processing resource. Manual start is defined by the supervisor in PR Job Create. 8.3.2.12.1 The job remains in this state, ready to process the material, until the PR Job Start Process is received or Abort or Stop terminates the job. 8.3.2.13 POST ACTIVE — This is the parent"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior (Part 17)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 8  Behavior\n\nContent: state of those states that refer to the final state (completion) of the process jobs. Process jobs that have completed, stopped or aborted should remain in this state until the trigger to transition to extinction is detected (see Table 1). If there is no Control Job associated with the process job, as in the case of the inline stepper/scanner, the process job should remain until all material associated with the process job has left the equipment or a process job specifying the same material replaces it. 8.3.2.14 STOPPED (POST ACTIVE substate) — This is the final state for those jobs that have been in the STOPPING state. 8.3.2.15 ABORTED (POST ACTIVE substate) — This is the final state for those jobs that have been in the ABORTING state. 8.3.3 Process Job State Transitions — The detailed state definitions are defined in Table 1. Table 1 Process Job State Transition Table"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 9  Object Definitions",
    "content": "9.1  Processing management defines one standard object, the Process Job.  \n9.2  Process Job Object Definition — The process job is a dynamic object created by the processing resource as requested by the supervisor. It tracks progress of the operations required and is deleted by the processing resource automatically upon completion. The process job is uniquely identified by the PRJobID attribute. The object attribute notation used in the table below is described in Conventions, $\\ P 5 . 2$ ."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 9.2.1  The attributes in Table 2 shall be accessible using Object Services Standard (SEMI E39).",
    "content": "Table 2  Process Job Attributes  \n9.2.2  A number of the ProcessJob attributes are composite data types.  The constituent data is defined in Table 3.  \nTable 3  Attribute Data Definitions"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10  Messaging Services Detail",
    "content": "10.1  This section defines the messaging services required to implement the processing management concepts. The messages were introduced in $\\ P [ 8 . 1$ . These services are independent of the messaging protocol used. They may be mapped to SECS-II (SEMI E5) or to other comparable protocols.  \n10.1.1  These messaging services define the messages to be used, the nature of the parameters contained within the messages, and data type of the parameters. Not defined here is the internal structure of the actual messages as transferred, including order of the parameters and how various data structures and data types are represented.  \n10.1.2  The service message notation used in the tables below is described in Conventions, $\\ P 5 . 3$ .  \n10.2  Service List — The following messages are exchanged between host and equipment for the purpose of accomplishing processing management tasks.  \nTable 4  Service List"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.3  Parameter Dictionary",
    "content": "Table 5  Parameter Dictionary, Part 1  \nTable 6  Parameter Dictionary, Part 2  \n10.4  Service Detail — The tables below define the parameters for each service. In some cases, parameters have additional detail which is defined in the parameter definition section."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh\n\nContent: Table 8 PRJobCreateEnh Service Detail 10.4.3 PRJobMultiCreate — This service creates multiple process jobs. Each job can be created uniquely. Table 9 PRJobMultiCreate Service Detail 10.4.4 PRJobDequeue — Remove one or more jobs from the queue. PRStatus shall indicate any jobs which could not be removed because they either did not exist or were in the PR JOB ACTIVE state. Table 10 PRJobDequeue Service Detail 10.4.5 PRJobCommand — All of the process job commands described in Section 8.2.3 are communicated using the PRJobCommand service. The commands are Abort, Stop, Cancel, Pause, Resume, and Start Process. This standard does not specify any required parameters. Abort is the only command which is required to be supported. Table 11 PRJobCommand Service Detail 10.4.6 PRJobAlert — Notification of process job milestones achieved by the processing resource are communicated using the PRJobAlert service. Process job milestones, which are described in $\\ P [ 8 . 2 . 1$ , are events which are important to the control and tracking of the process job."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh\n\nContent: The milestones required to be supported are PR Job Setup, PR Job Processing, PR Job Processing Complete, and PR Job Complete. An additional milestone, PR Job Waiting for Start, is used with the manual start option. Table 12 PRJobAlert Service Detail 10.4.7 PRJobEvent — Process job informational event notification, which is described in $\\ P 1 8 . 2 . 2$ , is communicated using the PRJobEvent service. These are defined for Waiting for Material and Process Job State Change events. Support for informational events is not required. Table 13 PRJobEvent Service Detail 10.4.8 PRJobSetRecipeVariable — Sends a request to change the settings for a list of recipe variable parameters. Implementation of this service is optional. Table 14 PRJobSetRecipeVariable Service Detail 10.4.9 PRJobSetStartMethod — Sends a request to change the start method for job(s). This request will fail if a specified job is not in the QUEUED/POOLED state. Implementation of this service is optional. Table 15 PRJobSetStartMethod Service Detail 10.4.10 PRGetAllJobs — This message"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 10.4.2  PRJobCreateEnh\n\nContent: shall return a list containing job identifiers and the associated states of those jobs for all jobs which have not completed. Table 16 PRGetAllJobs Service Detail 10.4.11 PRGetSpace — This message shall return the remaining number of jobs that can be created for the processing resource. Table 17 PRGetSpace Service Detail 10.4.12 PRSetMtrlOrder — Request the Processing Management Service to use a specific strategy for the order in which materials are processed. Table 18 PRSetMtrlOrder Service Detail 10.5 Mapping of Semantics to Syntax — Table 20 provides the correspondence between the message semantics defined in Section 8.2 and the syntax as defined in Section 10.4. The use of ‘.req’, ‘.rsp’, or ‘.nfy’ suffixes shows the direction of message flow. ‘.req’ is a message request from the service user to the service provider. ‘.rsp’ is a response message from the service provider to the service user. ‘.nfy’ is a notification from the service provider to the service user. Table 19 Correspondence of Message Semantics to Syntax"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 11  Variable Data",
    "content": "11.1  The purpose of this section is to define the list of variable data requirements for Processing Management compliant equipment.  Values of these variables are available to the host via collection event reports.  \n11.2  Variable Data Definitions — The identifier and all other attributes of the ProcessJob object shall be available for inclusion in event reports associated with it. The following attributes are most likely to be used: PRJobID, PRJobState, RecID, RecVariableList and PRMtlNameList."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance (Part 1)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance\n\nContent: 12.1 Processing management defines the standard services available to achieve job-based material processing in equipment. The capabilities supported allow flexible management of automated processing encompassing many process types. Only a subset of these capabilities may be needed for a particular implementation. 12.2 Fundamental Requirements — All processing agent implementations shall support the fundamental requirements. These have been indicated in the appropriate sections of the document and are listed together below: • Create and execute a single process job to completion, given: • a single material of the appropriate type, uniquely identified. • a unique recipe identifier for which the corresponding recipe can be found. • Detect and report the success or failure of the process job, indicating complete, partial, or non-processing of the material. • Support Abort of the process job at all times, immediately ceasing activity and terminating the process job. • Maintain the data of required process job attributes indicated in Table 2. • Reject"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance (Part 2)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance\n\nContent: requests with incomplete or invalid parameters. • Reject requests for capabilities not supported. • Implement the services and messages with the exception of those required for the Optional capabilities. 12.2.1 Satisfying fundamental requirements may not provide sufficient flexibility or performance for some equipment. In such cases, fundamental functionality should be supplemented by optional capabilities as appropriate to the needs of the system. 12.3 Additional Capabilities — Optional capabilities defined or enabled in this standard include: • Processing resource pre-conditioning and post-conditioning. Stop, Pause, and Resume of a process job. Manual process start. Process job queuing and Cancel on a queued job. Process tuning. Processing of material groups. Multiple concurrent process jobs. Multiple consecutive process jobs in a single visit. Process job with no material. Notification of waiting for material. • Implement PRJobCreateEnh and PRJobMultiCreate. • Report the process job milestones: Setup, Processing, Processing Complete, and Job"
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance (Part 3)",
    "content": "Title: SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # 12  Compliance\n\nContent: Complete. 12.3.1 The services are defined with mechanisms to reject unsupported services and options should they be requested. This improves robustness and enables sophisticated service-users to adjust their requests to the capabilities of the particular processing agent. 12.4 Table 21 provides a checklist for Processing Management (PM) compliance."
  },
  {
    "title": "SEMI E40-0705 STANDARD FOR PROCESSING MANAGEMENT - # Table 20  PM Compliance Statement",
    "content": "NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice.  \nThe user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD",
    "content": "This standard was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org in June 2005 and on CD-ROM in July 2005.  Originally published in 1995; last published in 2004."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose",
    "content": "1.1  This document maps the services and data of SEMI E40 to SECS-II streams and functions and data definitions."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope",
    "content": "2.1  This is the standard way to implement the Processing Management, which provides remote control of wafer processing, using the SECS-II message protocol.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 3  Referenced Standards and Documents",
    "content": "3.1  SEMI Standards  \nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nSEMI E40 — Standard for Processing Management  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Terminology",
    "content": "4.1  None."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Mapping of Processing Services",
    "content": "Table 1  Processing Management Messages Mapping"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Mapping of Processing Parameter",
    "content": "Table 2  Data Item Mapping"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Variable Data Item Mapping",
    "content": "7.1  This section shows the specific SECS-II data classes, and formats needed for SECS-II implementations of SEMI E40 variable data.  According to SEMI $\\mathrm { E 4 0 ~ \\ S 1 1 }$ , all ProcessJob object attributes are to be available as variables for Process Job state transition events.  These variables will be of SEMI E5 data item DVVAL."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8  Implementation Details",
    "content": "8.1  Use of Object Services — Several capabilities of the Processing Management Services are accessed through the Object Services Standard. Whan a Process Job has been created, (PRJOBID is valid), then its attributes can be read and written using the Object Services GetAttr and SetAttr messages.  \n8.1.1  E39 Object Services shall be used for access to ProcessJob attributes.  The GetAttr service may be used for all ProcessJob attributes and the SetAttr service may be used on only those attributes whose Access is set to RW.  \n8.2  Multi-Block Messages — Processing Management Services is protocol independent and therefore, makes no mention of SECS-II multi-block access and grant messages. When these Service use the SECS-II protocol, then S16F3,F5 shall be preceded by an S16F1/S16F2 access request/grant message exchange when the message will be multi-block."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 9  SECS-II Attribute Definitions (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 9  SECS-II Attribute Definitions\n\nContent: 9.1 Process Job Object SECS-II Attributes Definitions — The following are the SECS-II structure definitions for the E40 ProcessJob object. Table 3 Process Job SECS-II Attribute Definitions NOTICE: SEMI makes no warranties or representations as to the suitability of the standard set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 9  SECS-II Attribute Definitions (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 9  SECS-II Attribute Definitions\n\nContent: expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose\n\nContent: 1.1 Interactive exception handling enhances the error recovery ability while maintaining automated control in the factory. This standard addresses the communications needs within the semiconductor manufacturing environment with respect to equipment exception handling. 1.2 This standard specifies capabil ities to be provided by the exception agent for effective reporting and interaction with respect to abnormal situations in the equipment. It describes the concept of exception management, the behavior of the equipment in relation to interactive exception handling, and the messaging services which are needed to provide the functionality. 1.3 The communications services defined here will enable standards-based interoperability of independent systems. They shall allow application software to be developed which can assume the existence of these services and allow software products to be developed which offer them. 1.4 Implementation of automated exception management will help reduce error recovery time and avoid changing from automatic to"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose\n\nContent: manual equipment control in many situations. The adoption of the standards described will greatly reduce the effort required to integrate compliant equipment components. Compliance requires a specific set of standard services."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope\n\nContent: 2.1 The current scope of this stand ard is interactive exception handling within a cluster tool. 2.2 While the functionality provid ed may be applied to other multi-resource equipment, it may not provide the flexibility required for automated management and command by the factory of all types of equipment. It is anticipated that this standard will be extended to accommodate management of exceptions in other types of multi-resource equipment and by the factory of all types of equipment. 2.3 This standard supports excepti on condition reporting, including alarms, by an exception agent to a decision authority. The exception agent also has the ability to enable and disable reporting on each exception condition. 2.4 Interactive exception handling is supported through selection by the decision authority of recovery actions in certain situations. The recovery actions are performed by the exception agent with the goal of resolving the abnormal situation and allowing normal equipment operation to continue. 2.5 This standard presents a soluti on"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope\n\nContent: from the concepts and behavior down to the messaging services. It does not define the messaging protocol. 2.6 A messaging service includes the identification that a message shall be exchanged and definition of the data which is contained in that message. It does not include information on the structure of the message, how the data is represented within the message, or how the message is exchanged. This additional information is contained within the message protocol. 2.7 The defined services may be a pplied to multiple protocols. Information on the mapping of exception management services to special protocols (e.g., SECSII) are added as adjunct standards. 2.8 The services assume a commu nications environment in which a reliable connection has been established between the user of the services and the provider of the services. Establishing, maintaining, releasing a connection, and handling communication failures is beyond the scope of this standard."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 3.1  SEMI Standards",
    "content": "3.2  The following SEMI1  standard is related to the Exception Management standard:  \nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions\n\nContent: The following definitions are arranged in alphabetical order. Some are defined using terms defined elsewhere within this section. No references beyond this section should be necessary for a basic understanding of these terms. agent — an intelligent system within a factory that provides one or more service resources and uses the services of other agents. A generalization of host, equipment, cell, cluster, cluster module, station controller, work station. Agents are associated with a physical system or a collection of physical systems, including computer platforms. alarm — an alarm is related to any abnormal situation of the equipment that may endanger people, equipment, or material being processed. clearing — exception agent to decision authority reporting that an abnormal situation related to an exception condition is no longer apparent or relevant. decision authority — an entity requiring to be notified of significant exception condition changes and which decides how to proceed to resolve abnormal situations related to recoverable"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions\n\nContent: error conditions. The decision authority may be represented by a supervisory controller interacting with an operator who may ultimately choose the recovery action. error condition — an exception condition which is not an alarm and which may support recovery actions requested by a decision authority. exception agent — the entity which manages access to and reporting of information on abnormal situations in equipment. It achieves this by defining exception conditions, each related to a significant abnormal situation. It may provide services for a decision authority to direct the recovery from certain situations. exception condition — a condition managed by an exception agent for reporting on and recovery from an abnormal situation in the equipment. form — type of data representing information contained in an object attribute or service message parameter. The data types are detailed in Section 4.1. fundamental requirements — the requirements for information and behavior that must be satisfied for compliance with a standard."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions (Part 3)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Definitions\n\nContent: Fundamental requirements apply to specific areas of application, objects, or services. posting — all exception agent to decision authority reporting associated with an exception condition while the related abnormal situation is apparent and relevant. recovery action — an operation associated with an error condition with the aim of resolving the abnormal situation detected. It may supply information to the exception agent or request the exception agent to perform some activity. service — the set of messages and definition of the behavior of a service provider that enables remote access to a particular functionality. service-provider — the software control entity that is the provider of any of the related services. service-user — the software control entity that is the user of any of the related services."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4.1  Data Type (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4.1  Data Type\n\nContent: form — type of data: positive integer, unsigned integer, integer, enumerated, boolean, text, formatted text, structure, list, ordered list. positive integer — may take the value of any positive whole number. Messaging protocol may impose a limit on the range of possible values. unsigned integer — may take the value of any positive integer or zero. Messaging protocol may impose a limit on the range of possible values. integer — may take on the value of any negative or unsigned integer. Messaging protocol may impose a limit on the range of possible values. enumerated — may take on one of a limited set of possible values. These values may be given logical names, but they may be represented by any single-item data type. boolean — may take on one of two possible values, equating to TRUE or FALSE. text — a text string. Messaging protocol may impose restrictions, such as length or ASCII representation. formatted text — a text string with an imposed format. This could be by position, by use of special characters, or both. structure — a"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4.1  Data Type (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4.1  Data Type\n\nContent: complex structure consisting of a specific set of items, of possibly mixed data types, in a specified arrangement. list — a set of one or more items that are all of the same form (one of the above forms). ordered list — a list for which the order in which items appear is significant."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Conventions (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Conventions\n\nContent: 5.1 Harel State Model — This document uses the Harel State Chart notation to describe the dynamic behavior of the objects defined. An overview of this notation is presented in an Appendix of SEMI E30. The formal definition of this notation is presented in Science of Computer Programming 8, “Statecharts: A Visual Formalism for Complex Systems,” by D. Harel, 1987. Transition tables are provided in conjunction with the state diagrams to describe explicitly the nature of each state transition. A transition contains columns for Transition #, Current State, Trigger, New State, Action(s). The “trigger” (column 3) for the transition occurs while in the “current” state. The “actions” (column 5) include a combination of (1) actions taken upon exit of the current state, (2) actions taken upon entry of the new state, and (3) actions taken which are most closely associated with the transition. No differentiation is made. 5.2 Object Attribute Representatio n — The object information models for standardized objects will be supported by an"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Conventions (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Conventions\n\nContent: attribute definition table with the following column headings: The Access column uses RO (Read Only) or RW (Read and Write) to indicate the access that service-users have to the attribute. A ‘Y’ or $\\mathbf { \\cdot } \\mathbf { N } ^ { \\mathbf { \\cdot } }$ in the requirement (Rqmt) column indicates whether or not this attribute must be supported in order to meet fundamental compliance for the service. The Form column is used to indicates the format of the attribute. (See Section 4.1 for definitions.)"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n\n\nContent: 5.3.1 Service Resource Definition — A service resource definition table defines the specific set of messages for a given service group, as shown in the following table: Type can be either ${ \\bf N } =$ Notification or ${ \\bf R } = { \\bf \\Psi }$ Request. Notification type messages are initiated by the service provider, and the provider does not expect to get a response from the consumer/subscriber. Request messages are initiated by a service consumer or subscriber. Request messages ask for data or an activity from the provider. Request messages expect a specific response message (no presumption on the message content). 5.3.2 Service Parameter Dictionary — A service parameter dictionary table defines the parameters used in a service, as shown in the following table: A row is provided in the table for each parameter of the service. The first column contains the name of the parameter. This is followed by columns describing the form and contents of the corresponding primitive. The Form column is used to indicate"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n\n\nContent: the type of data contained in a parameter. (See Section 4.1 for definitions.) The Description column in the Service Parameter Dictionary table describes the meaning of the parameter, the values it can assume, and any interrelationships with other parameters. To prevent the definition of numerous parameters named “XxxList,” this document adopts the convention of referring to the list as “(List of) Xxx.” In this case, the definition of the variable Xxx will be given, not of the list. The term “list” indicates a collection (or set) of zero or more items of the same data type. Where a list is used in both the request and the response, the list order in the request is retained in the response. A list must contain at least one element unless zero elements are specifically allowed. 5.3.3 Service Message Definition — A service message definition table defines the parameters used in a service, as shown in the following table: The columns labeled Req/Ind and Rsp/Cnf link the parameters to the direction of the message."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n (Part 3)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5.3  Service Message Representatio n\n\nContent: The message sent by the initiator is called the “Request.” The receiver terms this message the “Indication” or the request. The receiver may then send a “Response,” which the original sender terms the “Confirmation.” The following codes appear in the Req/Ind and Rsp/Cnf columns and are used in the definition of the parameters (e.g., how each parameter is used in each direction): “M” — Mandatory parameter — must be given a valid value. “C” — Conditional parameter — may be defined in some circumstances and undefined in others. Whether a value is given may be completely optional or may depend on the value of another parameter. “U” — User-defined parameter. “-” — The parameter is not used. “=” — (for Response only) Indicates that the value of this parameter in the response must match that in the primary (if defined)."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Overview (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Overview\n\nContent: Exception management is concerned with the interactive handling of equipment exception conditions. This standard defines the services provided by which abnormal situations are reported by an exception agent (service-provider) to a decision authority (service-user). In the case of recoverable situations, services are provided for a decision authority to choose how to proceed to resolve the abnormal situation. The exception agent is the equipment entity which manages access to and reporting of information on abnormal situations. It achieves this by defining exception conditions, each related to a significant abnormal situation. All services are defined in terms of these exception conditions. Exception management allows for the decision authority to direct the resolution of an abnormal situation. The decision authority selects a recovery action to be performed to resolve the situation from among the options supplied with the exception condition. The exception agent performs the requested recovery action, which may or may not resolve the"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Overview (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Overview\n\nContent: situation. The services are fully defined in terms of the functionality provided by the exception agent (serviceprovider) and as such do not dictate the architecture of the decision authority (service-user). This standard describes the concepts and exception condition model on which the communications are based, followed by the detailed behavioral model used. It then describes the standard object attributes and message services in detail. 6.1 Compliance — Compliance wi th this standard includes adherence to all stated requirements in this document where implemented. This includes defined message services and state models. There are two levels of compliance defined. The first is alarm reporting support. The second extends support to include interactive handling of recoverable exception conditions. Required capabilities are listed in Fundamental Requirements, Section 10.4."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: 7.1 Exception Management Model — The exception management model describes the mechanism for interactive handling of equipment exception conditions. An exception condition is a condition monitored in equipment by an exception agent (service-provider) for detecting an abnormal situation. Exception conditions are limited in this standard to those accessible by a remote decision authority (service-user). An exception condition is persistent, existing whether or not the abnormal situation currently exists. The abnormal situation is indicated by the exception condition state becoming SET. An exception agent is an entity which manages remote decision authority access to any number of exception conditions. Each exception condition is identified by a name which is unique for the exception agent. A decision authority is a remote entity requiring to be notified of exception condition information and which decides appropriate actions to take to resolve abnormal situations. The decision authority may be represented by a supervisory controller"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: interacting with an operator who may ultimately choose the recovery action. The exception agent notifies the decision authority on detection of an abnormal situation related to an exception condition (i.e., state is SET) and again when it is no longer apparent. It also provides access to exception condition attribute data and for the execution of recovery actions requested by the decision authority. Exception management defines two types of exception conditions: alarms and error conditions. An alarm is related to any abnormal situation on the equipment that may endanger people, equipment, or material being processed. Alarms do not provide for decision authority involvement in the resolution of the abnormal situation. An error condition is related to any abnormal situation detected which is made accessible to a decision authority. An error condition may supply a list of possible recovery actions from which the decision authority can select to attempt to resolve the abnormal situation, thereby resulting in the error condition state"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 3)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: becoming CLEARED. Being persistent, exception condition attributes may be queried at any time, and reporting of changes, such as state SET/CLEARED, can be disabled by the decision authority. 7.2 Posting and Clearing — Signi ficant changes in an exception condition are reported to the decision authority if enabled. The major significant events are the transitioning of the exception condition state to SET or CLEARED, which indicate that the abnormal situation has been detected or is no longer apparent, respectively. All significant information is sent when reporting that the exception condition state is SET. This includes the unique identifier, type, a message describing the abnormal situation, time and a list of possible recovery actions where appropriate. It is important to keep the decision authority updated on exception condition information while the abnormal situation exists, especially with respect to valid recovery actions. All changes in the list of possible recovery actions are reported to the decision authority while the"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 4)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: exception condition state is SET. The term posting is used to describe all reporting the transition to the SET state and while an exception condition state is SET. Clearing is the reporting of the occurrence of an exception condition state transition to CLEARED. Note that the exception agent, not the decision authority, transitions the state to CLEARED. Any acknowledgment at the decision authority of exception condition posting (e.g., by the operator) is not relevant to the exception agent. Exception condition changes while its state is CLEARED are not reported to the decision authority. 7.3 Enable/Disable Reporting — T he decision authority may enable and disable posting and clearing for a particular exception condition by setting and resetting its enabled attribute, respectively. Reporting on an exception condition is enabled by default. Note that the exception condition itself is not being enabled or disabled, but the reporting of its state is being enabled or disabled. Posting of an exception condition shall occur upon being"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 5)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: enabled if the exception condition state is SET. 7.4 Recovery Actions — Recovery actions provide a mechanism for a decision authority to assist in resolving an abnormal situation detected in the equipment. This is generally needed to resolve failure or conflict where information is required beyond the capabilities of the system. By supplying options related to each error condition, error recovery is directed to the problem area. One or more recovery actions may be associated with an error condition. A recovery action is any operation with the aim of resolving the abnormal situation detected. It may supply information to the exception agent or request it to perform some activity. A recovery action may be requested by the decision authority only when the error condition state is SET. Only recovery actions currently valid for the error condition are accepted by the exception agent. The list of valid recovery actions is supplied in the posting of an error condition. Changes in this list are notified by re-posting. A decision authority may"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts (Part 6)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Concepts\n\nContent: request any of the supplied recovery actions to be performed and is notified of acceptance to perform the recovery and, some time later, its completion. No more than one recovery action may be in progress on a particular error condition and it may be aborted by the decision authority at any time. A recovery action does not directly change the error condition state to CLEARED. It performs activities or provides information with the object of removing the abnormal situation which in turn changes the state to CLEARED. A recovery action may continue after the state has transitioned to CLEARED, until the activity initiated has completed. A recovery action is rejected if received when the error condition state is CLEARED. Since the exception agent must maintain system integrity by ensuring that incompatible operations are not performed concurrently, it may reject any recovery action requested."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8  Behavior",
    "content": "This section provides a high-level definition of the communications between the decision authority and the exception agent used in exception management. It does not define the message detail, concentrating on the concepts. The message detail is addressed in the Messaging Services section."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: 8.1.1 Exception Report Messaging — The message flow for exception reporting is shown in Figure 1. The arrows represent significant information exchange. A detailed description of each message used in exception reporting follows: EX Post — The exception agent has detected an abnormal situation which is monitored by an exception condition. It changes the exception condition state attribute to SET. The exception agent notifies the decision authority using the EX Post notification, supplying the following information: identification of the exception condition, type of exception, time, a message explaining the abnormal situation, a list of possible recovery actions (where available with error conditions). EX Post is re-sent every time the message or recovery action information changes as long as the exception condition state remains SET. The EX Post notification is not sent if reporting on the exception condition is disabled, that is, if the enabled attribute is false. The EX Post notification is sent when an"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: exception condition becomes enabled if the exception condition state is SET. Upon receipt of the EX Post, the decision authority has the information needed to take the appropriate action. This may include requesting the exception agent to perform one of the supplied recovery actions. EX Cleared — The abnormal situation detected by the exception agent is no longer apparent or relevant. The exception agent changes the exception condition state attribute to CLEARED. It notifies the decision authority using the EX Cleared notification, supplying the following information: identification of the exception condition, type of exception, time, a message. The EX Cleared message is not sent if reporting on the exception condition is disabled. That is, the enabled attribute is false. Upon receipt of the EX Cleared, the decision authority knows that the abnormal situation related to the exception condition is no longer apparent or relevant. 8.1.2 Recovery Action Messaging — In this section, the extended messaging of the"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 3)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: recovery action is added to the reporting messaging described above. Recovery actions are not available for alarms. The message flow for recovery actions is shown in Figure 2. A detailed description of each message used in recovery actions follows: EX Recover — The decision authority requests that the exception agent perform a recovery action. The particular recovery action selected is identified in the EX Recover request together with the related exception condition identifier. It shall be one of the recovery actions supplied for the exception condition in the EX Post notification. Upon receipt of the EX Recover request and before acknowledging, the exception agent checks that the specified recovery action is currently valid. The request shall be accepted and initiated immediately or rejected by the exception agent. The exception agent rejects a recovery action request if there is already a recovery action in progress on that exception condition. EX Recover Acknowledge — The exception agent responds to the"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 4)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: decision authority that the requested recovery action is accepted or rejected, and if rejected, supplies text reasons for failure. Acceptance of a recovery action indicates that the exception agent has initiated the operation. The operation continues to completion without further intervention by the decision authority. The recovery action may or may not result in the exception condition state changing to CLEARED and the recovery action may continue after the state becomes CLEARED. The exception agent may reject a requested recovery action for a number of reasons, including: unknown recovery for the exception condition, recovery currently invalid, busy with recovery for this exception condition, currently unable to perform the recovery (e.g., other conflicting activity or failure). EX Recovery Complete — The exception agent declares the recovery action to be complete once it has completed the associated operation. This message is also used when a recovery action ends abnormally. The message indicates whether"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 5)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: the operation completed normally and, if not, supplies text reasons for the failure. Note that normal completion of a recovery action does not indicate that the abnormal situation has been resolved. That is indicated by the EX Cleared notification. EX Recovery Abort — The decision authority may command the exception agent to abort a recovery action at any time. The goal of the abort command is to end the recovery action activities as quickly as possible. The abort command terminates the recovery action. 8.2 Exception Condition State Mo del — The behavior required for exception management is fully specified by the exception agent (service-provider) behavior. This is described by the exception agent exception condition state model. All required decision authority (serviceuser) behavior is inferred by this model. Message flow diagrams presented in the previous section are useful to show simple situations. The exception condition state model presented in this section provides the information necessary to"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 6)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: extrapolate the message flow diagrams for all situations within the scope of this standard. The exception condition provides for exception agent reporting on an abnormal situation in the equipment and management of a recovery action requested by the decision authority to resolve the situation. Recovery is requested in the context of a particular exception condition so the recovery action behavior forms a part of the exception condition behavior. Figure 3 shows the state diagram for an exception condition. The Harel state model notation used is described in Conventions, Section 5.1. The corresponding state transition table is shown in Table 1 on the following page. The detailed state definitions follow: $E X S T A T E$ — When created by the exception agent, an exception condition enters the EXSTATE. It is in this state as long as it is in existence, irrespective of association to the decision authority. The exception condition has two concurrent subsets, which together fully describe its state. These subsets"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 7)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: are Reporting and Recovery. The exception condition initializes to the SET state if the abnormal situation related to the exception condition is apparent and relevant; otherwise, it initializes to the CLEARED state. Reporting — Reporting is one concurrent subset of EXSTATE. It includes the substates describing whether the abnormal situation related to the exception condition is apparent and relevant, and whether the latest information on the situation has been reported. Table 1 Exception Condition Transition Table CLEARED — The abnormal situation related to the exception condition is either not apparent or not relevant. SET — The abnormal situation related to the exception condition is apparent and relevant. The exception agent should generate a collection event each time an exception condition transitions from CLEARED to SET and another from SET to CLEARED. NOT POSTED — The latest information on the detected abnormal situation has not yet been reported by the exception agent. This may be transient on"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 8)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: entering the SET state or may be because reporting is disabled. NOT POSTED is the default state when entering the SET state. POSTED — The latest information on the detected abnormal situation has been reported by the exception agent to the decision authority. Recovery — Recovery is one concurrent subset of EXSTATE. It includes the substates describing the behavior in relation to exception condition recovery actions. NOTRECOVERING — In the NOTRECOVERING substate, there is no recovery action in progress directly related to the exception condition. NOTRECOVERING is the default state when an exception condition is initially created. Recovery actions may only be initiated when the exception condition is in the SET state. RECOVERING — A recovery action related to the exception condition is in progress when in the RECOVERING state. ABORTINGRECOVERY — In the ABORTINGRECOVERY substate, the abort procedure is performed to immediately terminate the recovery action. It is the responsibility of the exception agent to"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication (Part 9)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 8.1  Exception Condition Communication\n\nContent: cease physical activity as quickly as possible, having achieved a safe condition."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 9  Object Definitions",
    "content": "Exception management defines one standard object, the Exception Condition.  \n9.1  Exception Condition Object Definition — The exception condition is a persistent object created by the exception agent. It provides the decision authority with reporting on, access to, and the possibility to direct resolution of an abnormal situation detected. It also tracks progress of a requested recovery action. The exception condition is uniquely identified by the EXID attribute.  \nThe object attribute notation used in Table 2 is described in Conventions, Section 5.2.  \nTable 2  Exception Condition Attributes"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10  Messaging Services Detai l",
    "content": "This section defines the messaging services required to implement the exception management concepts. The messages were introduced in Section 8.1. These services are independent of the messaging protocol used. They may be mapped to SECS-II (SEMI-E5) or to other comparable protocols.  \nThese messaging services define the messages to be used, the nature of the parameters contained within the messages, and data type of the parameters. Not defined here is the internal structure of the actual messages as transferred, including order of the parameters and how various data structures and data types are represented.  \nThe service message notation used in the tables below is described in Conventions, Section 5.3.  \n10.1  Service List — The messages s hown in Table 3 are exchanged between service-provider and service-user for the purpose of accomplishing exception management tasks.  \nTable 3  Service List"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: Table 4 Parameter Dictionary 10.3 Service Detail — Tables 5 thro ugh 9 define the parameters for each service. Parameters have additional detail which is defined in the parameter dictionary, Table 4. 10.3.1 EXPost — Detection of abnormal situations by the exception agent is communicated using the EXPost service, as described in Section 8.1. This notification is also used to communicate any significant changes in exception condition information while its state is SET. Table 5 EXPost Service Detail 10.3.2 EXCleared — Notification tha t an abnormal situation is no longer apparent or relevant, as is described in Section 8.1, is communicated using the EXCleared service. Table 6 EXCleared Service Detail 10.3.3 EXRecover — Recovery action requests, described in Section 8.1, are communicated using the EXRecover service. The recovery action services are not available for alarms. Table 7 EXRecover Service Detail 10.3.4 EXRecoveryComplete — Noti fication of recovery action completion by the exception agent is communicated using"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: the EXRecoveryComplete service. Recovery action completion, which is described in Section 8.1, is not directly linked to clearing the exception condition state, and successful completion indicates only that the operation performed completed normally. Table 8 EXRecoveryComplete Service Detail 10.3.5 EXRecoveryAbort — Recover y action abort, described in Section 8.1 is communicated using the EXRecoveryAbort service. Table 9 EXRecoveryAbort Service Detail 10.4 Fundamental Requirements — Exception management defines the standard services available to achieve exception condition-based exception handling and error recovery in equipment. All exception agent implementations shall support the fundamental requirements. This standard provides for two aspects of fundamental requirements: exception reporting and interactive exception handling. It is possible to support only exception reporting in systems which do not require interactive exception handling. Interactive exception handling requires that exception reporting be"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 3)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: supported. 10.4.1 Exception Reporting — The fu ndamental requirements of the exception agent for exception reporting are based on maintaining the decision authority updated on the exception conditions it is interested in. These are listed below. • Detect and report the occurrence of significant abnormal situations by setting the related exception condition, and posting it if reporting is enabled. Detect and report that an abnormal situation is no longer apparent or relevant by clearing the related exception condition and reporting it if enabled. Provide for enabling and disabling reporting on each exception condition. Maintain the data of exception condition attributes indicated in Table 2. Reject requests for capabilities not supported (such as recovery actions). 10.4.2 Interactive Exception Handling — The fundamental requirements of the exception agent for interactive exception handling extend the exception reporting to allow the decision authority to request recovery actions to be performed to resolve abnormal"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 4)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: situations. These are listed below. Support all exception reporting fundamental requirements specified above. Supply a list of valid recovery actions for an exception condition when posting. • Execute a requested recovery action for an exception condition if the requested recovery action is currently valid. The exception agent may support only a single recovery action to be in progress at a time and reject all other recovery action requests for other exception conditions while it is busy. Report the completion of the recovery action. Support Abort of the recovery action at all times, immediately ceasing recovery activity and terminating the recovery action. Reject requests with incomplete or invalid parameters. Reject requests for capabilities not supported. Optional capabilities defined or enabled in this standard include the following: Support for multiple concurrent recovery actions. The standard allows only one recovery action in progress for each exception condition. Adjust the exception condition message and the"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 5)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: valid recovery action list as appropriate during the error recovery, and post the changes if reporting is enabled. The services are defined with mechanisms to reject unsupported services and options should they be requested. This improves robustness and enables sophisticated service-users to adjust its requests to the capabilities of the particular exception agent. NOTICE: These standards do not purport to address safety issues, if any, associated with their use. It is the responsibility of the user of these standards to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use. SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary (Part 6)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 10.2  Parameter Dictionary\n\nContent: mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 1  Purpose",
    "content": "This document maps the services and data of its prime document, SEMI E41, to SECS-II streams and functions and data definitions."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 2  Scope",
    "content": "This is the standard way to implement the Exception Management Standard, which provides remote control communication of exceptions and recovery, using the SECS-II message format."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 3  Referenced Documents",
    "content": "3.1  SEMI Standards  \nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II) SEMI E41 — Exception Management (EM) Standard"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 4  Terminology",
    "content": "None."
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 5  Mapping of Exception Management Messages",
    "content": "Table 1  Exception Management Messages SECS-II Mapping"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 6  Exception Parameters Mapping",
    "content": "Table 2  Exceptions Data Item Mapping"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Implementation Details (Part 1)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Implementation Details\n\nContent: 7.1 Several capabilities of the Exc eption Management Services (EMS) are accessed through the Object Services Standard. The Exception Objects are persistent. An Object Services compliant implementation of EMS will allow access to all the attributes specified in the SEMI E5 Object definition table for an Exception Object. All implementations shall use Object Service’s GetAttr and SetAttr to access: EXENABLED EXSTATE NOTE 1: EXSTATE is read-only. NOTICE: These standards do not purport to address safety issues, if any, associated with their use. It is the responsibility of the user of these standards to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use. SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels,"
  },
  {
    "title": "SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Implementation Details (Part 2)",
    "content": "Title: SEMI E40.1-0705 SECS-II SUPPORT FOR PROCESSING MANAGEMENT STANDARD - # 7  Implementation Details\n\nContent: product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES",
    "content": "This standard was technically approved by the Global Information & Control Committee and is the direct responsibility of the Japanese Information & Control Committee. Current edition approved by the Japanese Regional Standards Committee on April 30, 2004.  Initially available at www.semi.org June 2004; to be published July 2004. Originally published September 1995; previously published February 2000."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction",
    "content": "1.1  Purpose\n1.2  Scope\n1.3  Referenced Documents\n1.4  Definitions 1.4.1  Objects 1.4.2  Services 1.4.3  Form 1.4.4  Recipe Management\n1.5  Conventions 1.5.1  Text String Restrictions 1.5.2  Harel State Model 1.5.3  Objects 1.5.3.1  OMT Object Information Model 1.5.3.2  Object Attribute Representation 1.5.4  Service Message Representation\n1.6  Requirements\n1.7  Document Structure\n1.8  Applicable Documents"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 2  Overview of RMS",
    "content": "2.1  Recipe Management Models 2.2  Major Objects in RMS 2.2.1  Recipes 2.2.2  Recipe Namespace 2.2.3  Recipe Namespace Manager 2.2.4  Recipe Executor"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 3  Recipes",
    "content": "3.1  Motivations 3.2  Basic Concepts 3.2.1  Types of Recipes  \n3.2.2  Recipe Structure 3.2.2.1  Recipe Body 3.2.3  Recipe Identification 3.2.3.1  Recipe Name 3.2.3.2  Recipe Class 3.2.3.3  Version 3.2.3.4  Recipe Identifiers 3.2.4  Advanced Recipe Capabilities 3.2.4.1  Multi-Part Recipes 3.2.4.2  Variable Parameters 3.2.5  Attributes 3.2.5.1  Descriptors\n3.3  Full and Minimal Recipe Models\n3.4  Managed Recipes 3.4.1  Generic Attributes 3.4.1.1  Timestamp Attributes 3.4.1.2  Length Attributes 3.4.1.3  Descriptors 3.4.2  Managed Recipe Object Attribute Definitions 3.4.2.1  Generic Attribute Definitions 3.4.2.2  Agent-Specific Attribute Defi 3.4.2.3  Minimal Managed Recipe"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 4  Recipe Namespace",
    "content": "4.1  Motivations\n4.2  Namespace Model\n4.3  Namespace Specifications\n4.4  Member Agents\n4.5  Illustrations\n4.6  Attribute Definition Tables"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 5  Distributed Recipe Namespace",
    "content": "5.1  Motivations\n5.2  Overview\n5.3  Distributed Recipe Namespace Issues 5.3.1  Object Services 5.3.2  Logical Recipe 5.3.3  Change Requests\n5.4  Distributed Recipe Namespace Segment 5.4.1  Master and Dedicated Segments 5.4.2  Change Restrictions\n5.5  Distributed Recipe Namespace Recorder\n5.6  Distributed Recipe Namespace Management Information\n5.7  Distributed Recipe Namespace\n5.8  Distributed Recipe Namespace Manager 5.8.1  Change Management\n5.9  Building a Distributed Recipe Namespace\n5.10  Rebuilding a Damaged Distributed Recipe Namespace\n5.11  Object Attribute Definition Tables 5.11.1  Distributed Recipe Namespace Segment Attribute Definition 5.11.2  Distributed Recipe Namespace Recorder Attribute Definition 5.11.3  Distributed Recipe Namespace Attribute Definition 5.11.4  Distributed Recipe Namespace Manager Attribute Definition"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 6  Recipe Executor",
    "content": "6.1  Motivations\n6.2  Description\n6.3  The Execution Recipe 6.3.1  Comparison of Managed and Execution Recipes 6.3.2  Downloaded Recipes 6.3.3  Execution Recipe Identifier 6.3.4  Execution Recipe Descriptor 6.3.5  Execution Recipe Attribute Definitions\n6.4  Default Namespace\n6.5  Recipe Storage\n6.6  Change Control 6.6.1  Recipe Creation 6.6.2  Recipe Compression 6.6.3  Changes to Stored Recipes 6.6.4  Last Value\n6.7  Production\n6.8  Recipe Executor Attributes"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 7  Agents",
    "content": "7.1  Definitions\n7.2  RMS Resources\n7.3  Agent Attributes"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 8  Recipe Management Operations",
    "content": "8.1  Recipe Lifecycle\n8.2  Description of Operations 8.2.1  General Requirements 8.2.2  Recipe Origination 8.2.2.1  Create Recipe 8.2.2.2  Update Recipe 8.2.3  Recipe Building 8.2.3.3  Unlink Recipe 8.2.3.4  Modify Variable Parameters 8.2.4  Recipe Authorization 8.2.4.1  Approve Recipe 8.2.5  Recipe Protection 8.2.6  Unprotect 8.2.7  Certify 8.2.8  De-Certify 8.2.9  Informational Operations 8.2.9.1  Get Recipe Descriptors\n8.3  Recipe State Model\n8.4  Table of Operations"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 9  Namespace Management Operations",
    "content": "9.1  Applications of Object Services 9.1.1  Object Specifiers 9.1.2  Required Object Services 9.2  Namespace Operations  \n9.2.1  Create Namespace 9.2.2  Delete Namespace 9.2.3  Rename Namespace 9.3  Namespace Informational Operations 9.3.1  Get Available Storage 9.3.2  Check Recipe Status 9.3.3  Get Best Version 9.4  Namespace Informational Operations 9.4.1  Create Recipe 9.4.2  Delete Recipe 9.4.3  Store Recipe 9.4.4  Retrieve Recipe 9.4.5  Copy Recipe 9.4.6  Rename Recipe 9.4.7  Verify Recipe 9.4.8  Download Recipe 9.4.9  Upload Recipe 9.5 Table of Operations 9.6  Namespace Events"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 10  Distributed Recipe Namespace Management Operations (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 10  Distributed Recipe Namespace Management Operations\n\nContent: 10.1 Distributed Recipe Namespace Segment Operations 10.1.1 Object Services 10.1.1.1 Attribute Read/Write 10.1.1.2 Create and Delete Operations 10.1.1.3 Object Attachment Operations 10.1.2 Segment Recipe Management Operations 10.1.2.1 Requirements for Approval 10.1.2.2 Segment Change Approval 10.1.2.3 Scenario of a Segment Change Request 10.2 Distributed Recipe Namespace Recorder 10.2.1 Object Services 10.2.1.1 Attribute Read/Write 10.2.1.2 Object Create and Delete Operations 10.2.1.3 Object Attachment Operations 10.2.2 Add Segment Record 10.2.3 Delete Segment Record 10.2.4 Add Change Request Record 10.2.5 Delete Change Request Record 10.2.6 Get Change Request Record 10.3 Distributed Recipe Namespace Management Operations 10.3.1 Object Services 10.3.2 Delete Distributed Recipe Namespace 10.3.3 Attach and Detach Supervised Objects 10.3.3.1 Attach Supervised Object 10.3.3.2 Detach Supervised Object 10.3.4 Change Request Management 10.3.4.1 External Change Requests 10.3.4.2"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 10  Distributed Recipe Namespace Management Operations (Part 2)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 10  Distributed Recipe Namespace Management Operations\n\nContent: Internal Change Requests 10.3.4.3 Allowable Change Requests 10.3.4.4 Change Request Record Definition 10.3.4.5 Change Request Lifecycle 10.3.4.6 Change Request Completion 10.3.4.7 Change Management Example 10.3.5 Segment Change Request 10.3.6 Segment Action Complete 10.3.7 Segment Notification 10.3.8 Get Change Requests 10.3.9 Rebuild Distributed Recipe Namespace 10.4 Tables of Operations 10.4.1 Segment Operations Table 10.4.2 Recorder Operations Table 10.4.3 Manager Operations Table"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 11  Recipe Executor Operations",
    "content": "11.1  Object Services Operations 11.1.1  Execution Recipe Specifier\n11.2  Description of Operations 11.2.1  Recipe Download and Verify 11.2.2  Recipe Verify 11.2.2.1  Derived Object Form Recipes 11.2.2.2  Verification ID 11.2.3  Recipe Upload 11.2.4  Recipe Rename  \n11.2.5  Get Available Storage\n11.2.6  Recipe Delete\n11.2.7  Recipe Selection 11.2.7.1  Multiple Selection 11.2.7.2  Validation 11.2.7.3  Delegation 11.2.7.4  Variable Parameters 11.2.7.5  Message Scenarios 11.2.7.6  Selected Recipes\n11.2.8  Recipe Deselection\n11.2.9  Get Execution Recipe Descriptor\n11.2.10  Change Control 11.2.10.1  Changing Existing Recipes 11.2.10.2  Creating New Recipes 11.2.10.3  Building Derived Form Recipes 11.2.10.4  Saving Last Value 11.2.10.5  Change Notification  \n11.3  Table of Operations  \n11.4  Recipe Executor Events"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 12  Recipe Namespace Services",
    "content": "12.1  Recipe Management Message Parameter\nDictionary\n12.2  Message Flow\n12.3  RMNCreateNS\n12.4  RMNDeleteNS\n12.5  RMNRenameNS\n12.6  RMNSpaceInquire\n12.7  RMNRcpStatInquire\n12.8  RMNVersionInquire\n12.9  RMNCreate\n12.10  RMNUpdate\n12.11  RMNStore\n12.12  RMNRetrieve\n12.13  RMNCopy\n12.14  RMNRename\n12.15  RMNAction\n12.16  RMNVarPar\n12.17  RMNGetDescriptor\n12.18  RMNComplete"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 13  Distributed Recipe Namespace Services",
    "content": "13.1  Distributed Recipe Namespace Message Parameter Dictionary\n13.2  Distributed Recipe Namespace Segment Services 13.2.1  RMDSApproveAction\n13.3  Distributed Recipe Namespace Recorder Services 13.3.1  RMDRAddSegRecord 13.3.2  RMDRDelSegRecord 13.3.3  RMDRAddChgRecord 13.3.4  RMDRDelChgRecord 13.3.5  RMDRGetChgRecord\n13.4  Distributed Recipe Namespace Manager Services 13.4.1  RMDComplete 13.4.2  RMDNotify 13.4.3  RMDSegChange 13.4.4  RMDGetChangeRequests 13.4.5  RMDRebuild"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 14  Recipe Executor Services",
    "content": "14.1  Recipe Executor Message Parameter Diction\n14.2  Message Flow\n14.3  RMEDnldVer\n14.4  RMEVerify\n14.5  RMEUpload\n14.6  RMERename\n14.7  RMESpaceInquire\n14.8  RMEDelete\n14.9  RMESelect\n14.10  RMEDeselect\n14.11  RMEGetDescriptor\n14.12  RMEChange\n14.13  RMEComplete"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 15  Recipe Management Compliance",
    "content": "15.1  Areas of Compliance\n15.2  Managed Recipe\n15.3  Managed Recipe Compliance Table\n15.4  Recipe Namespace Management 15.4.1  Recipe Namespace 15.4.2  Recipe Namespace Manager 15.4.3  Recipe Namespace Management Compliance Table\n15.5  Compliance for Distributed Recipe Namespace Management 15.5.1  Distributed Recipe Namespace 15.5.2  Distributed Recipe Namespace Manager 15.5.3  Distributed Recipe Namespace Management Compliance Table\n15.6  Distributed Recipe Namespace Segment 15.6.1  Distributed Recipe Namespace Segment Compliance Table\n15.7  Distributed Recipe Namespace Recorder 15.7.1  Distributed Recipe Namespace Recorder Compliance Table\n15.8  Execution Recipe Compliance 15.8.1  Execution Recipe Compliance Table\n15.9  Recipe Executor"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 15.9.1  Recipe Executor Compliance Table",
    "content": "16  Glossary of Terms\nRelated Information 1\nR1-1  RMS Standardized Objects\nR1-2  RMS Requirement/Concepts Map\nR1-3  Background\nR1-3.1  Traceability\nR1-3.2  Recipe Life Cycle\nR1-3.3  Recipe Editing\nR1-3.4  Recipe Sharing\nR1-3.5  Protection and Process Control\nR1-3.6  Recipe Selection"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # R1-4  Example of a Factory Implementation of Approval Levels",
    "content": "R1-5  Examples of Variable Parameters"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # R1-6  Applications of Object Services",
    "content": "R1-6.1  Scope\nR1-6.2  Filter\nR1-6.3  Complex Attributes  \nR1-7  Examples of RMS Application  \nsemi\"  \nNOTES  \nThis page intentionally left blank."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES",
    "content": "E This standard was editorially modified in September 1999 to conform to its non-provisional status. Changes were made to Section 1.2."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction\n\nContent: 1.3 Referenced Documents This standard defines the concepts required for management of recipes, the operations or behavior provided by the Recipe Management Standard (RMS), and the messages through which services are provided through an interface between the provider and the user of these services. 1.1 Purpose — The purpose of this standard is twofold: To enable applications software to be developed that can assume the existence of standard concepts, behaviors, and message services that collectively form Recipe Management and that take advantage of them. To enable software to be developed to offer the Recipe Management capabilities. 1.2 Scope — This is a standard that defines concepts, behavior, and services to support the integration of automated recipe management within a semiconductor factory. These services are applicable to a variety of relationships, including both traditional host/equipment and cluster tool controller/attached module communications and control. The standard provides a set of communications"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction (Part 2)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction\n\nContent: services which allows such systems to transfer and manage recipes to ensure the correct processing of material within semiconductor manufacturing equipment and systems. RMS also requires compliance to SEMI E39 (Object Services Standard (OSS): Concepts, Behavior, and Services) for completeness. This document describes several different hierarchical relationships: supervisory agents and their supervised agents, recipes and their subrecipes, and recipe classes and their subclasses. Such hierarchical relationships provide a natural organizational and classification structure that is reflected in many different kinds of systems, such as telephone switching systems and directory trees. It is the intent of this standard to support logical hierarchical relationships rather than to require that strict hierarchical relationships be implemented in systems architecture. RMS places no restriction on where the set of defined services is implemented. 1.3.1 Semiconductor Equipment and Materials International (SEMI)1 1.3.1.1 SEMI"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction (Part 3)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1  Introduction\n\nContent: Equipment Automation/Hardware Volume SEMI E10 — Standard for Definition and Measurement of Equipment Reliability, Availability, and Maintainability (RAM) 1.3.1.2 SEMI Equipment Automation/Software 2 Volume SEMI E30 — Generic Model for Communications and Control of Manufacturing Equipment (GEM) SEMI E39 — Object Services Standard: Concepts, Behavior, and Services SEMI E53 — Event Reporting"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.3.2  Other References",
    "content": "James Rumbaugh, Michael Blaha, William Premerlani, Frederick Eddy, William Lorensen, Object-Oriented Modeling and Design, Englewood Cliffs, New Jersey: Prentice-Hall, 1991.  \nD. Harel, Statecharts: A Visual Formalism for Complex Systems, Science of Computer Programming 8, 1987.  \n1.4  Definitions — Basic definitions for objects, services, and form are provided in SEMI E39, Sections 4.1 through 4.4. This section provides additional definitions.  \nDefinitions in Section 1.4.3 are specific to RMS."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.1  Services",
    "content": "service provider — An application (a component of an agent) responsible for providing services to the service user.  \nservice user — (service consumer) An application that uses the services provided."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: binary — A string of bit values (zeroes and ones), with a format that is either left unspecified or specified by bit position, with the most significant bit first. The total length of the string is a multiple of eight. Messaging protocol may impose restrictions on length. logical recipe — A recipe with a particular set of attributes and a particular body, considered independently from its physical location. A logical recipe may have multiple instances or copies. name — A text-based attribute of an object that may be used as all or part of its identifier. 1.4.3 Recipe Management — This section introduces basic terminology used in RMS. Entries are in alphabetical order. Additional definitions and specifications are provided in later sections. namespace — In general, a domain within which object identifiers are unique. In RMS, the term namespace is used as a synonym for recipe namespace, unless otherwise stated. agent — An intelligent system within a factory that provides one or more service resources and uses the"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 2)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: services of other agents. This is a generalization that includes host, equipment, cell, cluster, cluster module, station controller, and work station. Agents are associated with a physical system or a collection of physical systems, such as computer platforms. authorized user — A user who can be identified to an agent as having the level of authority required for a particular activity, such as certifying a recipe for that equipment. operator — The user who interacts locally with agent through the agent's interface. recipe — The pre-planned and reusable portion of the set of instructions, settings, and parameters under control of an agent that determines the processing environment seen by the manufactured object and that may be subject to change between runs or processing cycles. recipe class — A formal grouping of recipes with a common language syntax and functionality. collection event — A detectable occurrence of interest to a service user. recipe executor — The component of an executing agent that executes recipes."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 3)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: component agent — A subordinate agent that provides services to a supervisory agent. download — An operation that transfers a recipe (down) to an execution storage area. recipe namespace — A logical management domain with the responsibility for the storage and management of recipes, the ensurance of the uniqueness of recipe identifiers within that domain, and the provision of services pertaining to recipes stored within that domain. edit — An operation which creates a new recipe body or changes the body of an existing recipe. recipe parameter — A control value that affects the agent's process. editor — A service which allows a user to edit a recipe. Editors are not specified in RMS. select — The act of preparing a recipe for execution. equipment2 — An agent with associated hardware that provides, at a minimum, recipe execution services. setting — A static value accessible to the user, through one or more methods, that is used by equipment to control its process. Settings include, but are not limited to, setpoint"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 4)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: values. Settings typically may be specified within a recipe. event — A detectable occurrence significant to an object. execution (recipe execution) — The process of reading the recipe contents and implementing its instructions, process parameters, or other information required for its own processing. storage area — An area where objects and data are stored. subordinate agent — An agent that is a component of, or managed by, another agent. executing agent — An agent that provides recipe execution capabilities. supervisory agent — An agent with supervisory responsibilities for one or more subordinate agents. execution area — The storage location of the recipe(s) currently selected (ready) for execution. timestamp — The notation of the date and time of the occurrence of an event. host — A supervisory agent that represents the factory to its subordinates. upload — An operation that transfers a recipe (up) from an execution storage area. user — A person interacting with an agent directly through the agent's human interface"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 5)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: or indirectly through the agent's supervisor. validate — The action of checking recipe contents to ensure that parameter type and range are valid for the equipment configuration prior to execution. [Note that validation and verification are used in different ways.] variable parameter — A formally defined variable (setting) defined in the body of a recipe permitting the actual value to be supplied externally. verify — The operation of reading a recipe's contents to ensure that it is syntactically correct and identifying elements that must be made public. version — Part of a recipe's identifier that is used to show its heritage. 1.5 Conventions — The following conventions are used in this document: To highlight terms specific to RMS (excluding terms defined in Sections 1.4.1 through 1.4.3 that are common to multiple standards), a defined term appears in boldface wherever it first appears and wherever it is defined. This alerts the reader to those terms with specific meanings. Except for terms that are very common, such"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 6)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: as recipe, host, and equipment, defined terms otherwise are in italics wherever they appear. Terms related to objects and object services are in conformance with SEMI E39 (Object Services Standard: Concepts, Behavior, and Services). A brief discussion of objects is provided in the Appendix of that document. Attribute names are underlined. Attributes called \"names\" in RMS are generally intended to be used for the ObjID attribute of a standardized object. To prevent the definition of numerous message parameters named \"XxxList,\" this document adopts the convention of referring to the list as \"(List of) Xxx\". In this case, the definition of the parameter Xxx will be given, not of the list. The term \"list\" indicates a collection (or set) of zero or more items of the same data type. For attributes that are lists, this convention is not followed, as the entire attribute, as a list, must be assigned a specific name. 1.5.1 Text String Restrictions — Text strings used in attribute names, attribute values, or message parameters,"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 7)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: are subject to the restrictions defined by OSS: Text in ASCII is restricted to the characters between $2 0 _ { 1 6 }$ and $\\mathrm { 7 D _ { 1 6 } }$ , excluding the question mark \"?\" $( 3 \\mathsf { F } _ { 1 6 } )$ , the asterisk \"\\*\" $( 2 \\mathrm { A } _ { 1 6 } )$ , and the tilde \"\\~\" $( 7 \\mathrm { E } _ { 1 6 } )$ . Text strings used as, or within, the object identifier ObjID are additionally restricted to exclude the \"greater than\" symbol $\" > \"$ $( 2 \\mathrm { E } _ { 1 6 } )$ and the colon character \":\" $( 3 \\mathrm { A } _ { 1 6 } )$ to conform with OSS requirements. 1.5.2 Harel State Model — This document uses the Harel State Chart notation to describe the dynamic behavior of the objects defined. An overview of this notation is presented in an Appendix of SEMI E30. The formal definition of this notation is presented in Science of Computer Programming 8, \"Statecharts: A Visual Formalism for Complex Systems,\" by D. Harel, 1987. This document also adopts the extension of Harel notation to show the deletion of an"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 8)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: object as used by Rumbaugh, et al. (see Section 1.5.2.1). 1.5.3 Objects — Standardized objects defined by RMS conform to the requirements of SEMI E39 (Object Services Standard: Concepts, Behavior, and Services). RMS adopts the convention of showing standardized objects as drawn with a heavy line in object models. Non-standardized objects are used to illustrate concepts and relationships but are not formally defined and cannot be accessed through Object Services. A list of standardized objects defined by RMS is included in Related Information 1. 1.5.3.1 OMT Object Information Model — The object models are presented using the Object Modeling Technique, developed by Rumbaugh et al., in ObjectOriented Modeling and Design, Prentice-Hall, Englewood Cliffs, NJ, 1991. Overviews of this notation are provided in an appendix of SEMI E39 (Object Services Standard: Concepts, Behavior, and Services). 1.5.3.2 Object Attribute Representation — The object information models for standardized objects will be supported by an attribute"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form (Part 9)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.4.2  Form\n\nContent: definition table with the following column headings: The Access column uses RO (Read Only) or RW (Read and Write) to indicate the access that users of the service have to the attribute. A 'Y' or $\\mathbf { \\nabla } ^ { \\prime } \\mathbf { N } ^ { \\prime }$ in the Requirement (Rqmt) column indicates if this attribute must be supported in order to meet fundamental compliance for the service. The Form column is used to indicate the format of the attribute. (See Section 1.4 for definitions.)"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Resource Definition",
    "content": "A service definition table defines the specific set of messages for a given service resource, as shown in the following table:  \nType can be either $\\mathbf { N } =$ Notification or ${ \\sf R } =$ Request.  \nNotification type messages are initiated by the service provider, and the provider does not expect to get a response from the user.  \nRequest messages are initiated by a service user. Request messages ask for data or an activity from the provider. Request messages expect a specific response message (no presumption on the message content)."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Parameter Dictionary (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Parameter Dictionary\n\nContent: A service parameter dictionary table defines the parameters for one or more services, as shown in the following table: A row is provided in the table for each parameter of the service. The first column contains the name of the parameter. This is followed by columns describing the form and contents of the corresponding primitive. The Form column is used to indicate the type of data contained in a parameter. (See Section 1.4 for definitions.) The Description column in the Service Parameter Dictionary table describes the meaning of the parameter, the values it can take on, and any interrelationships with other parameters. To prevent the definition of numerous parameters named \"XxxList\", this document adopts the convention of referring to the list as \"(List of)Xxx\". In this case, the definition of the variable Xxx will be given, not of the list. The term \"list\" indicates a collection (or set) of zero or more items of the same data type. Where a list is used in both the request and the response, the list"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Parameter Dictionary (Part 2)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Parameter Dictionary\n\nContent: order in the request is retained in the response. A list must contain at least one element, unless zero elements are specifically allowed."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition\n\nContent: A service message definition table defines the parameters used in a service, as shown in the following table: The columns labeled Req/Ind and Rsp/Conf link the parameters to the direction of the message. The message sent by the initiator is called the \"Request\". When receiver terms this message the \"Indication\" or the \"Request\", the receiver may then send a \"Response\", which the original sender terms the \"Confirmation\". The following codes appear in the Req/Ind and Rsp/Conf columns and are used in the definition of the parameters (e.g., how each parameter is used in each direction): \"M\" — Mandatory parameter — must be given a valid value. \"C\" — Conditional parameter — may be defined in some circumstances and undefined in others. Whether a value is given may be completely optional or may depend on the value of the other parameter. \"U\" — User-defined parameter. \"-\" — The parameter is not used. $\" = \"$ — (for Response only) Indicates that the value of this parameter in the response must match that in the"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition (Part 2)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition\n\nContent: primary (if defined). 1.6 Requirements Requirements for recipe management are varied. For example, there is a fundamental need to retain information about each recipe, to provide that information upon request, and to transfer it with the recipe so that it remains available. There is a need to classify recipes, to reuse them, and to share them with multiple installations of equipment. The need for sharing recipes introduces a new requirement for safeguarding the relationship between a recipe's identifier and its contents, to be able to protect a recipe from unauthorized changes, and to ensure that the identifier for a recipe that is used by multiple equipment is in fact the same recipe. The requirements for managing recipes in a factory are given in tabular form in Table 1.1, which presents them according to their functional areas and the specific issues involved. Table R1-1, in Related Information, shows the specific concepts defined in RMS to address each of these requirements. Table 1.1 Requirements"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition (Part 3)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition\n\nContent: 1.7 Document Structure — Figure 1.1 depicts the domain of the Recipe Management Standard as consisting of Purpose, Concepts, Behavior, and Message Services. This also reflects an underlying structure of the document. Figure 1.1 Recipe Management Domain Purpose provides the motivation for Recipe Management capabilities and is addressed in Section 1.6. Concepts provide a detailed introduction to the standardized objects of RMS, their attributes, and their relationships with other objects. Behavior describes the operations that are performed by, or on, these objects. Finally, message services define the messages and their parameters independently of the protocol in which they are implemented. Both concepts and behavior represent an \"inside view\" of an RMS application, while services provide an interface from an external view. Section 1: the formal introduction to RMS. Section 2: an overview of the major objects of RMS and their relationships, to provide a general context for the technical detail that"
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition (Part 4)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # Service Message Definition\n\nContent: follows. • Sections 3-6: concepts for recipes, recipe namespace, distributed recipe namespace, and recipe executor. • Section 7: the concept of the agent and of service resources, to provide a more complete context for RMS implementations. Sections 8-11: behavior (operations) for recipe management, namespace management, distributed recipe namespace management, and the recipe executor. Sections 12-14: definitions of message services for the recipe namespace, distributed recipe namespace, and recipe executor service resources. Section 15: RMS compliance. Section 16: a glossary of terms, provided as a convenient reference. Related Information: provides background information on the requirements behind RMS and examples of applications."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 1.8  Applicable Documents",
    "content": "ISO/TR 8509:1987, Information Processing Systems, Open Systems Interconnection — Service Conventions."
  },
  {
    "title": "SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 2  Overview of RMS (Part 1)",
    "content": "Title: SEMI E42-0704 RECIPE MANAGEMENT STANDARD: CONCEPTS, BEHAVIOR, AND MESSAGE SERVICES - # 2  Overview of RMS\n\nContent: This section provides an introduction to, and overview of, the major objects of RMS. 2.1 Recipe Management Models — To provide a clearer understanding of the major entities or areas of functionality specified by RMS, they are portrayed as objects in RMS models, using OMT notation. Relationship lines in the object-based models do not represent a direct communication link between objects, but rather the knowledge and association that one object has with respect to another. The models do not indicate the relative location of two objects. 2.2 Major Objects in RMS — Recipe Management is concerned with the major areas of functionality illustrated in Figure 2.1: recipes3, recipe namespaces providing persistent recipe storage, recipe namespace managers that provide management of the namespace and access to its recipes, and the recipe executor that executes recipes. 2.2.1 Recipes — Recipes provide a flexible, manipulatable, and re-usable form for users to select sequencing and settings to effect a particular result."
  }
]