{
  "doc_id": "semi_docs_037",
  "chunk_id": 1,
  "content": "SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy\n\nContent: 9.6.1 An interface inheritance hierarchy begins with a simple interface at the highest (most abstract) level, and lower levels within the hierarchy represent added functionality (specialization). A subtype of an object inherits the attributes, behavior, relationships, and services of the supertype and adds to and/or modifies (overrides) them. makeup and aggregation hierarchy of the physical view of equipment illustrated in Figures 2 and 3. 9.6.1.5 Each object is defined in terms of its requirements, attributes, behavior (state models), and the services that it is required to support. The equipment owns all of the objects that it is made of and is responsible for providing the required behavior. 9.6.1.6 All objects in OBEM inherit the attributes and services defined for the Top Object as specified in the Object Service Standard (OSS). This allows the factory to use object services to request the equipment to describe its physical view by reporting which objects that it owns. 9.6.1.1 The\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy\n\nContent: physical view shown in Figure 2 is concerned with the relationships between different objects. In that view, the equipment is at the highest level and owns (is responsible for) the lower level objects of which it is made up. A process chamber is considered to be at a higher level than subsystems such as substrate handlers. 9.6.1.2 From the view of the object interface hierarchy, this order is reversed, with AbstractEquipmentElement appearing at the top level as shown in Figure 5. From the view of an object interface — the interface to an object — the higher the level, the more simple the interface. This is because of inheritance, where the “child” object inherits all of the attributes, behavior, and services of the “parent” object and at the same time adds some degree of specialization that will be reflected in either additional attributes, behavior, or services, or in restrictions on the more general object. 9.6.1.3 All objects represent the view as seen by the factory, not the internal view\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 9.6  OBEM Interface Inheritance Hierarchy\n\nContent: of equipment control. From this view, the information and services required for an equipment part such as a pod door opener is relatively simple. The view of a module such as a process chamber is more complex but contains all the elements of the view provided for the simpler part (functional description, immutable id, etc.). The view of the equipment is the most complex and includes all of the attributes and services of the equipment element, equipment subsystem, equipment module, and the equipment itself. 9.6.1.4 The object model of equipment presented to the factory is based on SEMI E39 (OSS). OSS services allow the factory to “discover” the actual physical 9.6.1.7 Note that equipment support for an OBEM interface to the factory does not imply or require direct access from the factory to any equipment element.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10  OBEM Object Definitions\n\n10.1  OBEM objects are defined in this section.  \n10.2  AbstractEquipmentElement Object The supertype object of the interface hierarchy is AbstractEquipmentElement, which is an abstraction of any equipment component that can perform work. AbstractEquipmentElement is an abstract type that is not implemented directly.  There are two subtypes of AbstractEquipmentElement: AbstractEquipmentSubsystem, and EquipmentIODevice.  AbstractEquipmentElement is an abstract type, so that implementations are of one of the subtypes.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.1.1  Object Exception Management\n\n10.2.1.1.1  SEMI E41 defines a model for Exception Conditions.  An Exception Condition may be either an Alarm Condition or an Error Condition. Error Conditions may, in some cases, have a set of associated Recovery Actions that can be performed by the AbstractEquipmentElement to attempt to recover from the abnormal situation.  \n10.2.1.1.2  An OBEM object shall comply with the fundamental requirements of SEMI E41, Section 10.4. Exception Condition objects shall be provided in conformance with SEMI E41 and shall be accessible through services defined in SEMI E39. The AbstractEquipmentElement owns all exceptions that it generates.  Therefore, it shall report all of its Exception Condition objects through OSS services.  \n10.2.2  AbstractEquipmentElement Subtypes — The AbstractEquipmentElement has two subtypes, the EquipmentIODevice and the AbstractEquipmentSubsystem.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model\n\nContent: 10.2.3.1 The AbstractEquipmentElement is either IN SERVICE (available for work) or OUT OF SERVICE (unavailable for work). In some cases, the user may be able to set the AbstractEquipmentElement’s operational state. 10.2.3.2 The state diagram for the AbstractEquipmentElement state model is shown in Figure 7. 10.2.3.3 The AbstractEquipmentElement shall be faultfree whenever it is in the IN SERVICE state. 10.2.3.4 An AbstractEquipmentElement in the OUT OF SERVICE state shall not be used by the equipment or the user for normal manufacturing purposes (while the Equipment or containing EquipmentModule is in the ARAMS superstate of MANUFACTURING). 10.2.3.5 The user may or may not be allowed to put a certain subtype of AbstractEquipmentElement out of service, depending upon the equipment design. This is optional for the equipment. In general, the user requires the ability to put major components into and out of service but does not require this for lower level components. In many cases, a\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model\n\nContent: component can not operate without some or all of its component elements. 10.2.3.6 Substates of OUT OF SERVICE are not required unless the user is able to put the AbstractEquipmentElement out of service. However, if a user places an AbstractEquipmentElement out of service, only a user shall be able to return it back in service. The substates are then required to retain the source of the out of service selection through the substates USER SELECT and EQUIPMENT SELECT. 10.2.3.7 State Model Definitions — Table 2 defines the states of the AbstractEquipmentElement object. Table 2 AbstractEquipmentElement State Definitions 10.2.3.8 State Transition Table — Table 3 defines the state transitions of the AbstractEquipmentElement object. Table 3 AbstractEquipmentElement State Transitions 10.2.4 AbstractEquipmentElement Object — Figure 8 represents the AbstractEquipmentElement object. AbstractEquipmentElement Object Type 10.2.5 AbstractEquipmentElement Attributes — Table 4 defines the attributes of the\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.3  AbstractEquipmentElement State Model\n\nContent: AbstractEquipmentElement. Table 4 AbstractEquipmentElement Attribute Definitions 10.2.6 AbstractEquipmentElement Services — The user may be allowed to change the operational state of specific AbstractEquipmentElement objects that are of significance for preventive maintenance. This is particularly desirable for those subsystems for which preventive maintenance may be performed while the equipment is still assigned to manufacturing operations.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.2.6.1  ChangeService\n\n10.2.6.1.1  The user may request that an element currently in the IN SERVICE state be placed in the OUT OF SERVICE\\ USER SELECT state. This request shall not afefct any current activity for which the element is being used.  However, an element in the OUT OF SERVICE state shall not be used for any new activities.  \n10.2.6.1.2  The user may request that an element currently in the OUT OF SERVICE/USER SELECT state be placed back into the IN SERVICE state.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.3  EquipmentIODevice Object\n\n10.3.1  An EquipmentIODevice object is a specialization of AbstractEquipmentElement used to represent the sensors, actuators, and intelligent sensor/actuator devices that provide most of the process data sought by manufacturing engineering.  Individual I/O points are represented by individual Observables contained within the EquipmentIODevice object.  \n10.3.2  Observables are not formalized as standardized objects, as indicated by the thin line in Figure 9.  The EquipmentIODevice may represent a single I/O point, an aggregation of I/O points, or a virtual sensor providing composite data.  \n10.3.3  Table 5 defines the attributes of the EquipmentIODevice.  Attributes are in alphabetical order, with the exception of the Observablesi attribute, which is placed at the end with its structure members for clarity.  \nTable 5  EquipmentIODevice Attribute Definitions\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4  AbstractEquipmentSubsystem Object\n\n10.4.1  The AbstractEquipmentSubsystem is a subtype of AbstractEquipmentElement and inherits all of its attributes and services.  It may have associated MaterialLocations to hold Material. AbstractEquipmentSubsystem represents all subsystem and subassembly components of which the equipment is made up.  The AbstractEquipmentSubsystem may or may not be capable of holding material and may or may not have recipe execution capability.  \n10.4.2  Figure 10 shows the relationships of the EquipmentSubsystem.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.3  Material Object (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.3  Material Object\n\nContent: 10.4.3.1 An AbstractEquipmentSubsystem may or may not be able to hold material. Those that are able to hold material owns any material that it holds at any given point in time. They are expected to know the type of material that they hold, whether material is present, and the identifier of the material. In some cases, the AbstractEquipmentSubsystem may be able to hold multiple units of material or more than one type of material. 10.4.3.2 There are three major subtypes of material objects: consumables, durables, and substrates, where the major subtypes of durables are carriers and process durables. 10.4.3.3 Consumable materials, such as chemicals, are used up (as opposed to worn out) during the manufacturing process. 10.4.3.4 Durable material has a significant lifetime and is not part of the equipment (is removable). It includes material that some equipment may require to operate. The subtype of durable of common interest to almost all equipment is carrier. A carrier is a durable used to hold substrates.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.3  Material Object (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.3  Material Object\n\nContent: Process durables are of special interest to a limited subset of equipment. A process durable is an identifiable durable that is specified for a certain process step and recipe. For example, reticles are identified by product id and the mask level where used, and they are also identified by serial number. The factory is very interested in the management and tracking of process durables. 10.4.3.5 Product is typically a Substrate. In the semiconductor industry, Substrates include Wafer, Die, and Leadframe. Reticles are considered a Substrate by some equipment. In the semiconductor industry, reticles are considered as a process durable rather than a product. Specific reticles are specified in recipes for expose tools and modules. In other industries, substrates include flat panel (for flat panel displays) and discs (for hard disk drives). 10.4.3.6 Material objects are not formally defined in OBEM. Carrier objects are defined in SEMI E87 (CMS) and substrate objects are defined in SEMI E90 (STS).\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.4  Material Locations (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.4  Material Locations\n\nContent: 10.4.4.1 A material location is a place that is capable of holding material. 10.4.4.2 A MaterialLocation is an abstraction used to facilitate the tracking of material without regard to the physical component associated with the tracking location. For example, a substrate chuck is a subsystem and can hold a single substrate on its surface. The entire subsystem consists of a stage that may or may not be able to move. It may use vacuum to hold the substrate in place, and it may have additional mechanisms and sensors. The MaterialLocation only represents the surface of the chuck. For this reason, the EquipmentSubsystem is said to provide a MaterialLocation rather than to be made up of MaterialLocations through aggregation. 10.4.4.3 This relationship is illustrated in Figure 11. 10.4.4.4 The MaterialLocation object is an abstract type. Figure 11 shows the subtypes of MaterialLocations of interest to OBEM. 10.4.4.5 MaterialLocation Object — Figure 12 shows the attributes of the MaterialLocation that are defined\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.4  Material Locations (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.4  Material Locations\n\nContent: in Table 6. Every subtype of MaterialLocation shall have, at a minimum, attributes showing its current state and the ID of any material present. Table 6 MaterialLocation Attribute Definitions 10.4.4.6 CarrierLocation Object — The CarrierLocation attribute LocationState may allow an additional enumeration Not Aligned, as shown in Table 7.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 7  CarrierLocation Attribute Definitions\n\n10.4.4.7  SubstrateLocation Object — The SubstrateLocation object is defined in SEMI E90 (STS). STS defines SubstID as an attribute of SubstrateLocation.  Note this is identical to MaterialID in the general case for MaterialLocation.  \n10.4.5  AbstractEquipmentSubsystem Requirements  \n10.4.5.1  AbstractEquipmentSubsystems may or may not be able to hold material.  \n10.4.5.2  The AbstractEquipmentSubsystem owns all of the MaterialLocations that it provides or that are provided by one of its components.  Similarly, it owns all of the Material at those MaterialLocations.  \n10.4.6  AbstractEquipmentSubsystem Type — Figure 13 shows the diagram for the AbstractEquipmentSubsystem object.  \nFigure 13 AbstractEquipmentSubsystem Object Type\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.7  AbstractEquipmentSubsystem Attributes\n\n10.4.7.1  Table 8 defines the attributes of the AbstractEquipmentSubsystem.  \nTable 8  AbstractEquipmentSubsystem Attribute Definition  \n10.4.7.2  Table 9 defines individual elements of AbstractEquipmentSubsystem attributes.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.8.1  Add Element\n\n10.4.8.1.1  The user may be able to instruct the equipment to add a specific type of AbstractEquipmentElement.  The supplier may restrict this service to specific AbstractEquipmentElement subtypes, both in destination (the AbstractEquipmentElement accepting the addition) and in the added element.  This is an optional service.  \n10.4.8.1.2  A typical kind of AbstractEquipmentElement that the user may want to add is an “add-on sensor”, a SensorActuatorDevice on a Sensor/Actuator Network.  If the Equipment knows the properties, it is possible for it to read an added I/O device and to reference it within recipes.  \n10.4.8.2  Remove Element — The user may instruct the equipment to remove an AbstractEquipmentElement that was added earlier.  This service is required wherever the Add Element service is supported.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.4.9  EquipmentSubsystem Object\n\n10.4.9.1  The EquipmentSubsystem is a concrete subtype of AbstractEquipmentSubsystem.  It inherits all of the attributes, state models, and services of the AbstractEquipmentSubsystem and in addition defines the rules for aggregation.  These rules are illustrated in Figure 14.  \n10.4.9.2  As shown in Figure 14, the EquipmentSubsystem may be made up of other, smaller EquipmentSubsystems and/or EquipmentIODevices.  It is required to have at least one of these two components.  \nTable 10  EquipmentSubsystem Attribute Definition\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5  AbstractEquipmentModule Object\n\n10.5.1  As shown in Figure 15, an AbstractEquipmentModule is a type of AbstractEquipmentSubsystem that represents a higher level of complexity and is of greater importance to the factory. It is mainly intended to represent process modules but may be used for other major intelligent subsystems capable of supporting the requirements for the AbstractEquipmentModule. It may be possible in some cases for the physical module to operate independently from the equipment.  \n10.5.2  The AbstractEquipmentModule has two subtypes, Equipment and EquipmentModule.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching\n\nContent: 10.5.3.1 ProcessMatching provides one or more mechanisms for managing process differences between two or more identically configured subsystems of the same type to ensure that a generic recipe run on both subsystems will achieve the same process result. ProcessMatching may be either internal or external or both. 10.5.3.2 An example of an external method would be through provision of a ProcessMatching object that allows a user to manipulate offsets to process parameters. This can be done through setting parameter offsets for each subsystem so that, within specified constraints, all subsystems of the same type give the same process results. More sophisticated systems may use algorithms to determine process offsets based on mathematical models and module history. 10.5.3.3 As a simple example of process matching, three different individual hotplates may be matched for the temperature range $2 2 5 { - } 2 7 5 ^ { \\circ } \\mathrm { ~ C ~ }$ by modifying their temperature offset by $1 ^ { \\circ } \\mathrm { ~ C ~ }$ ,\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching\n\nContent: $1 . 7 5 ^ { \\circ } \\mathrm { ~ C ~ }$ , and $- 2 . 1 ^ { \\circ } \\mathrm { ~ C ~ }$ respectively. This approach is illustrated in Figure 16. 10.5.3.4 The equipment supplier is responsible for determining the set of parameters to which offsets may be applied as well as the range of values that are valid. 10.5.3.5 These parameters may be the same as those referenced within recipes for Recipe Variable Parameters.6 In this case, Recipe Variable Parameters are given as setpoints that can be based on characteristics of the incoming substrate and are hardware independent, while Parameters used in Process-Matching are relative (applied to an existing setpoint) and are used to compensate for hardware differences. Support of both Recipe Variable Parameters and ProcessMatching parameters allows the user to compensate for hardwarespecific differences separately from product-specific differences. The number of cycles since the last preventive maintenance performed on a process module affects its performance in a certain\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.3  ProcessMatching\n\nContent: way, while the effect of too thin a film on the wafer will affect requirements in a different way. 10.5.3.6 The ProcessMatching object here is shown as an example. This is not a standardized object. 10.5.3.7 Internal methods of process matching may use other techniques, such as special types of recipes.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4  AbstractEquipmentModule Requirements\n\n10.5.4.1  The AbstractEquipmentModule inherits the attributes, state models, and services of both the AbstractEquipmentElement and the AbstractEquipmentSubsystem.  As a type of AbstractEquipmentSubsystem, the AbstractEquipmentModule is also able to hold one or more units of material.  \n10.5.4.2  The AbstractEquipmentModule represents major subsystems, such as process chambers. It supports basic operational commands: start, stop, pause, resume, and abort.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.3  ARAMS (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.3  ARAMS\n\nContent: 10.5.4.3.1 When implementing SEMI E58, the AbstractEquipmentModule shall provide compliance except as qualified in this section. The AbstractEquipmentModule is the smallest component of equipment for which SEMI E58 (ARAMS) states should be maintained. 10.5.4.3.2 An AbstractEquipmentModule that can not be powered off separately from Equipment is not required to provide its own powerdown estimate or time of last powerdown. 10.5.4.3.3 Otherwise, an AbstractEquipmentModule implementing SEMI E58 shall comply with the requirements of Section 13, Object Services Compliance, in SEMI E58, including all of the attributes defined in Table 6, ARAMS Object Attribute Definitions in that document. These attributes are not repeated in OBEM. The user may change the ARAMS state. In some cases, a change in the ARAMS state of a module may cause an ARAMS state change for the equipment. The supplier shall document any relationships between the ARAMS state of the Equipment and the ARAMS states of its modules. 10.5.4.4\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.3  ARAMS (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.3  ARAMS\n\nContent: AbstractEquipmentModule Service States — For implementations of ARAMS, to be consistent with SEMI E10, the AbstractEquip-mentModule is IN SERVICE whenever it is in an uptime state. Otherwise, it is OUT OF SERVICE, as it can not be scheduled for manufacturing. To change the service state of an AbstractEquipmentModule, the user must change its SEMI E10 (RAM) state. Note that the service state of some modules will affect the service state of Equipment as well. 10.5.4.5 Clock — For modules able to operate independently of the equipment (e.g., modules with a dedicated CPU), AbstractEquipmentModules are required to have individual clocks. It is the responsibility of the Equipment to synchronize multiple internal clocks.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.6  Process Type\n\n10.5.4.6.1  An AbstractEquipmentModule has a Process Type that indicates its primary functionality as one of the following: Process, Measurement, Transport, or Storage.  This is represented as a text string that may specialized further as needed.  \n10.5.4.6.2  The AbstractEquipmentModule has one or more ProcessCapabilities.  ProcessType and ProcessCapability are used for high-level and detailed process characterization.  The user may add and remove ProcessCapability descriptions through operations Add Process Capability and Remove Process Capability.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.7  Process Matching\n\n10.5.4.7.1  All AbstractEquipmentModules supporting Recipe Execution shall provide one or more methods for process matching.  \n10.5.4.7.2  ProcessMatching allows the AbstractEquipmentModule to be tuned for a specific set of conditions in order to achieve the same results as other AbstractEquipmentModules with the same process capability.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.8  Process Setup\n\n10.5.4.8.1  AbstractEquipmentModules capable of performing different processes may need to be reconfigured following one process before a process of a different type can be executed.  Examples of setup requirements include: a new reticle for a stepper, a source change for an ion implanter, or a significant change in temperature for a furnace.  \n10.5.4.8.2  Both process recipes and service recipes may be associated with specific setups.  \n10.5.4.8.3  Recipes of the class “/SETUP/” may be used to put the AbstractEquipmentModule into a specific state.  The user uses the name of the setup for scheduling work.  This is captured in the attribute ProcessSetup.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.9  Recipes (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.9  Recipes\n\nContent: 10.5.4.9.1 An AbstractEquipmentModule may provide recipe execution services and the ability to accept, store, verify, select, and run Execution Recipes (SEMI E42). This ability is required for AbstractEquipmentModules with a ProcessType of “Process” or “Measurement”. Where provided, recipes and recipe execution shall comply with the fundamental requirements for the Execution Recipe and Recipe Executor as specified in SEMI E42 (RMS). 10.5.4.9.2 Some equipment performs its process in three stages, which can be characterized as preamble, main process, and postamble, where the preamble is preparation for the stable part of the process, and the postamble takes care of the transition from the stable part of the process until it is ready to unload the material. In a furnace, for example, the preamble could include both the period where it is ramping to attain the setpoint temperature and the gas flow setpoints. A fourth stage is sometimes defined to handle abnormal terminations. 10.5.4.9.3 From a recipe standpoint, these\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.9  Recipes (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.9  Recipes\n\nContent: different stages can be represented as different sections of a single recipe or as separate recipes linked to a main recipe.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.4.10  Mechanical Dry Run\n\n10.5.4.10.1  The AbstractEquipmentModule shall support the capability to do a mechanical dry run.  This allows the material handling subsystems and software functions to be exercised and tested without requiring full process hookups and without using process consumables.  Typically this is done through a specially designated recipe that allows time settings and does not use settings for temperature, gases, plasmas, water, etc. In some cases, it may require a recipe of a special class, such as “/DRYRUN/”.  Environmental subsystems such as vacuum, nitrogen purge, particle detection subsystems, etc. must be allowed to function normally during a mechanical dry run.  \n10.5.4.10.2  Dry runs shall be prohibited during the ARAMS Manufacturing state.  \n10.5.4.10.3  Certain types of tools may need to modify the definition of the mechanical dry run to address special issues in a way that still satisfies the objectives. Equipment documentation shall specify the method used to satisfy this requirement.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.5  AbstractEquipmentModule State Model\n\n10.5.5.1  The AbstractEquipmentModule inherits the Operational State Model of the AbstractEquipmentSubsystem.  In addition to the concurrent substates of SERVICE, the AbstractEquipmentModule adds the BEHAVIOR state.  Figure 17 shows the Operational State Model with its two concurrent substates.  \n10.5.5.2  Additional details of the BEHAVIOR state are shown in Figure 18  \n10.5.5.3  In addition to the states shown above, the AbstractEquipmentModule has an ARAMS state model, defined in SEMI E58. The diagram for the ARAMS state model for modules is shown in Figure 6 in that document.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.5.4  AbstractEquipmentModule Behavior State\n\n10.5.5.4.1  The details of the BEHAVIOR state are shown in Table 11.  POWERDOWN and INITIALIZING states are included in the table to simplify comparisons with the ARAMS State Model and the Operational State Model defined in SEMI E58. State models are initialized during the INITIALIZATION state.  Communications shall be initialized before the ARAMS state model is initialized in order to allow reporting of power down events.  \n10.5.5.4.2  Table 11 defines the substates of the BEHAVIOR state.\nTable 11  AbstractEquipmentModule Behavior State Definitions  \n10.5.5.5  AbstractEquipment Module State Transition Table — Table 12 defines the state transitions for the AbstractEquipmentModule Operations state model.  \nTable 12  AbstractEquipmentModule Behavior State Transitions\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.6  AbstractEquipmentModule Attributes (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.6  AbstractEquipmentModule Attributes\n\nContent: 10.5.6.1 The AbstractEquipmentModule Object is shown in Figure 19. 10.5.6.2 Attributes of the AbstractEquipmentModule are defined in Table 13. Table 13 AbstractEquipmentModule Attribute Definition NOTE 1: Required if the AbstractEquipmentModule provides recipe execution services. 10.5.7 AbstractEquipmentModule Services — The AbstractEquipmentModule has one or more automated activities, including its normal process (its intended function). The user shall be able to start, stop, abort, and resume the activities of the module. NOTE 4: Changing the operational state of an individual AbstractEquipmentModule within a multi-process Equipment during automatic processing will affect both upstream and downstream operations. The Equipment is responsible for determining the impact on other AbstractEquipmentModules. NOTE 5: Directly changing the operational state of the AbstractEquipmentModule is not the same as changing the state of a job or as changing the operational state of the Equipment. The\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.6  AbstractEquipmentModule Attributes (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.6  AbstractEquipmentModule Attributes\n\nContent: equipment supplier shall document the relationships between the operational state of the Equipment, the AbstractEquipmentModule, and the different job types that it supports.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.1  Abort\n\n10.5.7.1.1  On receipt of an Abort request from the user, the module shall stop all of its current activity as soon as it is safe to do so.  It should remove any material in process within the module whenever possible to do so safely.  \n10.5.7.1.2  A module may also self-abort when it detects a dangerous condition.  \n10.5.7.1.3  In the Behavior State Model, the module shall transition from ACTIVE SERVICE to ABORTING when an abort occurs.  When all activity has ceased other than normal background activities for environmental control, the module transitions to ABORTED.  The module shall not start a new activity until it is instructed to do so by the user or the user instructs it to return to IDLE.  \n10.5.7.2  Add Process Capability — ProcessCapabilityList is an attribute of the equipment module and consists of a list of text strings representing process capabilities that are meaningful to the user.  Individual capabilities are added by the factory to recognize the type of processes the equipment module may be able to run.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.3  Pause\n\n10.5.7.3.1  On receipt of a Pause request from the user, the module shall suspend its activity at the next logical point in the process from which it will be able to resume activities at a later time and which will prevent unintended change to the product.  It shall not accept new work while it is in this state.  \n10.5.7.3.2  In many cases, to avoid unintended change to the product, the AbstractEquipmentModule should wait until the current product has been removed and then pause, preventing new product from entering.  \n10.5.7.4  Remove Process Capability — This allows the factory to remove from the ProcessCapabilityList a capability that is no longer required or one that can not be performed by the equipment due to environment or actual physical changes in the equipment.  \n10.5.7.7.2  The user may issue a Start Activity request to a specific AbstractEquipmentModule.  \n10.5.7.8  Startup — The Startup request is used when an AbstractEquipmentModule has been shutdown.  The specific activities that result shall be documented by the supplier.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.9  Stop (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.9  Stop\n\nContent: 10.5.7.9.1 On receipt of a Stop request from the user, the module shall stop its current activity in an orderly fashion as soon as it is safe to do so, with all product material returned as would be expected had the activity completed normally. 10.5.7.9.2 In the Behavior State Model, the module shall transition from ACTIVE SERVICE to STOPPING when a stop operation begins. When all activity has ceased other than normal background activities for environmental control, the module transitions to STOPPED. The module shall not start a new activity until it is instructed to do so by the user. 10.5.8 EquipmentModule Object — The EquipmentModule is a type of AbstractEquipmentModule and inherits all of its attributes, state models, relations, and services. As shown in Figure 20, the EquipmentModule may be an aggregate of EquipmentIODevice, EquipmentSubsystem, and other EquipmentModule objects. 10.5.7.5 Resume — When a Resume request is received during a PAUSE state, the module shall resume its activity from the point where it\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.9  Stop (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.9  Stop\n\nContent: was paused. 10.5.7.6 Shutdown — The Shutdown request is used to put an AbstractEquipmentModule in a state where it is safe to turn off its power and remove it from the equipment. The specific operations shall be documented by the supplier.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.5.7.7  Start\n\n10.5.7.7.1  Some activities may require specific Start instructions.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6  Equipment Object\n\n10.6.1  The Equipment is a type of AbstractEquipmentModule and supports all of the attributes, state models, and services defined for the AbstractEquipmentModule.  \n10.6.2  Equipment is an aggregation of EquipmentModules, EquipmentSubsystems, and EquipmentIODevices objects and owns all the objects of which it is  \nmade.  Figure 21 shows the relationships of the Equipment.  \nFigure 22 Clock Object\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4  Clock Object (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4  Clock Object\n\nContent: 10.6.4.1 Clock represents current real-time date and time of day information. This information may be provided by a physical real-time clock or by other methods of calculating time. The Clock is used to timestamp data and events. 10.6.4.2 Requirements include: The user shall be able to read the current date and time at any time. Equipment shall be capable of using both factory network time services and user interface services to set current date and time. Clock resolution shall be 0.01 seconds or smaller. Date shall maintain a four-digit year. 10.6.3 Equipment Requirements — All equipment shall satisfy the following requirements: The Equipment provides the interface to the factory and shall not be made up of other Equipment. Equipment is the root object within the equipment hierarchy. Equipment may not be a component of any other AbstractEquipmentElement or any of its subtypes. Equipment may be made up of any standardized objects except for other Equipment objects. Equipment is required to have a Clock. Equipment\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4  Clock Object (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4  Clock Object\n\nContent: is required to have at least one CarrierPort. Exceptions to this requirement may be made for testers and for exposure equipment in a linked litho cell that have separate communications with the factory systems. Equipment is responsible for (owns) all of its components 10.6.4.3 All calculations based on, or related to, date and time shall be fault-free in both the twentieth and twenty-first centuries. 10.6.4.4 Table 14 defines the attributes of Clock. Table 14 Clock Attribute Definitions\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4.5  Network Time\n\n10.6.4.5.1  It shall be possible to set current date and time by using time services provided by the network in the factory.  Use of network time allows the different systems within the factory to remain closely synchronized with a high degree of accuracy, and it relieves the factory host from explicitly setting the equipment’s clock.  The attribute UseNet allows the user to enable and disable use of network time services.  \n10.6.4.5.2  When enabled, the equipment shall be responsible for ensuring that any change in time does not result in discontinuities in date/timestamp reporting.  For example, if the time changes in the middle of a process, applying the time change to current process events can cause later events to appear earlier than previous events, or they can give the appearance of large pause in activities during processing.  Both of these cases can cause time-based analysis of data to give wrong results and must be prevented.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.4.6  Timestamp Data\n\n10.6.4.6.1  Date/time information is used by the factory for a variety of purposes, including analysis of historical data.  Typically a factory keeps local time.  GMTDelta, the offset between local time and Greenwich Mean Time, is provided to allow time values to be compared outside of the local time zone.  GMTDelta may also be added to the timestamp to clarify time data when local time changes within a process.  \n10.6.4.6.2  The attribute TimestampFormat allows the user to select the format used for timestamping events. Possible formats include: formatted time, a text string of the form YYYYMMDDhhmmsscc, long signed integer, and floating point.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.5  Equipment Attributes\n\nTable 15  Equipment Attribute Definitions  \n10.6.5.1  Table 15 defines the attributes of the Equipment object, as shown in Figure 23.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6 Equipment Services\n\n10.6.6.1  Basic operational commands may be directed to an EquipmentModule, the Equipment as a whole, or to an individual Process Job.  \n10.6.6.2  For multi-module or multi-process Equipment, the effect of an operational command varies depending upon the level of the target object and the configuration of the Equipment.  Given the number of Process Jobs that are defined during the course of a work shift and their temporary nature; it is unlikely that an operator will differentiate easily between one Process Job and another. Whereas they will be able to more quickly identify an individual module or the Equipment when time is a critical factor.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services\n\nContent: 10.6.6.3.1 Abort — The user may direct the Equipment to abort its operations at any time. The Equipment shall stop all activity as soon as possible while maintaining the safety of the product, the Equipment itself, and people. Product is not returned to the carriers. 10.6.6.3.2 Cleanup — When product is left in the Equipment following an abort operation, it may be necessary to request the Equipment to return all substrates to their carriers. 10.6.6.3.3 Pause — The user may request the Equipment to pause its operations. The Equipment is responsible for determining the appropriate points within its process where it is safe to temporarily stop. As with the Stop command above, the multi-module Equipment may direct individual EquipmentModules to Pause one at a time. 10.6.6.3.4 Resume — This command directs the Equipment to resume normal operations from the PAUSED state. 10.6.6.3.5 Start — The Start command directs the Equipment to begin an activity that is already setup and ready. Its use is not intended for\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services\n\nContent: automatic processing by Equipment providing Process Job capabilities. 10.6.6.3.6 Stop — The user may direct the Equipment to stop activity at any time. The Equipment shall be responsible for ensuring that all of its components stop their activities in an orderly fashion at the first opportunity. Processing shall be completed for all work in process (e.g., substrates that have already been removed from their input carrier), but no processing shall be started for remaining work. For Equipment with multiple EquipmentModules performing individual process steps in a sequence of steps, a Stop command to the Equipment is equivalent to issuing a Stop command to the first EquipmentModule in the sequence, followed by subsequent Stop commands to each EquipmentModule once it has accepted the substrate last started. 10.6.6.4 Time Services — This section describes the services provided by the clock. 10.6.6.4.1 Request Date and Time — The user shall be able to read the equipment’s current date and time as a numeric\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.3 Operational Services\n\nContent: value.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 10.6.6.4.2  Set Date and Time\n\n10.6.6.4.2.1  If UseNet is disabled, the user shall be able to set the current date and time as a numeric value. Note that this method does not generally give good synchronization results.  \n10.6.6.4.2.2  Set Date and Time shall not cause a discontinuity in timestamps for data associated with an individual substrate in process.  \n10.6.6.4.3  Request Formatted Date and Time — The user shall be able to read the equipment’s current date and time as a formatted text string.  \n10.6.6.4.4  Set Formatted Date and Time — If UseNet is disabled, the user shall be able to set the current date and time as a formatted text string.  Note that this method does not generally give good synchronization results.  \n10.6.6.4.5  Synchronize Date and Time — The user may request the equipment to synchronize date and time from the network as soon as it can do so without disrupting the timestamp series for any work in process.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11  OBEM Equipment Functional Requirements\n\n11.1  The functional areas of the equipment are described in the Functional View in Section 8.3. Section 11 defines the requirements for each of these functional areas. These are requirements at the level of the Equipment object, in addition to those specified in Section 10.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2  Access Management\n\n11.2.1  Access Management is responsible for all communications with the user, including local operators, factory systems, and remote users.  As illustrated in Figure 24, the equipment may be required to support multiple users, with at least one connection to the factory and at least one interface to the local operator.  Where automation is used for material handling, more than one human interface will be required.  \n11.2.2  Objects shown in Figure 24 are not standardized objects.  Further work is required to determine requirements for standardized objects to support access management.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces\n\nContent: 11.2.5.1 The equipment shall support a minimum of two user interfaces, one that is dedicated to factory system communications and one that is dedicated for local operations. 11.2.5.2 Equipment may support additional interfaces as well. Equipment handling large wafers $3 0 0 \\mathrm { m m }$ diameter or more) may be required to provide a second operator interface away from the traditional interface at the front. The factory may require separate connections for direct communications with AMHS and/or advanced process control. The equipment supplier’s customer service may need remote access for diagnostics. 11.2.6 Remote Dial-in — This section is reserved for requirements for remote dial-in using a modem. 11.2.7 Access Attributes — Table 16 defines the attributes of the Access Object. Table 16 Access Session Configuration Data 11.3 Date/Time Management — Equipment shall have an OBEM-compliant Clock with sufficient resolution to differentiate the order in which events occur. (See Section 12.) 11.3.1\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces\n\nContent: Timestamp Data — Date/time information is used by the factory for a variety of purposes, including analysis of historical data. Should time change significantly during processing, the assumed ordering of events can be affected so that later events appear earlier, large unexplained gaps can appear in a sequence of events, or data can seem to appear from the past. For these reasons, any change in current time shall not be applied to material in the middle of a process. 11.3.2 Date/Time Values — Date and Time information shall be expressed as a numeric value. 11.3.3 Local Time Change — Where local time changes automatically, the equipment is responsible for maintaining the correct difference between local time and Greenwich Mean Time (GMT) in the Clock attribute GMTDelta. 11.3.4 Optional Timestamp Format — The equipment shall provide an option for the user to include the value of GMTDelta as an additional field in timestamps. The user may enable and disable use of GMTDelta by setting and clearing the\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.2.5  Multiple Operator Interfaces\n\nContent: Boolean Clock attribute UseDelta. 11.4 Equipment Control — Control is divided into several areas: Fault Detection Control, Run to Run Control, Material-Control, and Operational Control. Control of each of these four areas shall be assigned to exactly one user at any point in time. However, that user may be the same for one or more of these areas. 11.4.1 Advanced Process Control (APC) — Two categories of APC are described herein: run-to-run control (between lots, carriers, or substrates), and faultdetection control. Support for APC may be required at the EquipmentModule level. 11.4.2 Run-to-Run Control (R2R) — The factory may dedicate a separate session for Run-to-Run Control. Run-to-run control consists of adjusting Variable Parameter settings of Process Recipes within a process job.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.4.3 Fault Detection Control (FDC) (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.4.3 Fault Detection Control (FDC)\n\nContent: 11.4.3.1 Fault detection is able to detect a probable fault before it can be detected by SPC, equipment failure, or product failure. The user may provide fault detection through analysis of process data in conjunction with data from external sensors. 11.4.3.2 A separate dedicated session may be used for fault detection control because of its need for large amounts of data. FDC may instruct the Equipment to put itself into a downtime state as soon as it completes work currently in process. 11.5 Event Management — Equipment shall provide standard mechanisms for notifying the user of events of interest to the user, together with any data the user has associated with specific events. 11.6 Exception Management — The equipment shall comply with SEMI E41 (EMS). 11.7 Job Management — This section is reserved for requirements related to specifications for managing jobs. Jobs are defined by SEMI E94 Control Job Management and by SEMI E40 Process Management. 11.8 Material I/O Management — Material I/O\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.4.3 Fault Detection Control (FDC) (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.4.3 Fault Detection Control (FDC)\n\nContent: Management allows the user to request services related to management of the carrier ports and internal buffers required for managing the movement of product through the factory (material logistics). Equipment shall comply with the fundamental requirements of SEMI E87 (CMS).\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.9  Material Management\n\n11.9.1  Material Management is responsible for all material present at the equipment from the time it is loaded from the factory until it is unloaded.  This includes tracking of all material that is identifiable.  \n11.9.2  The location of all material that is mobile, such as product, shall be known at all times.  The factory may inquire about what material is currently present and where (at what MaterialLocation) that material is placed.  \n11.9.3  Consumables that are not mobile; such as gold wire on a wire-bonder, may be identified by lot number. The equipment may be required to store current lot numbers for non-mobile material when that information is provided by the factory.  \n11.9.4  Equipment shall comply with the fundamental requirements for SEMI E90 (STS).  \n11.10  Operational Control — The user with Operation Control may issue operational commands related to starting, stopping, process job management, and recipe access, including upload, download, and recipe selection.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.11  Object Management (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.11  Object Management\n\nContent: 11.11.1 This section is reserved for requirements concerning data and information. 11.11.2 Object Management is responsible for providing all data and information required by the factory through Object Services. 11.12 Performance Management — As a type of AbstractEquipmentModule, the equipment shall conform to the Operational State Model defined in Section 10.5.5 and compliance to SEMI E58 (ARAMS). 11.13 Operations Management This section specifies the requirements related to operations, including processing. 11.14 Recipe Execution As a type of EquipmentModule, Equipment providing temporary recipe storage and recipe execution capabilities shall comply to the fundamental requirements for the Execution Recipe and Recipe Executor as specified in SEMI E42. 11.15 Recipe Management — Equipment providing long-term storage of recipes shall comply with the fundamental requirements for the Managed Recipe and either the Recipe Namespace with its Recipe Namespace Manager, or the Distributed Recipe Namespace Segment, for\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.11  Object Management (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 11.11  Object Management\n\nContent: all recipes stored, as specified in SEMI E42.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 12  OBEM Service Definitions (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 12  OBEM Service Definitions\n\nContent: 12.1 This section defines the content of service messages specified in this document and provided by OBEM objects. The services are described in previous sections. This section details the parameters for each message. 12.2 Table 17 lists the services defined in this section. Services of Type “R” are asynchronous requests that require a response. Services of Type N are notifications and do not require a response. 12.3 OBEM compliant equipment is required to understand all service requests. However, if the service is not marked as required, then support for the service itself (the operations) is optional for the equipment, and a response of “request denied” may be returned. 12.4 Services are listed in alphabetical order. Table 17 List of Services 12.5 Service Parameter Definitions — Table 18 defines the parameters for OBEM services. Table 18 Service Parameter Definitions 12.6 Abort — Table 19 defines the Abort service. The Abort request may be directed to the Equipment or to an EquiipmentModule. Table 19\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 12  OBEM Service Definitions (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 12  OBEM Service Definitions\n\nContent: Abort Service Definition 12.7 AddProcessCapability — Table 20 defines the service to add a ProcessCapability. This request may be directed to the Equipment or to an EquipmentModule.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 20  AddProcessCapability Service Definition\n\n12.8  AddElement — Table 21 defines the service to add an AbstractEquipmentElement.  This request may be directed to the Equipment or to an EquipmentModule. Properties needed for the AbstractEquipmentElement must be included in the list of properties.  \nTable 21  AddElement Service Definition  \n12.9  Cleanup — This service directs the equipment to return all substrates that have been removed from their carriers to their appropriate destinations. Table 22 defines the Cleanup service.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 22  Cleanup Service Definition\n\n12.10  GetDateTime — Table 23 defines the GetDateTime service.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 23  GetDateTime Service Definition\n\n12.11  ChangeService — Table 24 defines the ChangeService service.  This service requests that the target object be placed either in service or out of service.  The user shall only be allowed to place an object back into service if it was originally put out of service by a user.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 24  ChangeService Service Definition\n\n12.12  Pause — Table 25 defines the Pause service.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 25  Pause Service Definition\n\n12.13  RemoveProcessCapability — Table 26 defines the service to remove a process capability from the ProcessCapabilityList.  \nTable 26  RemoveProcessCapability Service Definition  \n12.14  RemoveElement — Table 27 defines the service to remove an element previously added by a user.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 27  RemoveElement Service Definition\n\n12.15  Resume — Table 28 defines the service for starting an activity at a designated EquipmentModule or at the Equipment.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 28  ResumeService Definition\n\n12.16  SelectProgram — Table 29 defines the service to select a program for an EquipmentIODevice.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 29  SelectProgram Service Definition\n\n12.17  SetDateTime — Table 30 defines the service for setting the equipment’s date and time.  \nTable 30  SetDateTime Service Definition  \n12.18  Shutdown — Table 31 defines the service to shut down the equipment or one of its modules.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 31  Shutdown Service Definition\n\n12.19  Start — Table 32 defines the service for starting an activity at a designated EquipmentModule or at the Equipment.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 32  Start Service Definition\n\n12.20  Startup — Table 33 defines the service to start up the equipment or one of its modules.  \nTable 33  Shutdown Service Definition  \n12.21  Stop — Table 34 defines the service for stopping an activity at the equipment or one of its modules.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table 34  Stop Service Definition\n\n12.22  SynchDate&Time — The SynchDate&Time service instructs the equipment to synchronize date and time with the network at its next opportunity to do so at a time where a timestamp series for work in process will not be compromised by a change in date or time.  This service is defined in Table 35.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 13  Services Provided by Factory Systems\n\n13.1  This section describes the services provided by the factory system.  These are messages sent by the equipment to the factory system.  \n13.2  Date and Time Request — The equipment may request the current date and time from the factory system.  This message service is identical to the GetDateTime service defined in Section 12.6 and Table 23.  \n13.3  Event Notification — The factory system will receive standard event notifications from the equipment. Event notifications used will depend upon the protocol used.  \n13.4  Alarm and Error Notifications — The factory system will receive notifications of errors and alarms.  Errors may be recoverable.  Equipment shall comply to SEMI E41.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 14  OBEM Compliance\n\nNOTE 6: Section must be completed in order for the provisional status of OBEM to be removed.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 15  Scenarios (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 15  Scenarios\n\nContent: NOTE 7: Section must be completed in order for the provisional status of OBEM to be removed. 15.1 This section contains scenarios showing typical interactions between factory and equipment, including interactions defined by other standards. NOTICE: SEMI makes no warranties or representations as to the suitability of the provisional standards set forth herein for any particular application. The determination of the suitability of the provisional standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These provisional standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this provisional standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this provisional standard, SEMI takes no position respecting the validity of any patent rights or\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 15  Scenarios (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # 15  Scenarios\n\nContent: copyrights asserted in connection with any item mentioned in this provisional standard. Users of this provisional standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # RELATED INFORMATION 1MODELS\n\nNOTE: This related information is not an official part of SEMI E98. This is Related Information for the provisional specification and is not intended to modify or supersede the official standard.  Determination of the suitability of the material is solely the responsibility of the user.  \nThis section provides examples of equipment models to clarify the standard.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-1  Linked Litho Model\n\nR1-1.1  This section describes the application of OBEM objects to a linked litho as illustrated in Figure R1-1.  \nR1-1.2  A linked litho is an aggregate created by physically connecting an apply/develop track to a lithography equipment.  Work enters through the track where it goes through a set of initial processing steps.  Individual substrates are passed to the lithography equipment where they are exposed and returned to another part of the track, where they complete another set of processing steps.  Both the track and the lithography equipment are capable of acting independently.  However, in the linked-litho configuration, they must perform together as a single system and are treated as a single Equipment by the factory.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-1.3  Apply/Develop Track Equipment\n\nR1-1.3.1  Before considering the object model for a linked litho, it is helpful to examine the model for an apply/develop track as a type of stand-alone equipment.  This is illustrated in Figure R1-2.\n\nFigure R1-2 Apply and Develop Track Equipment  \nFigure R1-3 Object Model for Linked Litho Equipment  \nFigure R1-4 Linked Litho Track Module  \nR1-1.4.1  The Linked Litho Equipment has two major EquipmentModules, the track module and the expose module in this model.  The track, in turn, is composed of various types of Sub-modules, such as the Vapor Prime module, the Spin module, and so forth.  \nFigure R1-5 Linked Litho Expose Module Object Model  \nR1-1.4.2  Figure R1-6 shows the makeup of another track module.  This process may be extended as many times as is required by the particular installation.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-2 $3 0 0 ~ \\mathsf { m m }$ Equipment (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-2 $3 0 0 ~ \\mathsf { m m }$ Equipment\n\nContent: R1-2.1 Because of the size and the weight of wafers with a diameter of $3 0 0 ~ \\mathrm { { m m } }$ or greater, a 25-wafer cassette is too heavy for repetitive lifting by people. $3 0 0 ~ \\mathrm { { m m } }$ factories must be able to integrate automated material handling systems and production equipment. To achieve this, equipment loadports must be standardized for access by different material handling technologies such as overhead tracks and rail-guided vehicles in addition to personalguided vehicles (PGVs) used by operators. R1-2.2 In addition to issues regarding access, users require that equipment be capable of continuous processing. To meet this requirement, certain types of equipment need to provide intermediate storage for carriers to prevent starvation, running out of work before new work is delivered. Figure R1-6 Spin/Coat Track Module Object Model Figure R1-7 Example of Object Model for $3 0 0 \\mathrm { m m }$ Equipment R1-2.3 The term “Equipment Front End Module” (EFEM) refers to\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-2 $3 0 0 ~ \\mathsf { m m }$ Equipment (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R1-2 $3 0 0 ~ \\mathsf { m m }$ Equipment\n\nContent: the aggregation shown in Figure R1-8 consisting of all the components handling carriers, i.e., the loadport and buffer subsystems. An EFEM would not typically provide ARAMS capability and therefore would be considered as an EquipmentSubsystem and not considered as an OBEM EquipmentModule. Figure R1-8 Equipment Front End Module (EFEM)\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # RELATED INFORMATION 2 RELATIONSHIP TO THE CIM FRAMEWORK\n\nNOTE: This related information is not an official part of SEMI E98. This is Related Information for the provisional specification and is not intended to modify or supersede the official standard.  Determination of the suitability of the material is solely the responsibility of the user.  \nThis section discusses the relationship of OBEM and the OBEM objects to the objects defined in SEMI E81. It uses terms both from the CIM Framework and from OBEM.  It is not part of the OBEM standard.  \nAdditional documentation should be provided in this section as the CIM Framework develops.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R2-1  Equipment and Machine\n\nR2-1.1  The interface to Equipment defined in OBEM is provided for the physical equipment on the manufacturing floor.  From time to time, the Equipment will be powered off for maintenance and at these times is unable to communicate.  In contrast, the Machine object, defined in the CIM Framework, is part of the manufacturing execution system and is always available, even when the Equipment is powered off or otherwise unable to communicate.  \nR2-1.2  The Machine provides a generic interface for factory logistics and is able to provide some services without relying on the Equipment itself.  The Machine is responsible for communications with the Equipment and for representing the Equipment to the Factory and representing the Factory to the Equipment.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R2-2  EquipmentModule and MachineResource\n\nR2-2.1  The EquipmentModule defined in OBEM corresponds to the MachineResource interface defined in the CIM Framework. The MachineResource is a type of Resource and therefore can respond to requests to start up and shut down.  These services are provided for the EquipmentModule but not for its supertypes.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R2-3  Location Tracking\n\nR2-3.1  The CIM Framework defines an interface for a MaterialTrackingLocation. The MaterialTrackingLocation differs from the OBEM MaterialLocation. MaterialLocations represent places within the equipment itself where carriers and substrates can be placed, including wafer chucks, carrier slots, and robot end effectors.  A MaterialTrackingLocation, in contrast, is at a higher level of granularity and provides the ability to locate material associated with a Machine. MaterialTrackingLocation does not track material locations down to the level of specific places within the equipment.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # RELATED INFORMATION 3 ADDITIONAL DATA\n\nNOTE: This related information is not an official part of SEMI E98. This is Related Information for the provisional specification and is not intended to modify or supersede the official standard.  Determination of the suitability of the material is solely the responsibility of the user.  \nThis section provides examples of equipment models to clarify the standard.  \nThis section contains additional information that is not part of the standard.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1  Representations of Date and Time\n\nR3-1.1  This section discusses several date and time representations, and provides background information in support of the OBEM adoption of an IEEE floating point representation of date and time values.  \nR3-1.2  In this section, the term “date value” means an encoding of a date and time value, such as 12/25/1997 11:04:56.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.3  ASCII Digit Representation\n\nR3-1.3.1  The standard date and time format in SECS communication is the ASCII representation “YYYYMMDDhhmmsscc”.  In this representation, date and time are represented as a fixed length sequence of ASCII digit characters, grouped into fields as indicated.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.4  Long Signed Integer Representation\n\nR3-1.4.1  UNIX represents date and time as the number of ticks since Epoch.  Typically the time interval of a tick is one second.  Date values are expressed as the number of ticks since a certain instant, called the Epoch.  \nR3-1.4.2  There are 31,536,000 seconds in a 365 day year.  If stored as a four byte signed integer, with ticks in seconds, this representation will overflow after approximately 68 years.  Eight byte integers provide sufficient range for dates spanning human history many times.  Unfortunately, eight byte integers are inconvenient on many computer platforms.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.5  Floating Point Representation (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.5  Floating Point Representation\n\nContent: R3-1.5.1 This representation is used in many applications. It represents date values as floating point numbers, with units of days past 12/30/1899. It is very similar to the “Ticks since the Epoch” representation, except that the tick values are days. R3-1.5.2 This representation has the advantages of the “Tick since Epoch” representation for date value arithmetic. Second, the separation of the date and time from a date value is simple. The date is the whole value, the time is the fractional value. Third, the minimum time resolution is very small, and is not fixed by the representation. R3-1.5.3 The following calculation is used to determine roughly the minimum time resolution that can be expressed: R3-1.5.4 The IEEE 8 byte floating point representation uses an excess 128 notation. This means 7 bits of exponent and one bit of sign. This leaves 7 bytes of significant. On November 18, 1997 the day number is 35752. This is hex 8BA8, and requires two bytes. This leaves 5 bytes of significant to\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.5  Floating Point Representation (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R3-1.5  Floating Point Representation\n\nContent: represent the fractional day, or the time portion of the date value. These 5 bytes of significant contain 40 bits, and can represent values to $2 \\land 4 0$ , or one part in 1,099,511,627,776. There are 86,400 seconds in one day, so this representation is accurate to approximately 7.86E-08 seconds, or about 1/10 of a microsecond. In about a hundred years the day number will have doubled, and this resolution will have shrunk by a factor of 2. For practical purposes the resolution is no worse than one microsecond resolution. R3-1.6 Examples\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # RELATED INFORMATION 4OBEM EQUIPMENTIODEVICE AND SENSOR/ACTUATOR NETWORKCOMMON DEVICE MODEL\n\nNOTE:  This related information is not an official part of SEMI E98 and was derived from work developed in the Object-Based Model Task Force in North America, and the Sunsor/Actuator Bus subcommittee.  This related information was approved for publication by full letter ballot on April 30, 2001.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model\n\nContent: R4-1.1 This section describes the relationship between the EquipmentIODevice defined in Section 10.3 and the Common Device Model defined in SEMI E54.1 Standard for Sensor/Actuator Network Common Device Model. R4-1.2 SEMI E54.1 defines in detail the internal structure of a sensor/actuator device on an E54- compliant sensor/actuator network. That is, it defines the possible internal components of such a device and the relationships between these components. To ensure proper behavior, it was necessary to give sufficient guidance to implementers using an E54 network communication protocol. E54.1 defines sensor (input) objects, actuator (output) objects, controller objects, a sensor/actuator controller object (SAC), and a device manager object (DM) as individual components of a sensor/actuator device aggregation as components of an aggregate Common Device Model (CDM). The device aggregation must have at least one sensor or actuator or\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model\n\nContent: controller (combined) and exactly one SAC and one DM. In addition, the CDM defines additional classes to further classify components, such as the ActiveElement, Sensor, and Sensor-Analog Input classes, which should be considered. Some attributes of the EquipmentIODevice Observables only apply to elements of certain classes. R4-1.3 E54.1 does not define the CDM, which is the aggregation of these elements, as an object in its own right,. Such an aggregation might have the sum of all of the attributes of its components. R4-1.4 OBEM defines a high-level device, the EquipmentIODevice, that is of interest to factory system applications such as Advanced Process Control (APC) and Fault Detection Classification (FDC). These systems are seldom interested in all of the low-level details. Actual raw data as read directly by an analog sensor may not be desired but rather a calculated value that has been converted into some specified units, such as\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model (Part 3)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model\n\nContent: degrees Celsius. OBEM can support either. R4-1.5 Some of the attributes of the EquipmentIODevice are maintained only by the equipment. Most of the attributes must come directly from the attributes read from the CDM components for E54.1 compliant devices. The following sections suggest a way to relate attributes of the EquipmentIODevice and attributes of the elements from the CDM in a consistent manner. R4-1.6 Each individual sensor or actuator or controller element within the CDM corresponds to one Observable in the EquipmentIOElement model. Observables were not made into formal objects, as they could be, but rather are included as one set of data within the EquipmentIODevice. Each EquipmentIODevice may have multiple sets of Observables data. R4-1.7 Table R4-1 lists all of the attributes of an EquipmentIODevice, including those it inherits from the AbstractEquipmentElement (marked with asterisks) and shows the object and attribute in the\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model (Part 4)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1  Relationship between OBEM EquipmentIODevice and Sensor/Actuator Network Common Device Model\n\nContent: General Device Model hierarchy to which it corresponds, where a correspondence exists.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # R4-1.7.1  The “em dash” character “—”is used where no correspondence exists.\n\nR4-1.7.2 This table is intended for equipment implementers of E98 and not for the suppliers of E54- compliant devices.\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table R4-1  Relationships between EquipmentIOElement and Generic Device Model (Part 1)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table R4-1  Relationships between EquipmentIOElement and Generic Device Model\n\nContent: NOTICE: SEMI makes no warranties or representations as to the suitability of the provisional standards set forth herein for any particular application. The determination of the suitability of the provisional standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These provisional standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this provisional standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this provisional standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this provisional standard. Users of this provisional standard are expressly advised that determination of any such\n\nSEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table R4-1  Relationships between EquipmentIOElement and Generic Device Model (Part 2)\n\nTitle: SEMI E98-1102 PROVISIONAL STANDARD FOR THE OBJECT- BASED EQUIPMENT MODEL (OBEM) - # Table R4-1  Relationships between EquipmentIOElement and Generic Device Model\n\nContent: patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL\n\nThis specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee. Current edition approved by the North American Regional Standards Committee on August 29, 2002.  Initially available at www.semi.org September 2002; to be published November 2002.  Originally published March 2002.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 1  Purpose\n\n1.1  This document maps the services and data of SEMI E98 Object-Based Equipment Model (OBEM) to SECS-II streams and functions and data definitions.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 2  Scope\n\n2.1  This document applies to all implementations of OBEM that use the SECS-II message protocol (SEMI E5).  \n2.2  This specification is provisional.  To remove the provisional status, the SECS-II format for the attributes of the remaining object defined in OBEM must be included in Section 6:  \nEquipmentIODevice  \n2.3  This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety health practices and determine the applicability or regulatory limitations prior to use.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 3.1  SEMI Standards\n\nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)\nSEMI E39 — Object Services Standard: Concepts, Behavior, and Services\nSEMI E39.1 — SECS-II Protocol for Object Services Standard (OSS)\nSEMI E98 — Provisional Standard for the ObjectBased Equipment Model (OBEM)\nNOTE 1: Unless otherwise indicated, all documents cited  \nTable 1  Services Mapping Table  \nshall be the latest published versions.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 4  Services Mapping\n\n4.1  Table 1 shows the specific SECS-II streams and functions that shall be used for SECS-II implementations of the services defined in OBEM.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 5  Service Parameter Mapping\n\n5.1  Table 2 shows the mapping between service parameters defined by OBEM and the data items defined by SEMI E5. All OBEM messages map to Stream 14 Functions 19 and 20.  The data item SVCNAME is the text string representation of the service name found in Table 1 and should be assumed as case-sensitive.  The name of each parameter is the text string representation of the parameter name as it appears in Table 2.  The SECS-II Data Item Reference, where different from SPVAL, provides additional information and restrictions for the value.  \nTable 2  Service Parameter Mapping Table  \n5.2  Table 3 shows the data items in SECS II messages that do not have a corresponding service parameter.  \nTable 3  Additional Data Item Requirement Table  \nNOTE 1: The text strings specified in Table 3 for SVCNAME shall be recognized by the equipment as vaild, whether the equipment is or is not case-sensitive.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6  Object Attribute Form\n\n6.1  Section 6 defines the SECS-II form of the attributes of objects defined in OBEM, presented in alphabetical order.  Note that attribute names in this section indicate the literal text string that shall be accepted in string comparisons for attribute names in Stream 14 messages.  \n6.1.1  By convention, all tables include ObjID as well as ObjType as the two attributes required by SEMI E39.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.2  AbstractEquipmentElement\n\n6.2.1  Table 5 specifies the attributes of the AbstractEquipmentElement.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.3  AbstractEquipmentModule\n\n6.3.1  Table 6 specifies the elements of the AbstractEquipmentModule object.  \nTable 5  AbstractEquipmentModule Object Attribute Specification\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.4  AbstractEquipmentSubsystem\n\n6.4.1  Table 7 specifies the attributes of the AbstractEquipmentSubsystem.  \nTable 6  AbstractEquipmentSubsystem Object Attribute Specification  \n6.4.2  Table 8 specifies the elements of the MaterialSummary attribute.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.5  CarrierLocation Object\n\n6.5.1  Note that the CarrierLocation inherits the attributes of the MaterialLocation.  \n6.5.2  Table 9 specifies the additional attributes of the CarrierLocation object.  See Table 13.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.6  Clock\n\n6.6.1  Table 10 specifies the attributes of the Clock object.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.7  Equipment\n\n6.7.1  Table 11 specifies the attributes of the Equipment object.\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.8  EquipmentSubsystem\n\n6.8.1  Table 12 specifies the attributes of the AbstractEquipmentSubsystem object.  \nTable 11  EquipmentSubsystem Object Attribute Specification\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.9  Material Location (Part 1)\n\nTitle: SEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.9  Material Location\n\nContent: 6.9.1 Table 13 specifies the attributes of the AbstractEquipmentSubsystem object. Table 12 MaterialLocation Object Attribute Specification NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that\n\nSEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.9  Material Location (Part 2)\n\nTitle: SEMI E98.1-1102PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR THEOBJECT-BASED EQUIPMENT MODEL - # 6.9  Material Location\n\nContent: determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT\n\nThis provisional specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the Japanese Information and Control Committee. Current edition approved by the Japanese Regional Standards Committee on March 14, 2000 and by the North American Regional Standards Committee on March 2, 2000.  Initially available at www.semi.org March 2000; to be published June 2000.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 1  Purpose (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 1  Purpose\n\nContent: 1.1 Wafer fabrication factories wil l require the baseline capabilities of stocker storage and interbay transport. In addition to these baseline capabilities, intrabay transport will be added as a result of ergonomic and safety requirements brought about by the increased size and weight of $3 0 0 \\mathrm { m m }$ wafer carriers. These stocker, interbay transport, and intrabay transport systems will be required to be fully integrated with each other and the factory Manufacturing Execution System (MES) in order to realize the full vision of cost effective automated material transport to and from production equipment. 1.2 A baseline requirement of Aut omated Material Handling System (AMHS) equipment is efficient integration with the factory MES. Therefore, the purpose of this specification is to enable cost effective integration of interoperable AMHS systems, as illustrated in Figure 1. Manufacturers require a SEMI standard which specifies the visible behavior of the AMHS Integration system and its interface\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 1  Purpose (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 1  Purpose\n\nContent: to the factory MES. The purpose of this standard is to specify these interfaces and the interactions between MES and AMHS systems as a part of the CIM Framework. While the term AMHS is commonly used to refer to a wide range of equipment and systems that support automated material handling, the CIM Framework specifies a software component called “Material Transport and Storage Component (MTSC)” which represents the standard interface of the MES to the complete suite of AMHS capabilities.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope\n\nContent: 2.1 This specification provides the common interfaces required by Manufacturing Execution Systems for runtime interactions between the factory (as represented by other CIM Framework components) and the Material Tracking and Storage Component. Some interfaces supporting configuration and tracking of the material transport and storage equipment are the responsibility of the Equipment Tracking and Maintenance component of the CIM Framework. These interfaces are complementary to the interfaces of Transport Machines and Storage Machines presented in this specification. 2.2 The responsibilities of the Mat erial Transport and Storage Component include interfaces that Support scheduling of material transport and processing by predicting time for material delivery to specific locations. NOTE: The interfaces for delivery time prediction are deferred as one of the deficiencies noted in this provisional specification. Execute and monitor transport jobs to move material to specific locations. Validate that the job can\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope\n\nContent: be done: the material is available, the destination is reachable and has available storage or loadport capacity, and there are sufficient material movement resources (cars, storage space, etc.) to implement the job. Request operations from AMHS equipment controllers to enact internal material movement and storage actions. Implementations of the Material Transport and Storage Component will use lower level standards such as IBSEM and StockerSEM for communication with equipment that performs the physical movement and storage actions. Collect and record data on transport job execution and history. Capture, record, interpret, and respond to equipment events and fault detection. Generate MES-level job status events and material location change events. Record and report on material locations and material transport histories for material in the system. Interact with machine and port interfaces for material hand-off handshake protocols. 2.3 Automated Material Handling Systems (AMHS’s) are an important part of any\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 2  Scope\n\nContent: semiconductor factory and have, typically, been implemented and integrated with a Manufacturing Execution System (MES) as a separate logical software entity. An AMHS is made up of the AMHS Framework, the system controllers for AMHS equipment (the software) and the transport and storage machines (the hardware). In keeping with this tradition, the CIM Framework views the AMHS as a “black box” where the interface into that system is visible, but the inner workings and control of that system is the responsibility of the AMHS supplier and not in the domain of the MES. The CIM Framework specifies the Material Transport and Storage Component (MTSC) as the MES level interface to AMHS capabilities. 2.4 This specification does not pur port to address safety issues, if any, associated with its use. It is the responsibility of the users of this specification to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations\n\nContent: 3.1 The Material Transport and St orage Component provides AMHS Framework level interfaces to interoperable AMHS Equipment. This level of material transport is factory level movement, i.e., the transport of product and durables between machines, areas or material tracking locations. The Material Tracking and Storage Component does not provide interfaces that make material movement within machines visible. 3.2 Provisional Status — This spe cification is designated as provisional due to known areas that need to be completed. The following items summarize the deficiencies of the provisional specification to be addressed before a subsequent ballot to upgrade it to full standard status. 3.2.1 Dependence on Global Declarations and Abstract Interfaces — Components of this document reference global declarations and specialize abstract interfaces for material, resource and job concepts. The provisional specification for these declarations and interfaces was balloted and recommended by the SEMI Information and\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations\n\nContent: Control Committee in July, 1999. When this specification is published a revision will be undertaken to clearly define the relationship of this specification to those common elements of the CIM Framework. 3.2.2 Dependence on Durables Management Component — The Material Transport and Storage Component depends upon interfaces specified as part of the Durables Management Component of the CIM Framework. This document includes only the required interfaces from Durables Management. Those interfaces, found in Section 6.2.3, will be removed from this document when the Durables Management Component of the CIM Framework is adopted in a future ballot. 3.2.3 Dependence on Machine Abstract Interface Group — The Material Transport and Storage Component depends upon interfaces specified as part of the Machine Abstract Interface Group (Machine AIG) of the CIM Framework. This document includes only the required interfaces from the Machine AIG. Those interfaces, found in Section 6.2.4, will be removed from this document\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 3  Limitations\n\nContent: when the Machine AIG of the CIM Framework is adopted in a future ballot. 3.2.4 Dependence on Factory Operations Component — The Material Transport and Storage Component depends upon interfaces specified as part of the Factory Operations Component of the CIM Framework. This document includes only the required interfaces from the Factory Operations Component. Those interfaces, found in Section 6.2.5, will be removed from this document when the Factory Operations Component of the CIM Framework is adopted in a future ballot. 3.2.5 Deterministic Prediction of Tra nsport Time — The responsibility for providing estimates of predicted transport time of future TransportJobs in a deterministic way is beyond the scope of the Provisional Specification. This capability may be offered in future upgrades of this specification based on added experience with such predictions. It may be found that heuristic methods for transport time prediction are the most practical way to provide such estimates.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 4.1  SEMI Documents\n\nSEMI E81 — Provisional Specification for CIM Framework Domain Architecture\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 4.2  Other Documents\n\nISO/IEC International Standard 14750 (also ITU-T Recommendation X.920): Information Technology – Open Distributed Processing – Interface Definition Language1  \nUML Notation Guide, Version 1.1, document number ad/97-08-05, Object Management Group\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 5  Terminology\n\n5.1  Abbreviations and Acronyms  \n5.1.1  AMHS — Automated Material Handling System  \n5.1.2  MTSC — Material Transport and Storage Component\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements\n\nContent: 6.1 The following sections specify the interfaces that comprise the Material Transport and Storage Component of the CIM Framework. Additionally, the subsets of interfaces from Durables Management, Machine Abstract Interface Group, and Factory Operations required to support Material Transport and Storage are included here pending future ballots that will address the full scope of these other specifications. 6.1.1 Figure 2 illustrates the context of the Material Transport and Storage Component within the CIM Framework. The Factory Operation component requests the transport of material by the Material Transport Manager which provides services for creation of Transport Jobs. The Material Transport and Storage Component uses services provided by the Machine AIG to access interfaces of Machines and Ports that serve as the source or destination of Transport Jobs. The MES Factory defines areas within a factory which represent groups of machines. Finally, Durables Management provides the services needed to\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements\n\nContent: manage the material containers that are moved. 6.1.2 Figure 3 shows the Material T ransport and Storage Component information model, including the inherited interfaces and the associations between interfaces. These interfaces are fully defined in Sections 6.3 and 6.4. The interfaces associated with the Material Transport and Storage are as follows: 6.2 Required Subsets of Future CI M Framework Specifications 6.2.1 This specification depends on interfaces from Durables Management Component, the Machine Abstract Interface Group and the Factory Operations Component that will eventually be contained in future CIM Framework component specifications. They are included with this document to support a complete specification for AMHS support within the CIM Framework. When these items are balloted as separate documents, they will be removed from this specification and referenced in their full form. 6.2.2 Figure 4 illustrates the depend encies of the Material Transport and Storage Component. 1.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6  Requirements\n\nContent: TransportJobSupervisor – abstract interface, 2. MaterialTransportManager, 3. MaterialTransportController, and 4. TransportJob.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Material Transport and Storage Component (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Material Transport and Storage Component\n\nContent: 6.2.3 Durables Management Component (subset) — This section includes only those interfaces and specific operations from the Durables Management Component that are referenced within this component specification. These interfaces are provided here for the referential integrity of this specification and are not included as part of this component. Further, this is not intended to be a comprehensive treatment of the required interfaces, but only the subset needed here for reference prior to the full specification of Durables Management being adopted through a subsequent ballot. When that occurs, this specification can be updated by a follow-on ballot to reference the interfaces directly rather than replicate them here. Module: DurablesManagement Interface: Durable Inherited Interface: Material interface Durable : AbstractIF::Material { Description: The Durable interface represents any Material in the Factory used to facilitate manufacturing but not normally consumed in the\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Material Transport and Storage Component (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Material Transport and Storage Component\n\nContent: process. It is capable of relocation within the Factory and requires dynamic tracking. This includes containers used to transport the Material, fixtures (attachments for holding material in a fixed position), and tools (such as reticles, load boards, workholders) used by equipment or personnel in the manufacturing process. Grouping of Durables (such as all reticles that are usable for a given process) can be achieved by creating MaterialGroups for the specific categorizations required. Exceptions: Published Events: /\\* Notifies subscribers of a change in the MaterialTrackingLocation that is tracking the Durable. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # DurableLocationChangedEvent\n\nProvided Services:  \n$/ ^ { * }$ Set and get the location of the durable. If the MaterialTrackingLocation is set to NULL, the durable is not in any MaterialTrackingLocation and may be under manual control within the factory. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # void setMaterialTrackingLocation (\n\nin MachineAIG::MaterialTrackingLocation aMaterialTrackingLocation)\nraises (Global::FrameworkErrorSignal, MachineAIG::MaterialTrackingLocation::MaterialTrackingLocationFullSignal);  \nMachineAIG::MaterialTrackingLocation getMaterialTrackingLocation ( ) raises (Global::FrameworkErrorSignal);  \n$/ ^ { * }$ Set and get the Unit that determines which MaterialTrackingLocation this Durable will be tracked through for a given Machine. The Unit is a string value that maps to the Unit attribute of the MaterialTrackingLocation. \\*/  \nvoid setUnit( in string aUnit) raises (Global::FrameworkErrorSignal, MachineAIG:: MaterialTrackingLocation::InvalidUnitSignal);  \nstring getUnit( ) raises (Global::FrameworkErrorSignal);\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // Durable\n\nDynamic Model: None  \n6.2.3.2  MaterialContainer Interface (s ubset)  \nModule: DurablesManagement Interface: MaterialContainer Inherited Interface: Durable  \ninterface MaterialContainer : Durable {  \nDescription: A MaterialContainer interface represents any receptacle for holding Material for transport, processing or storage. Examples of MaterialContainers are shipping boxes, tubes, standard mechanical interface (SMIF) pods, etc.\nExceptions: None.  \nPublished Events: /\\* Notifies subscribers of a state change in the MaterialContainer. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialContainerStateChangeEvent\n\nProvided Services: /\\* The following operations are provided to trigger MaterialContainer state transitions. \\*/  \nvoid makeManualControl ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal);  \nvoid makeStored ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal);  \nd makeInTransit ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal);  \nid makeProcessing ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal);\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MaterialContainer\n\ntypedef sequence <MaterialContainer> MaterialContainerSequence;  \nDynamic Model:  \nTable 1  MaterialContainer State Definitions  \nTable 2  MaterialContainer State Transitions\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4  Machine Abstract Interface Group (subset)\n\nThis section includes only those interfaces and specific operations from the Machine Abstract Interface Group that are referenced within this component specification. These interfaces are provided here for referential integrity of this specification and are not intended to remain as part of this component. Further, this is not intended to be a comprehensive treatment of the required interfaces, but only the subset needed for reference until the full specification is adopted through a subsequent ballot. When that occurs, this specification can be updated to reference the interfaces directly rather than replicate them here.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset) (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset)\n\nContent: Module: MachineAIG Interface: Machine Inherited Interface: Resource interface Machine : AbstractIF::Resource Description: This abstract interface representing the concept of a piece of equipment in the factory. A Machine establishes the identity of the physical equipment existing in the factory for reference within an MES context. The Machine also maintains one MaterialTrackingLocation for each Unit defined to classify the Material processed, used, or stored by the Machine. Type Definitions: typedef sequence <Machine> MachineSequence; typedef sequence <MaterialTrackingLocation> MaterialTrackingLocationSequence; typedef sequence <Port> PortSequence; enum MachineType { FixedBufferProductionMachine, InternalBufferProductionMachine, StorageMachine, TransportMachine }; Exceptions: /\\* Port indicated for receiving material was invalid. \\*/ exception InvalidPortSignal { }; /\\* Material specified for unloading was invalid. \\*/ exception InvalidMaterialSignal { }; Published Events: /\\* An\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset) (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset)\n\nContent: E10 State change has occurred in the Machine that the Factory needs to know. \\*/ MachineResourceE10StateChangedEvent Provided Services: /\\* Set the MachineType for this machine. \\*/ void setMachineType ( in MachineType aMachineType ) raises (Global::FrameworkErrorSignal); /\\* Return the MachineType for this machine. \\*/ MachineType getMachineType ( ) raises (Global::FrameworkErrorSignal); /\\* Set up a MaterialTrackingLocation for this Machine to track a particular material Unit characterizing its contents. A Machine may have more than one MaterialTrackingLocation as long as each is tracking a different Unit. The value of Unit is used with corresponding attributes of the material to allocate the tracked material to the correct MaterialTrackingLocation for a Machine. \\*/ void setMaterialTrackingLocation ( in MaterialTrackingLocation aMaterialTrackingLocation, in string aUnitToTrack) raises (Global::FrameworkErrorSignal); $/ ^ { * }$ Get all MaterialTrackingLocations for this\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset) (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.2.4.1  Machine Interface (subset)\n\nContent: Machine. There is one and only one MaterialTrackingLocation per Unit used in the Machine. \\*/ MaterialTrackingLocationSequence getAllMaterialTrackingLocations ( ) raises (Global::FrameworkErrorSignal); /\\* Get the MaterialTrackingLocation for the Unit specified. \\*/ MaterialTrackingLocation getMaterialTrackingLocation ( in string aUnit) raises (Global::FrameworkErrorSignal); /\\* Request a Machine to reserve a port to load material. This may involve communication between the Port and the Machine Objects, but these need not be public (or may involve communication between the Machine and the Equipment). If requestedPort parameter left null, machine chooses the requestedPort. Returns Null if Machine cannot or refuses to comply. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForTransferTo\n\nin DurablesManagement::MaterialContainer aContainer,\nin Port requestedPort )\nraises (Global::FrameworkErrorSignal, InvalidPortSignal);  \n$/ ^ { * }$ Request a Machine to reserve a port to load two or more MaterialContainers. All MaterialContainers in the sequence must be loaded before the Machine can accept another port reservation request. The MaterialContainers specified in the MaterialContainerSequence may be loaded in any order. If requestedPort parameter left null, machine chooses the requestedPort.  Returns Null if Machine cannot or refuses to comply. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo\n\nContent: in DurablesManagement::MaterialContainerSequence aContainerGroup, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); /\\* Request a Machine to cancel a reservation previously established for a transfer to a port. \\*/ void cancelPortReservationForTransferTo in DurablesManagement::MaterialContainer aContainer, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); /\\* Inform a Machine that a transfer to or from a port has been completed. This may involve communication between the Port and the Machine Objects, but these need not be public (or may involve communication between the Machine and the Equipment). \\*/ void transferComplete (in DurablesManagement::MaterialContainer aContainer, in Port reservedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); $/ ^ { * }$ Request a Machine to prepare to unload material. Returns the Port on which the material will be unloaded or Null if the Machine cannot or refuses to\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo\n\nContent: comply. \\*/ Port containerOut ( in DurablesManagement::MaterialContainer aContainer, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal); /\\* Returns a list of all Ports for the machine. \\*/ PortSequence allPorts ( ) raises (Global::FrameworkErrorSignal); /\\* Returns the list of all Areas that this Machine is in. \\*/ AreaSequence allAreas( ) raises (Global::FrameworkErrorSignal); }; // Machine 6.2.4.2 MaterialTrackingLocation Interface Module: MachineAIG Interface: MaterialTrackingLocation Inherited Interface: OwnedEntity interface MaterialTrackingLocation : AbstractIF::OwnedEntity { Description: A MaterialTrackingLocation is a place where Material may be held. The “type” of the location is based on the classification Unit of Material that the location can hold (e.g., locations to hold wafers have a “Wafer” Unit and can only hold this Material type). Each machine has one MaterialTrackingLocation for each material Unit. The MaterialTrackingLocation\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Port reservePortForBatchTransferTo\n\nContent: also maintains a capacity. Exceptions: /\\* Material specified in the call is not a valid Material for this MaterialTrackingLocation. \\*/ exception InvalidMaterialSignal { }; /\\* Intent to assign more Material to the MaterialTrackingLocation failed because it is full. \\*/ exception MaterialTrackingLocationFullSignal { }; $/ ^ { * }$ Unit value is not valid for the MaterialTrackingLocation. \\*/ exception InvalidUnitSignal { }; Published Events: $/ ^ { * }$ A Material Tracking Location has reached its capacity. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent\n\nContent: $/ ^ { * }$ A Material Tracking Location that was previously Full now has available capacity. \\*/ MaterialTrackingLocationNotFullEvent Provided Services: $/ ^ { * }$ Return the Material at the MaterialTrackingLocation, return nil if the location is empty. \\*/ AbstractIF::MaterialSequence allMaterialHeld ( ) raises (Global::FrameworkErrorSignal); /\\* Get and set the unique identifier for the MaterialTrackingLocation. \\*/ string getIdentifier ( ) raises (Global::FrameworkErrorSignal); void setIdentifier ( in string identifier) raises (Global::FrameworkErrorSignal, Global::SetValueOutOfRangeSignal, Global::DuplicateIdentifierSignal); $/ ^ { * }$ Return the Machine that holds this MaterialTrackingLocation. \\*/ Machine getMachine ( ) raises (Global::FrameworkErrorSignal); $/ ^ { * }$ Set the material Unit that can be held in the MaterialTrackingLocation. Example: If the MaterialTrackingLocation is to hold wafers, the Unit could be “wafer”. If it was a particular size of Wafer the Unit\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent\n\nContent: could be “200mmWafer.” \\*/ oid setUnit ( in string aUnit) raises (Global::FrameworkErrorSignal, InvalidUnitSignal); /\\* Get the Unit for the MaterialTrackingLocation. \\*/ string getUnit ( ) raises (Global::FrameworkErrorSignal); $/ ^ { * }$ Add a Material to the MaterialTrackingLocation. \\*/ void addMaterialToTrack ( in AbstractIF::Material aMaterial ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal, MaterialTrackingLocationFullSignal); /\\* Remove a Material from the MaterialTrackingLocation. \\*/ void removeMaterial ( in AbstractIF::Material aMaterial ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal); /\\* Reserve capacity of the MaterialTrackingLocation. If accepted, this portion of the MaterialTrackingLocation’s capacity will be kept for the designated material. If the capacity is reserved the operation returns True. \\*/ boolean reserveCapacity ( in AbstractIF::Material capacityToReserve) raises (InvalidUnitSignal, InvalidMaterialSignal,\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent\n\nContent: MaterialTrackingLocationFullSignal, Global::FrameworkErrorSignal); /\\* Release reserved capacity of the MaterialTrackingLocation. If accepted, this portion of the MaterialTrackingLocation’s capacity will be released for use by other material. \\*/ boolean releaseCapacity ( in AbstractIF::Material capacityToRelease) raises (Global::FrameworkErrorSignal); /\\* Get and set the Maximum Capacity for the MaterialTrackingLocation. \\*/ void setMaximumCapacity ( in long maximum) raises (Global::FrameworkErrorSignal, Global::SetValueOutOfRangeSignal); long getMaximumCapacity ( ) raises (Global::FrameworkErrorSignal); $/ ^ { * }$ Get the Available Capacity for the MaterialTrackingLocation. Available Capacity is the difference between Maximum Capacity and the count of the sequence returned by AllMaterialHeld. \\*/ long getAvailableCapacity ( ) raises (Global::FrameworkErrorSignal); /\\* Get the Reserved Capacity for the MaterialTrackingLocation. Reserved Capacity is the portion of the\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent (Part 4)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MaterialTrackingLocationFullEvent\n\nContent: AvailableCapacity that has been set aside for known material that has not yet arrived. \\*/\n\nDocument Part 1\n\nContent: long getReservedCapacity ( ) raises (Global::FrameworkErrorSignal); $/ ^ { * }$ This is a query for the availability status of the MaterialTrackingLocation. Available means the MaterialTrackingLocation has available capacity in which more material could go. \\*/ boolean hasAvailableCapacity ( ) raises (Global::FrameworkErrorSignal); }; // MaterialTrackingLocation 6.2.4.3 Port Interface (subset) Module: MachineAIG Interface: Port Inherited Interface: Resource interface Port : AbstractIF::Resource { Description: The Port represents the point at which a “change of ownership” occurs during a material transfer. Each Port has at least one associated Machine and the Port may be thought of as an “access point” to the Machine. Exceptions: None. Events: None. Provided Services: $/ ^ { * }$ Returns the machine to which this port belongs. \\*/ Machine getMachine ( ) raises (Global::FrameworkErrorSignal); }; // Port 6.2.5 Factory Operations Componen t (subset) — This section includes only those interfaces and specific operations from the Factory Component that are referenced within this component specification. These interfaces are\n\nDocument Part 2\n\nContent: provided here for referential integrity of this specification and are not intended to remain as part of this component. Further, this is not intended to be a comprehensive treatment of the required interfaces, but only the subset needed for reference until the full specification is adopted through a subsequent ballot for the full Factory Operations component. When that occurs, this specification can be updated to reference the interfaces directly rather than replicate them here. 6.2.5.1 MachineRegister Interface Module: FactoryOperations Interface: MachineRegister Inherited Interface: Resource interface MachineRegister : AbstractIF::Resource { Description: The MachineRegister maintains a list of known machines for the factory and supplies related information on demand. There is only one MachineRegister per factory. NOTE: this interface may eventually be replaced by the trader service. Exceptions: /\\* An attempt was made to locate an unknown Machine. \\*/ exception MachineNotFoundSignal {string machineName;}; exception MachineRemovalFailedSignal { }; Published Events: /\\* Event indicating that a Machine has been added or\n\nDocument Part 3\n\nContent: removed from the Factory. \\*/\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # MachineListChangedEvent\n\nProvided Services:  \n/\\* Add a Machine to the set of machine(s) managed by the MachineRegister. \\*/ void addMachine (in Machine aMachine) raises (Global::FrameworkErrorSignal);  \n/\\* Remove a Machine from the set of machine(s) managed by the MachineRegister. \\*/ void removeMachine (in Machine aMachine) raises (Global::FrameworkErrorSignal, MachineRemovalFailedSignal);  \n/\\* Return a sequence of all machines managed by the MachineRegister. \\*/  \nMachineSequence allMachines ( ) raises (Global::FrameworkErrorSignal);  \n/\\* Return the Machine corresponding to the given name. \\*/  \nMachine findMachineNamed (in string identifier) raises (Global::FrameworkErrorSignal, MachineNotFoundSignal) ;\nContracted Services: None.\nDynamic Model: None.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister\n\nContent: 6.3 Material Transport Abstract In terfaces — The Material Transport Abstract Interfaces are defined to perform material transport at the factory level. The TransportJobSupervisor interface must be specialized by the users of the Material Transport Manager Interface. These interfaces provide a way to track the job through the factory. 6.3.1 TransportJobSupervisor Interface Module: MaterialTransport Interface: TransportJobSupervisor Inherited Interface: JobSupervisor interface TransportJobSupervisor : AbstractIF::JobSupervisor { Description: TransportJobSupervisor is an abstract interface which provides the operations needed by clients to request, track, and control material transport within the domain of the specific TransportJobSupervisor. Any entity which is responsible for moving material will inherit and implement TransportJobSupervisor. Type Definitions: typedef sequence <Global::Properties> JobSpecSequence; Exceptions: exception UnsupportedDestinationTypeSignal { }; Published Events:\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister\n\nContent: None. Provided Services: The Creation of TransportJobs is accomplished by use of the requestJob operation from the inherited JobSupervisor interface. The “JobType” property specified in the inherited interface should be set to “TransportJobType” for all TransportJob requests. The additional Job Specification properties required for the creation of Transport jobs are defined in Table 3. The types of machines specified in the TransportJob are AMHS Storage Machines, Fixed Buffer Production Equipment, or Internal Buffer Production Equipment. Each machine type represents a separate case used in defining the Job Specification for a Transport Job, and these cases are also defined in Table 3. For transportJobs, the inherited ABORTING and ABORTED states may not always result in an immediate termination of the job and associated activities. For example, transportJobs may involve autonomous transport equipment that operate without persistent communication links to the TransportJob and\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister\n\nContent: TransportJobSupervisor objects. In these cases there may be a time delay before the results of a transportJob makeAborted request can be enacted to allow the transport equipment to reach a known location. In other cases a movement activity must reach a stable condition before it can be interrupted. The location of the MaterialContainer associated with the aborted TransportJob is the nearest location where movement can be safely and reliably interrupted. By contrast, if a transportJob is transitioned to the inherited STOPPING state, the location of the MaterialContainer associated with the stopped TransportJob must be a legal Source for issuing a new TransportJob. Table 3 Additional Required Properties for Transport Jobs $/ ^ { * }$ The requestBatchTransportJob operation will provide two or more job specifications for transport jobs that share a dependency on completion. All job specifications must have the same priority. In the normal case, the TransportJobSupervisor will create simple\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister (Part 4)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # }; // MachineRegister\n\nContent: transport jobs for each job specification and return the jobs as a sequence. Subsequently, if one of the simple jobs cannot complete, the other subordinate jobs must be reassessed by the JobRequestor to determine the appropriate corrective action. In this case, the TransportJobSupervisor will notify the JobRequestor of the job failure with the informJobTerminated message and pause the other jobs of the batch-job to allow the JobRequestor to determine its response. Implementations may implement the TransportJobSupervisor with more complex default actions in response to a partial failure of a batch-transport-job, but these more complex scenarios are not part of the standard behavior for this operation. \\*/ AbstractIF::JobSequence requestBatchTransportJob ( in JobSpecSequence jobSpecs, in AbstractIF::JobRequestor aJobRequestor) raises (Global::FrameworkErrorSignal, AbstractIF::JobSupervisor::JobRejectedSignal); Contracted Services: None Dynamic Model: None\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.4  Material Transport and Storage Component (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.4  Material Transport and Storage Component\n\nContent: 6.4.1 This component is concerned o nly with factory-wide material transport and not the movement of material within a piece of equipment. Also note that material can be either product, durables, or consumables. The CIM Framework recognizes the potential for multiple AMHS’s within a single factory (e.g., one supplier of interbay movement and another supplier of intrabay movement). The MES, however, wants to only have to issue a move request (“move this material from here to there”) without regard to whether that transport spans one or more AMHS’s. Therefore, the component supporting material transport requires a single entry point for initiating material transport which will be through the Material Transport Manager (MTM). 6.4.2 The Material Transport Manag er must be able manage transport jobs carried out by many different AMHS’s. To accomplish this, a separate interface for a Material Transport Controller (MTC) is specified. In the simplest implementations, a single\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.4  Material Transport and Storage Component (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # 6.4  Material Transport and Storage Component\n\nContent: MTM may manage all TransportJobs directly. In this case no separate Material Transport Controller implementation is needed. If there is a need for delegation to one or more Material Transport Controllers, the Material Transport Manager can register any conformant MTC implementation which supports the specified interface. The low-level interaction of the material movement controllers with the physical equipment (transport machines, storage machines and ports) is encapsulated within the scope of this component. Note that the component manager does not provide lifecycle services for its managed material movement controllers, but instead uses the registration interfaces. 6.4.3 MaterialTransportManager In terface Module: MaterialTransport Interface: MaterialTransportManager Inherited Interface: ComponentManager, TransportJobSupervisor, JobRequestor interface MaterialTransportManager : FactoryOperations::ComponentManager, TransportJobSupervisor, AbstractIF::JobRequestor {\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Description:\n\nA MaterialTransportManager (MTM) operates on requests to move material in the factory. It returns a TransportJob to the requestor, allowing the requestor to track the status and progress of the move. The MTM may perform these TransportJobs by breaking them into separate tasks to be performed by MaterialTransportControllers (MTC). If TransportJobs are decomposed, the MaterialTransportManager then tracks the MTC TransportJobs to fulfill its commitment.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions: (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions:\n\nContent: exception MaterialTransportControllerNotRegisteredSignal { }; Published Events: None. Provided Services: /\\* Add a MaterialTransportController to the collection of MaterialTransportControllers which the MaterialTransportManager can use to carry out jobs. \\*/ void registerMaterialTransportController in MaterialTransportController aMaterialTransportController) raises (Global::FrameworkErrorSignal); /\\* Remove a MaterialTransportController from the list of resources available to the MaterialTransportManager. No new jobs will be issued but existing jobs will be unaffected. \\*/ void unregisterMaterialTransportController ( in MaterialTransportController aMaterialTransportController) raises (Global::FrameworkErrorSignal, MaterialTransportControllerNotRegisteredSignal); /\\* Return a list of all MaterialTransportControllers managed by the MaterialTransportManager. \\*/ MaterialTransportControllerSequence allMaterialTransportControllers ( ) raises (Global::FrameworkErrorSignal); /\\* Returns a list of all material\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions: (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions:\n\nContent: in the material transport system. \\*/ AbstractIF::MaterialSequence allMaterial ( ) raises (Global::FrameworkErrorSignal); /\\* Returns a list of all material in transit in the material transport system. \\*/ AbstractIF::MaterialSequence allMaterialInTransit ( ) raises (Global::FrameworkErrorSignal); /\\* Returns a list of all material in storage in the material transport system. \\*/ AbstractIF::MaterialSequence allMaterialInStorage ( ) raises (Global::FrameworkErrorSignal); Contracted Services: None Dynamic Model: None }; // MaterialTransportManager 6.4.4 MaterialTransportController I nterface Module: MaterialTransport Interface: MaterialTransportController Inherited Interface: TransportJobSupervisor interface MaterialTransportController : TransportJobSupervisor { Description: A MaterialTransportController accepts transport job requests, schedules them, and executes them in order to move material around the factory or a part of the factory. Exceptions: None. Published Events: None. Provided Services:\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions: (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions:\n\nContent: typedef sequence <MaterialTransportController> MaterialTransportControllerSequence; /\\* Returns a list of all material in the domain of this material transport controller. \\*/ AbstractIF::MaterialSequence allMaterial ( ) raises (Global::FrameworkErrorSignal); /\\* Returns a list of all material in transit in the domain of this material transport controller. \\*/ AbstractIF::MaterialSequence allMaterialInTransit ( ) raises (Global::FrameworkErrorSignal); /\\* Returns a list of all material in storage in the domain of this material transport controller. \\*/ AbstractIF::MaterialSequence allMaterialInStorage ( ) raises (Global::FrameworkErrorSignal); Contracted Services: None Dynamic Model: None }; // MaterialTransportController 6.4.5 TransportJob Interface Module: MaterialTransport Interface: TransportJob Inherited Interface: Job interface TransportJob : AbstractIF::Job { Description: This type of Job performs a specific transport of material. The ongoing status of the move can be monitored by subscribing to\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions: (Part 4)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions:\n\nContent: the appropriate Job events. Exceptions: exception TimeUndeterminableSignal { }; Published Events: Same as Job Provided Services: /\\* Determine if the move can be completed by the specified time. \\*/ boolean canCompleteBy ( in Global::TimeStamp whenNeeded) raises (Global::FrameworkErrorSignal, TimeUndeterminableSignal); /\\* Estimate how long this job will take once it begins. \\*/ Global::Duration transportTime ( ) raises (Global::FrameworkErrorSignal, TimeUndeterminableSignal); Contracted Services: None Dynamic Model: None }; // TransportJob 6.4.6 TransportMachine Interface Module: MaterialTransport Interface: TransportMachine Inherited Interface: Machine interface TransportMachine : MachineAIG::Machine { Description: This concrete specialization of Machine represents the equipment used to transport material within the factory. Implementations of the Material Transport and Storage Component would provide implementations supporting this interface for each TransportMachine registered with the factory.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions: (Part 5)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Exceptions:\n\nContent: Exceptions: None Published Events: Same as Machine Provided Services: None Contracted Services: None Dynamic Model: None }; // TransportMachine 6.4.7 StorageMachine Interface Module: MaterialTransport Interface: StorageMachine Inherited Interface: Machine interface StorageMachine : MachineAIG::Machine { Description: This concrete specialization of Machine represents the equipment used to store material within the factory. Implementations of the Material Transport and Storage Component would provide implementations supporting this interface for each StorageMachine registered with the factory. Exceptions: None Published Events: $^ { * } /$ Notifies subscribers that a MaterialContainer arrived on a manual input port may require further action (e.g., creation of a TransportJob or transfer to a particular logical partition). \\*/ const string MaterialContainerArrivedAtManualInputPortSubject $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ “/MaterialTransport/StorageMachine/MaterialContainerArrivedAtManualInputPort”;\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # struct MaterialContainerArrivedAtManualInputPortFilters {\n\nGlobal::Property Port; Global::Property MaterialContainer; };  \nTable 4  MaterialContainerArrivedAtManualInputPortFilters Properties:\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # struct MaterialContainerArrivedAtManualInputPortEvent {\n\nstring eventSubject;\nGlobal::TimeStamp eventTimeStamp;\nMaterialContainerArrivedAtManualInputPortFilters eventFilterData;\nGlobal::Properties eventNews;\nStorageMachine aMachine  \n};  \nProvided Services: None Contracted Services: None Dynamic Model: None }; // StorageMachine\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: NOTE: The material in this appendix is an official part of SEMI E10# and was approved by full letter ballot procedures on January 14, 2000 by the Japanese Regional Standards Committee. module CIMFW #include <Global.idl> #include <FactoryLabor.idl> ude <AbstractIF.idl> ude <FactoryOperations.idl> e MachineAIG { interface Machine; interface MaterialTrackingLocation; interface Port; typedef sequence <Machine> MachineSequence; exception MachineDuplicateSignal { }; exception MachineNotAssignedSignal { }; exception MachineRemovalFailedSignal { }; exception MaterialTrackingLocationFullSignal { }; interface Machine : AbstractIF::Resource { typedef sequence <Machine> MachineSequence; typedef sequence <MaterialTrackingLocation> MaterialTrackingLocationSequence; typedef sequence <Port> PortSequence; enum MachineType { FixedBufferProductionMachine, InternalBufferProductionMachine, StorageMachine, TransportMachine }; exception InvalidPortSignal { }; exception\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: InvalidMaterialSignal { }; void setMachineType ( in MachineType aMachineType ) raises (Global::FrameworkErrorSignal); MachineType getMachineType ( ) raises (Global::FrameworkErrorSignal); void setMaterialTrackingLocation ( in MaterialTrackingLocation aMaterialTrackingLocation, in string aUnitToTrack) raises (Global::FrameworkErrorSignal); MaterialTrackingLocationSequence getAllMaterialTrackingLocations ( ) raises (Global::FrameworkErrorSignal); MaterialTrackingLocation getMaterialTrackingLocation ( in string aUnit) raises (Global::FrameworkErrorSignal); Port reservePortForTransferTo ( in DurablesManagement::MaterialContainer aContainer, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); Port reservePortForBatchTransferTo ( in DurablesManagement::MaterialContainerSequence aContainerGroup, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); void cancelPortReservationForTransferTo ( in\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 3)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: DurablesManagement::MaterialContainer aContainer, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); void transferComplete (in DurablesManagement::MaterialContainer aContainer, in Port reservedPort ) raises (Global::FrameworkErrorSignal, InvalidPortSignal); Port containerOut ( in DurablesManagement::MaterialContainer aContainer, in Port requestedPort ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal); PortSequence allPorts ( ) raises (Global::FrameworkErrorSignal); FactoryOperations::AreaSequence allAreas( ) raises (Global::FrameworkErrorSignal); }; // Machine interface MaterialTrackingLocation : AbstractIF::OwnedEntity { exception InvalidMaterialSignal { }; exception MaterialTrackingLocationFullSignal { }; exception InvalidUnitSignal { }; AbstractIF::MaterialSequence allMaterialHeld ( ) raises (Global::FrameworkErrorSignal); string getIdentifier ( ) raises (Global::FrameworkErrorSignal); void setIdentifier ( in string\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 4)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: identifier) raises (Global::FrameworkErrorSignal, Global::SetValueOutOfRangeSignal, Global::DuplicateIdentifierSignal); Machine getMachine ( ) raises (Global::FrameworkErrorSignal); void setUnit ( in string aUnit) raises(Global::FrameworkErrorSignal, InvalidUnitSignal); string getUnit ( ) raises (Global::FrameworkErrorSignal); void addMaterialToTrack ( in AbstractIF::Material aMaterial ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal, MaterialTrackingLocationFullSignal); void removeMaterial ( in AbstractIF::Material aMaterial ) raises (Global::FrameworkErrorSignal, InvalidMaterialSignal); boolean reserveCapacity ( in AbstractIF::Material capacityToReserve) raises (InvalidUnitSignal, InvalidMaterialSignal, MachineAIG::MaterialTrackingLocationFullSignal, Global::FrameworkErrorSignal); boolean releaseCapacity ( in AbstractIF::Material capacityToRelease) raises (Global::FrameworkErrorSignal); void setMaximumCapacity ( in long maximum) raises\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 5)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: (Global::FrameworkErrorSignal, Global::SetValueOutOfRangeSignal); long getMaximumCapacity ( ) raises (Global::FrameworkErrorSignal); long getAvailableCapacity ( ) raises (Global::FrameworkErrorSignal); long getReservedCapacity ( ) raises (Global::FrameworkErrorSignal); boolean hasAvailableCapacity ( ) raises (Global::FrameworkErrorSignal); }; // MaterialTrackingLocation interface Port : AbstractIF::Resource MachineAIG::Machine getMachine ( ) raises (Global::FrameworkErrorSignal); }; // Port }; // module MachineAIG module DurablesManagement { interface Durable : AbstractIF::Material { void setMaterialTrackingLocation ( in MachineAIG::MaterialTrackingLocation aMaterialTrackingLocation) raises (Global::FrameworkErrorSignal, MachineAIG:: MaterialTrackingLocation::MaterialTrackingLocationFullSignal); MachineAIG::MaterialTrackingLocation getMaterialTrackingLocation ( ) raises (Global::FrameworkErrorSignal); void setUnit( in string aUnit) raises\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 6)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: (Global::FrameworkErrorSignal, MachineAIG::MaterialTrackingLocation::InvalidUnitSignal); string getUnit( ) raises (Global::FrameworkErrorSignal); }; // Durable interface MaterialContainer : Durable { void makeManualControl ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal); void makeStored ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal); void makeInTransit ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal); void makeProcessing ( ) raises (Global::FrameworkErrorSignal, Global::InvalidStateTransitionSignal); }; // MaterialContainer typedef sequence <MaterialContainer> MaterialContainerSequence; }; // module DurablesManagement { #ifndef _CIMFW_MATERIAL_TRANSPORT_ #define _CIMFW_MATERIAL_TRANSPORT_ module MaterialTransport { interface MaterialTransportController; typedef sequence <MaterialTransportController> MaterialTransportControllerSequence; interface TransportJobSupervisor :\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 7)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: AbstractIF::JobSupervisor { typedef sequence <Global::Properties> JobSpecSequence; exception UnsupportedDestinationTypeSignal { }; AbstractIF::JobSequence requestBatchTransportJob in JobSpecSequence jobSpecs, in AbstractIF::JobRequestor aJobRequestor) raises (Global::FrameworkErrorSignal, AbstractIF::JobSupervisor::JobRejectedSignal); }; // TransportJobSupervisor interface MaterialTransportManager : FactoryOperations::ComponentManager, TransportJobSupervisor, AbstractIF::JobRequestor { exception MaterialTransportControllerNotRegisteredSignal { }; void registerMaterialTransportController ( in MaterialTransportController aMaterialTransportController) raises (Global::FrameworkErrorSignal); void unregisterMaterialTransportController ( in MaterialTransportController aMaterialTransportController) raises (Global::FrameworkErrorSignal, MaterialTransportControllerNotRegisteredSignal); MaterialTransportControllerSequence allMaterialTransportControllers ( ) raises\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 8)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: (Global::FrameworkErrorSignal); AbstractIF::MaterialSequence allMaterial ( ) raises (Global::FrameworkErrorSignal); AbstractIF::MaterialSequence allMaterialInTransit ( ) raises (Global::FrameworkErrorSignal); AbstractIF::MaterialSequence allMaterialInStorage ( ) raises (Global::FrameworkErrorSignal); }; // MaterialTransportManager interface MaterialTransportController : TransportJobSupervisor { AbstractIF::MaterialSequence allMaterial ( ) raises (Global::FrameworkErrorSignal); AbstractIF::MaterialSequence allMaterialInTransit ( ) raises (Global::FrameworkErrorSignal); AbstractIF::MaterialSequence allMaterialInStorage ( ) raises (Global::FrameworkErrorSignal); }; // MaterialTransportController interface TransportJob : AbstractIF::Job { exception TimeUndeterminableSignal { }; boolean canCompleteBy ( in Global::TimeStamp whenNeeded) raises (Global::FrameworkErrorSignal, TimeUndeterminableSignal); Global::Duration transportTime ( ) raises\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 9)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: (Global::FrameworkErrorSignal, TimeUndeterminableSignal); }; // TransportJob interface TransportMachine : MachineAIG::Machine { }; // TransportMachine interface StorageMachine : MachineAIG::Machine { const string MaterialContainerArrivedAtManualInputPortSubject $\\mathbf { \\Sigma } = \\mathbf { \\Sigma }$ “/MaterialTransport/StorageMachine/ MaterialContainerArrivedAtManualInputPort”; struct MaterialContainerArrivedAtManualInputPortFilters { Global::Property Port; Global::Property MaterialContainer; }; struct MaterialContainerArrivedAtManualInputPortEvent { string eventSubject; Global::TimeStamp eventTimeStamp; MaterialContainerArrivedAtManualInputPortFilters eventFilterData; Global::Properties eventNews; StorageMachine aMachine }; }; // StorageMachine }; // module MaterialTransport #endif // _CIMFW_MATERIAL_TRANSPORT_ }; // module CIMFW NOTICE: SEMI makes no warranties or representations as to the suitability of the specification set forth herein for any particular\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL (Part 10)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # APPENDIX 1COMPLETE LISTING OF MATERIAL TRANSPORT IDL\n\nContent: application. The determination of the suitability of the specification is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These specifications are subject to change without notice. The user’s attention is called to the possibility that compliance with this specification may require use of copyrighted material or of an invention covered by patent rights. By publication of this specification, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this specification. Users of this specification are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # RELATED INFORMATION 1 SCENARIOS FOR MATERIAL TRANSPORT AND STORAGE\n\nNOTE:  This related information is not an official part of SEMI E10# and was derived from the work of the I300I/J300E AMHS workgroup accomplished during development of the proposed standard. This related information is included with the Material Transport and Storage Component specification to aid the readers in understanding the intent and use of the standard. This related information was approved for publication by full letter ballot procedures on January 14, 2000.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-1  Introduction\n\nR1-1.1  Scenario Assumptions — These scenarios show possible implementations of the SEMI standard. The information shown here is intended to be a guide rather than describe rigid implementation rules. Some of the message sequences and implied functionality included in these scenarios will vary across different implementations.  \nR1-1.2  Scenario Configuration — There are thirteen scenarios included in this section. The first and last scenarios show all interactions at an individual interface level. For simplicity, the remaining scenarios show interactions abstracted up to the Component level. Background information related to the scenarios is shown in Figure R1-1. Table R1-1 outlines the thirteen scenario case conditions.  \nFigure R1-1 Scenario System Layout Configuration  \nTable R-1  Material Transport and Storage Scenario Definitions\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.1  Scenario One —  Interactions at the Interface Level\n\nFigure R1-2 Scenario Case 1  \nFigure R1-3 Scenario Case 1 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.2  Scenario Two —  Base Scenario for Delivery from Production Equipment to Stocker\n\nFigure R1-4 Scenario Case 2  \nFigure R1-5 Scenario Case 2 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.3  Scenario Three —  Base Scenario for Batch Delivery from Stocker to Production Equipment\n\nFigure R1-6 Scenario Case 3  \nFigure R1-8 Scenario Case 3 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.4  Scenario 4 —  Equipment Monitoring and Logical Partition Overflow Control\n\nFigure R1-9 Scenario Case 4  \nFigure R1-10 Scenario Case 4 (continued)  \nFigure R1-11 Scenario Case 4 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.5  Scenario Five — Manual Carrier Input and Handling\n\nFigure R1-12 Scenario Case 5\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.6  Scenario Six — AMHS Equipment Monitoring\n\nFigure R1-13 Scenario Case 6  \nFigure R1-14 Scenario Case 6 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.7  Scenario 7 — Batch Delivery to Internal Buffer Equipment\n\nFigure R1-15 Scenario Case 7  \nFigure R1-16 Scenario Case 7 (continued)  \nFigure R1-17 Scenario Case 7 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.8  Scenario Eight — Abort Job Handling\n\nFigure R1-18 Scenario Case 8\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.9  Scenario Nine — Modify Job Handling\n\nFigure R1-19 Scenario Case 9  \nFigure R1-20 Scenario Case 9 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.10  Scenario Ten — Material Transport and Storage Component Startup\n\nFigure R1-21 Scenario Case 10\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.11  Scenario Eleven — Manual Interruption of Delivery\n\nFigure R1-22 Scenario Case 11\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # R1-2.12  Scenario 12 — Tool to Tool Delivery\n\nFigure R1-24 Scenario Case 12  \nR1-2.13  Scenario 13 — Interactions at an Individual Interface Level (including capacity reservation)\nFigure R1-26 Scenario Case 13  \nFigure R1-27 Scenario Case 13 (continued)\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # RELATED INFORMATION 2 LOGICAL PARTITION STORAGE (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # RELATED INFORMATION 2 LOGICAL PARTITION STORAGE\n\nContent: NOTE: This related information is not an official part of SEMI E10# and was derived from the work of the I300I/J300E AMHS workgroup accomplished during development of the proposed standard. This related information is included with the Material Transport and Storage Component specification to aid the readers in understanding the intent and use of the standard. This related information was approved for publication by full letter ballot procedures on January 14, 2000. R2-1 The concept of Stocker storage via logical partitions has been implemented through the use of the MaterialTrackingLocation concept and interfaces. In the example below, the correlation between Durables and MaterialTrackingLocations are each object’s unit attribute. First, the Factory Supervisor sets the Durable unit to a particular value based on user specifications. The MTSC then maps the Durable Unit to the appropriate MaterialTrackingLocation unit for the destination Storage Machine in order to\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # RELATED INFORMATION 2 LOGICAL PARTITION STORAGE (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # RELATED INFORMATION 2 LOGICAL PARTITION STORAGE\n\nContent: determine the appropriate logical partition for that particular durable. It is not required that the Durable unit and MaterialTrackingLocation unit be identical in order for a mapping to occur, the MTSC may implement mapping logic in order to obtain various relationships between Durable units and MaterialTrackingLocation units. MTM obtains “Machine MTL Units” using “getUnit” from Machine MTL interface.\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Figure R2-1 Storage in Logical Partitions (Part 1)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Figure R2-1 Storage in Logical Partitions\n\nContent: NOTICE: SEMI makes no warranties or representations as to the suitability of the specification set forth herein for any particular application. The determination of the suitability of the specification is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These specifications are subject to change without notice. The user’s attention is called to the possibility that compliance with this specification may require use of copyrighted material or of an invention covered by patent rights. By publication of this specification, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this specification. Users of this specification are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such\n\nSEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Figure R2-1 Storage in Logical Partitions (Part 2)\n\nTitle: SEMI E102-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK MATERIALTRANSPORT AND STORAGE COMPONENT - # Figure R2-1 Storage in Logical Partitions\n\nContent: rights, are entirely their own responsibility. Copyright by SEMI® (Semiconductor Equipment and Materials International), 3081 Zanker Road, San Jose, CA 95134. Reproduction of the contents in whole or in part is forbidden without express written consent of SEMI.\n\nSEMI E105-0701 PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK SCHEDULING COMPONENT\n\nThis specification was technically approved by the Global Information & Control Committee and is the direct responsibility of the North American Information & Control Committee. Current edition approved by the Japanese Regional Standards Committee on February 1, 2001.  Initially available at www.semi.org April 2001; to be published July 2001. Originally published October 2000.",
  "images": []
}