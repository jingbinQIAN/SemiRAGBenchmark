{
  "doc_id": "semi_docs_031",
  "chunk_id": 1,
  "content": "SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions (Part 8)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions\n\nContent: survive the process or thread that created it. A persistent object exists until it is explicitly deleted. 5.2.41 process definition — informat ion characterizing manufacturing processes including an estimate for the time a process resource will be engaged in the process; process resource settings; and the process capabilities required for the process. 5.2.42 process flow — the part of a pr oduct specification that defines the sequence of process steps for the manufacturing of a specific product. The data structure for representing a process flow is the directed graph; specifically, a tree structure. The nodes of the tree are called process flow nodes (see below). Services are required to navigate the process flow. 5.2.43 process flow context naviga tional information pertaining to a product’s progress as it traverses its context process flow. 5.2.44 process step — the smallest un it of processing activity that can be defined in a process flow. One or more process steps are sequenced to define an operation set. 5.2.45\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions (Part 9)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions\n\nContent: recipe — the pre-planned and reusable portion of the set of instructions, settings and parameters that determine how a job is to be performed. For example, recipes are used to describe Process Steps and are typically contained within a Product Specification. They determine the processing environment seen by a manufactured product (e.g., wafer). Processing recipes may be subject to change between product runs or processing cycles. 5.2.46 sub-component — a componen t that is fully contained within a larger component. The interfaces of the sub-component may be exposed or hidden by the encapsulating component. 5.2.47 substitutability — the ability to replace a given component from one supplier with a functionally equivalent component from another supplier without impacting the other components or its clients in the system. 5.2.48 type — a declaration that describes the common properties and behavior for a collection of objects. Types classify objects according to a common interface; classes classify objects according to a\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions (Part 10)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 5.2  Definitions\n\nContent: common implementation.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6  Overview\n\n6.1  This section provides backgrou nd information that will help readers get the most from the content of this specification.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.2  Intended Audience\n\n6.2.1  The framework specification i s intended to address the needs of the following CIM technologists:  \nTechnical CIM managers.\nSystem architects and engineers.\nApplication developers and integrators.\nStandards developers.  \n6.2.2  These groups may be found in a variety of organizations, including semiconductor manufacturers, software product suppliers, system integrators, equipment suppliers, standards organizations, universities, national laboratories, and other research organizations.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.2.3  Technical CIM Managers\n\n6.2.3.1  Technical CIM managers are r esponsible for managing the development, delivery, and integration of complex manufacturing software applications. They can use the CIM Framework specification to plan and organize the development activities and guide component testing and validation. Moreover, those who buy some of their software from external sources can use it as a purchasing guide when discussing system architecture and integration requirements with potential suppliers.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.2.4  System Architects and Engineers\n\n6.2.4.1  System architects and engineers are responsible for overall system design, including selection of industry standards for computing and communications infrastructure, software development processes, product roadmaps, and related topics. They can make extensive use of the CIM Framework as a starting point for many of their activities, including the  \npartitioning and allocation of application functions to specific modules,\ndefinition of the boundary between the distributed system infrastructure and the rest of the system, and\nspecification of open interfaces between the portions of the system they are designing and the external environment.  \n6.2.4.2  They can also use the CIM Fra mework specifications to define a strategic system roadmap for migration to an open, distributed system environment.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.2.5  Application Developers and In tegrators\n\n6.2.5.1  Application developers and int egrators must produce, install, and support software applications for semiconductor manufacturing. The CIM Framework specification, in conjunction with a specific framework “binding” (i.e., target computer system hardware and software technologies), represents a set of detailed design requirements for the application developer. At a minimum, the CIM Framework defines the scope and boundaries of the essential standard components of a manufacturing execution system, and can be used principally as an interface specification. The object models can also be used in the internal design of new applications and/or legacy integration “wrappers,” accelerating the development process even further. Finally, the specification can form the basis for creating an independent set of tests necessary to verify conformance.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.2.6  Standards Developers\n\n6.2.6.1  Developers of CIM software s tandards are responsible for specifying the public interfaces and shared information models that allow the many software products found in a modern semiconductor factory to work together. They can use the CIM Framework as an open source of information for establishing precise definitions for the many items in a factory that must be represented in multiple suppliers’ products, including  \nstandards for partitioning and communicating with complex equipment,\nproduct and raw material attributes and relationships,  \nprocess definitions and routings,\nequipment data sampling schemes and storage schema,\npersonnel qualifications,\nand many others.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3  CIM Framework Foundational Concepts\n\n6.3.1  This section provides an expla nation of the basic concepts of framework, component, and sub-component as used in the CIM Framework Domain Architecture.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.2  Framework (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.2  Framework\n\nContent: 6.3.2.1 A framework is a software infr astructure that provides a common environment for the development and integration of applications and sharing of information in a given problem domain. The CIM Framework is a particular type of framework based on an object-oriented model of semiconductor wafer manufacturing. It specifies manufacturing objects and object interaction protocols that enable building semiconductor CIM applications from a framework of compatible, substitutable application components. 6.3.2.2 The heart of the framework is a set of semiconductor manufacturing abstractions (e.g., Wafer, Specification, Machine) and services (e.g., get wafer location, set specification parameter, get machine utilization) that are typically embodied in applications (e.g., material management, specification management, machine control). The implementations of these abstractions are delivered on distributed computer platforms (e.g., workstations, servers) which use standard software system technologies (e.g., communications,\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.2  Framework (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.2  Framework\n\nContent: database, and user interface). The current CIM Framework is specifically targeted at manufacturing information management and control for both the planning and operational phases of semiconductor wafer fabrication.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3  Component Architecture (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3  Component Architecture\n\nContent: 6.3.3.1 The CIM Framework specifies software functions that are common across MES applications and serve to integrate those MES applications into a coherent system. The CIM Framework software architecture is based on components. Components are software building blocks—“chunks” of functionality that make up software applications. By specifying standard interfaces and behavior of common MES components, manufacturers can assemble systems from components from multiple suppliers and they can evolve those systems by extending the common components and by substituting old components with improved components that implement the same interfaces and behavior in improved and extended ways. The CIM Framework defines a manufacturing execution system architecture whose components can be assembled in many ways and driven by many business processes and operational policies. 6.3.3.2 Figure 1 shows the CIM Fram ework architecture as a layered system, with the CIM Framework covering the middle layer of that system. Figure 2\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3  Component Architecture (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3  Component Architecture\n\nContent: details the layers, showing the components and their interaction and extension. The following subsections provide an introduction to the CIM Framework architecture.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.3  Infrastructure\n\n6.3.3.3.1  The infrastructure provides the distributed computing environment for the application. These services include operating system, communications, data storage, user interface, event distribution, exception management, etc. The CIM Framework assumes infrastructure services and facilities defined by the Object Management Group $\\textsuperscript { \\textregistered }$ ’s (OMG) Object Management Architecture (OMA) or by the Microsof $\\textsuperscript { \\textregistered }$ DCOM and $\\mathrm { C O M + }$ architecture and it can be mapped to other infrastructures such as those for Java™. SEMI E96 addresses the infrastructure layer.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.4  Common Components\n\n6.3.3.4.1  Common components are the f unctional entities common across MES applications. For example, material tracking, machine management, and scheduling applications all need a common, shareable concept of wafer groups (lots), machines, and process recipes. The common components provide a shared model for these entities, enabling quicker development and integration of material tracking, machine management, scheduling and other applications. They specify the data and behavior of these components required for interoperability between the applications.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.5  Application Objects\n\n6.3.3.5.1  The application objects provid e the application functionality beyond the common components. These application objects provide application-specific data and behavior (such as the specific scheduling algorithms or the specific recipe management functions), building on the common component data and behavior that allows the application to interoperate with other applications. The application objects also define the business process workflows, business logic and user interfaces for the applications. They provide functionality that is often product- or site-specific. This functionality should not be included in an industry-wide standard for common components. Rather, it should be accommodated through the extendibility and reuse mechanisms of the common components.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.6  Component Granularity and Incremental Standard Conformance (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.6  Component Granularity and Incremental Standard Conformance\n\nContent: 6.3.3.6.1 The CIM Framework compone nts are the smallest elements of standardization of functional interface and behavior. The CIM Framework specifies relatively fine-grained components (in terms of their functional scope) as in the SEMATECH CIM Framework Specification Version 2.0 [CIMFW]. These components are larger than objects (their specification is in terms of an object model with typically three to five objects) but more fine-grained than traditional MES applications. However, the initial SEMI CIM Framework standards also identify components that are more coarse-grained, aligning with current MES product boundaries. These coarse-grained components contain fine-grained sub-components in their specifications, as in Figure 3 (typically two to four subcomponents per coarse-grained component). 6.3.3.6.2 The coarse-grained componen ts encapsulate the detail of the internal objects, relationships and subcomponents by selectively exposing, hiding or abstracting some object\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.6  Component Granularity and Incremental Standard Conformance (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.3.3.6  Component Granularity and Incremental Standard Conformance\n\nContent: methods and relationships. The coarse-grained components are specified with the detail of the sub-component and object interfaces and behavior, but standard conformance is in two levels; first-level conformance is to the interfaces of the coarse-grained components (not requiring exposure of the encapsulated detail), and second-level conformance is to the detail of the sub-components.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4  CIM Framework Functional Scope\n\n6.4.1  The term Manufacturing Exec ution System (MES) represents an abstraction for a collection of software implementations. While there are examples of implementations that provide significant coverage of MES functionality, the industry trend is toward supplier focus on areas of core competency. In many cases this will result in a supplier offering for a subset of the MES domain, or a partitioned offering of separable products by a single source. Large, more monolithic implementations are gradually evolving toward this model of component packaging for smaller implementations. Ideally, MES scoping should correspond to natural boundaries that have emerged in representative products that border the “In MES”/“Outside MES” dividing line. It is that capability within MES scope that will be provided by the CIM Framework.  \n6.4.2  The following list identifies so me criteria that may be used to help scope MES within the larger context of manufacturing enterprise systems often called Computer Integrated Manufacturing.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # CIM Framework Components\n\n• Interoperable • Substitutable • Extendible • Flexible • Reusable\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.3  Thus, a component is “In MES ” scope and within the CIM Framework scope, if (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.3  Thus, a component is “In MES ” scope and within the CIM Framework scope, if\n\nContent: • it provides a job abstraction to manage work currently in progress across the manufacturing facility, it represents the convergence of product and process specifications, material, and manufacturing resources through execution of production jobs, it provides facility level planning and scheduling of manufacturing production activities, it provides access to historical data and reporting of occurrences that changed the state of the products, the production facility or its resources, it allows coordinated actions to control factory resources, it allows abstraction representations of production facilities and their resources, it enables automated update of manufacturing parameters (settings) through data collection and analysis of manufacturing processes, and it supports quality management through capture of key metrics (e.g., yield, throughput, cycle-time and utilization). 6.4.4 A component is “Outside MES ” scope, thus outside CIM Framework scope, if it\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.3  Thus, a component is “In MES ” scope and within the CIM Framework scope, if (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.3  Thus, a component is “In MES ” scope and within the CIM Framework scope, if\n\nContent: controls or manipulates the internal state or operation of a piece of manufacturing equipment, it deals with the business interactions between the manufacturing enterprise and external enterprises such as customers or suppliers, it manipulates the product or process definition with a focus on product design rather than execution of the manufacturing process, it focuses on the creation and manipulation of what-if models of factory or product state, • it isn’t directly concerned with transforming material from an initial (raw or partially completed) state to a more valuable product, and it is primarily used in support of laboratory analysis that is not directly integrated into the manufacturing process (e.g., off-line metrology). 6.4.5 Examples applying the MES d efinition and scoping criteria might be derived from the following high-level interactions.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.1  “In MES” Scope (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.1  “In MES” Scope\n\nContent: • A product request for production of goods (partial or finished) is offered to one facility which responds with a delivery commitment. A production job is created, along with a grouping structure for the target product. A production job is split into subjobs and maybe merged again. A production job is rerouted to a different resource due to specific circumstances. A production job is assigned to a set of resources, allocated required material, and dispatched for execution. • A change in state of product, resources or material resulting in a change to delivery commitments is reported. A change to a manufacturing process results in alteration of the execution of a production job. A production job is assigned to specific set of manufacturing machines due to their machine resource capabilities. A value for a process specification is changed due to gathered values of a influencing quality control process. Material is made available for use or is moved to a new physical location within the facility. Material is\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.1  “In MES” Scope (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.1  “In MES” Scope\n\nContent: exchanged between different positional containers due to e.g., contamination control (cleaning of a positional container). A manufacturing machine is taken down for maintenance and becomes unavailable for job execution. A resource of a multiple resource machine is taken down and becomes unavailable, but not the whole machine.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: A product is defined and engineered for production Product and Process Engineering. A facility is qualified to produce a given product Release for Production. An order is released for production represented as a demand from Order Management System. A consumable is running out of stock an order is released for delivery to the facility Enterprise Resource Tracking. The facilities (or series of facilities) capable of producing the needed product are analyzed and the demand is matched with available supply (including capacity for future production) Enterprise Planning System. • A piece of manufacturing equipment obtains a recipe and enacts a manufacturing process on material Equipment Automation. Material movement equipment controls the transport of material to a specified destination Equipment Automation. Modeling data representing a hypothetical change in factory state is manipulated and analyzed to determine the effects of the changes Modeling and Simulation. Material is packed for transport from the front-end\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: facility to the back-end facility and a carrier is notified of shipping order Transportation Logistics. A customer order is divided into two product requests involving two facilities to meet the requested delivery date Release for Production. The layout of equipment locations within the factory is modified to accommodate a new tool Factory Design. 6.4.6 Multiple levels of packaging f ramework functionality are supported by the specification so that a variety of applications from multiple suppliers with potentially intersecting capabilities can be accommodated. This means that, given a specific framework binding to a set of computer and software system technologies, an application can be instantiated and executed in this environment and will register itself as a set of well-known objects that provide a core set of framework specified services. 6.4.7 The CIM Framework specifica tion defines a set of functional components designed to work together to form an integrated manufacturing system. The CIM Framework\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: components cover the functionality of Manufacturing Execution Systems (MES). MES is a factory-wide function that drives material processing on equipment to produce products, and it manages all the resources to accomplish this. 6.4.8 Figure 4 shows the functional scope of the CIM Framework. The left-hand side represents engineering aspects of manufacturing systems, such as configuration, while the right-hand side indicates where MES falls within manufacturing operations. The CIM Framework covers operations of manufacturing execution to a larger degree and configuration to a lesser degree. Figure 4 Boundaries of the CIM Framework: Manufacturing Execution 6.4.9 The CIM Framework specifies the MES functional responsibilities for semiconductor wafer fabrication. It does not include responsibilities for semiconductor packaging, assembly and test, but it was designed to accommodate extensions into this phase of semiconductor manufacturing. 6.4.10 Using the definition of compo nent as found in Section 6.3.3, the\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: components of the CIM Framework provide the following functionality found within MES configuration and execution: Product Management: manages product material and material groups. Durables Management: manages durable materials such as reticles and material carriers. Consumables Management: manages consumable materials such as gases and chemicals. Specification: manages product specifications and process flows. Factory Operations: drives efficient use of factory resources to manufacture products while meeting overall factory objectives. Scheduling: supports factory operations and other functions to optimize use of resources in manufacturing products and meeting factory objectives. Equipment Tracking and Maintenance: tracks equipment state and usage and manages equipment maintenance. Production Machine: manages execution of manufacturing process steps on process and metrology equipment. Recipe Management: provides factory-wide management and use of processing recipes. Advanced Process Control: executes\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 5)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: run-to-run process control and fault detection strategies. Material Transport and Storage: moves and stores material. Factory Labor: manages labor resources and qualifications. Factory Services: provides support functions common across components, such as access security, document management/change control, and history storage and retrieval. 6.4.11 Section 7 lists the functional re sponsibilities of each of these components by MES configuration (called build-time) and execution (called run-time). The separation of the CIM Framework into components reflects anticipated boundaries of MES products, enabling integration of products from multiple suppliers into a coherent, integrated MES. 6.4.12 As Figure 5 shows, the CIM Framework specifies MES interfaces enabling integration between MES components, that is integration within the MES. The CIM Framework does not directly address integration between the MES and external functions. External functions, such as enterprise functions and engineering functions, can\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 6)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: interact with the MES using the CIM Framework-specified intra-MES interfaces and communications mechanisms. Interaction between MES functions and manufacturing equipment can use existing SEMI equipment integration standards such as SECS II (SEMI E5), GEM (SEMI E30), ARAMS (SEMI E58), RMS (SEMI E42), and MMMS (SEMI E32). Equipment can also implement CIM Framework components such as Production Machine and Equipment Tracking and Maintenance within the equipment, integrating with the MES (the equipment host) through CIM Framework component interfaces. 6.4.13 The Object Management Group’s Manufacturing Domain Task Force is adopting standards for Enterprise, MES, Machine Control and Engineering applications (MfgDTF). Other related activity within the OMG includes its efforts regarding workflow (Workflow) and component architectures. SEMI tracks these through a liaison with the OMG. 6.4.14 The CIM Framework focuses on the common software functions that serve to integrate MES. It specifies components for factory\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope (Part 7)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.5.2  “Outside MES” Scope\n\nContent: resources, materials, specifications and factory control, and it establishes a functional and technical architecture so the components can be assembled to meet many functional needs and driven by company-specific business process, workflows and operation rules. The CIM Framework enables, but does not define, workflow and business logic to drive component behavior, nor does it define user interfaces (including decision support and reporting). Workflow, business logic and user interface are considered use-specific and thus outside an industry consensus standard. In addition, the CIM Framework specifies application interfaces to the MES functions, but does not specify the implementation of those functions.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.15  What Is in the CIM Framewor k Specification\n\n6.4.15.1  This section provides additional information about the CIM Framework suite of documents. A brief description of each document is given below.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.15.2  Specification for CIM Framework Domain Architecture (this document)\n\nContains introductory information and an overview of the CIM Framework specifications. Specifies the functional partitioning and functional responsibilities of CIM Framework components.  \nSpecifies common architecture patterns that functionally integrate CIM Framework components.\nProvides graphical and textual specification notation conventions for all CIM Framework components.\nProvides citations for related specifications or documents referenced within the CIM Framework.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 6.4.15.3  SEMI E96, Guide for CIM Framework Technical Architecture\n\ndocuments the CIM Framework component interoperability architecture based on distributed computing standards including OMG CORBA $\\textsuperscript { \\textregistered }$ and Microsoft DCOM.  \n6.4.15.4  Additional documents detail th e CIM Framework specifications. The document structure will reflect the functional partitioning of the domain architecture. Except for reorganization, the details will remain substantially the same as contained within the CIM Framework Blue Ballots with some requested extensions. The structure of these documents has been influenced by SEMATECH’s CIM Framework Specification [CIMFW]. These companion documents represent the actual specification; whereas this document serves primarily as their introduction.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7  Requirements\n\n7.1  This section specifies the func tional requirements of CIM Framework components. It establishes a functional partitioning of CIM Framework components and it defines functional architectures for resource tracking and maintenance and for factory control. It also establishes the graphical and textual notations required to specify the CIM Framework components. The list below is a short overview of this section.  \nGlobal and Abstract Definitions Group\nFactory Services Group\nProduct Management Component\nDurables Management Component\nConsumables Management Component\nSpecification Component\nFactory Operations Component\nScheduling Component\nEquipment Tracking and Maintenance Component\nProduction Machine Component\nRecipe Management Component  \nAdvanced Process Control Component Material Transport and Storage Component Factory Labor Component\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2  Functional Partitioning\n\n7.2.1 This section overviews the fun ctional responsibilities of the CIM Framework domain components. Details of the responsibilities are specified in the individual CIM Framework domain component specifications.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions: (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions:\n\nContent: Build-time, or configuration aspect of manufacturing systems engineering in Figure 4, which defines and configures the specific entities in the component, such as the specific machines and their state models or the wafer carriers and their initial locations. Run-time, or the execution aspect of manufacturing operations in Figure 4, which executes the component behaviors, maintains inter-component relationships, maintains component state and history and provides run-time access to component state and behavior. 7.2.3 The initial CIM Framework do main standards do not address the build-time functions of the components. These will be added as the standards move from provisional status to full standards. However, this functional partitioning section does identify build-time responsibilities, permitting these build-time functions to be properly allocated to the correct component as the CIM Framework evolves. 7.2.4 The components partition CIM Framework functionality.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions: (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions:\n\nContent: The components are designed to be exclusive: no functionality exists in more than one component. The only exception is that there are some cross-system functions that are used, specialized or implemented by most or all of the other components. These cross-component domain functions are in separate groups, called Global and Abstract Definitions Group and Factory Services Group. 7.2.5 The list of responsibilities for a complete MES solution is far more than the responsibilities of the CIM Framework components. The CIM Framework focuses on those functions that serve to integrate applications. Suppliers and users will provide functional responsibilities in addition to the standard responsibilities. The CIM Framework component responsibilities are also limited by focusing the scope of the CIM Framework on the run-time needs for wafer fabrication MES but to not cover the full scope of CIM solutions for the full semiconductor manufacturing process. 7.2.6 Sections 7.2.7\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions: (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.2  The domain component respon sibilities cover two types of functions:\n\nContent: through 7.2.20 present the responsibilities for each of the CIM Framework components and the groups. Example terminology specific to semiconductor manufacturing is provided for clarity. It does not preclude application specialization for other industries.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.7  Responsibilities of Global and Abstract Definitions Group\n\n7.2.7.1  The Global and Abstract Defin itions group (defined in SEMI E97) specifies the definitions of abstract data types and abstract interfaces used throughout the CIM Framework. These specifications are separated into a distinct group to enable them to be specified once and then logically included or inherited wherever they are subsequently needed.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.7.2  Global Definition Responsibili ties\n\nProvide type definitions for common data structures to ensure consistent representation. These items include data types for common concepts such as coordinates, priorities, timestamps, and sequences of basic data types. Provide type definitions for representations of historical occurrences. Provide definitions for common exceptions used consistently throughout the CIM Framework.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.7.3  Abstract Interface Responsibil ities\n\nMaterial architecture: the functions common to identifying, grouping, moving, locating and tracking material in the factory. The architecture is specialized for product material, durables and consumables. See Section 7.3.2.\nFactory resource architecture: the functions common to defining, organizing, tracking usage of and maintaining factory resources including equipment, sensors, durables, and people. See Section 7.3.3.\nJob architecture: the functions common to creating, executing and managing work in the factory. The job architecture is specialized for material processing jobs, material transport jobs, resource maintenance jobs and factory jobs that drive product material through their process flows. See Section 7.3.4.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.8  Responsibilities of Factory Services Group\n\n7.2.8.1  The Factory Services group (which is not actually a component) specifies domain facilities to support all domain components. The components can  \nseparately implement these facilities for their own use, they can share a common facility across components, or use a combination of separate and shared implementations.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.8.2  Services in Factory Services G roup\n\nDocument management and version management: functions common to creating, storing, retrieving, and changing (under change control and version management) documents such as process recipes, process flow specifications, and maintenance specifications.\nEvent broker: support for components to publish, subscribe to and filter events.\nAccess security control: support for components to limit access of system functions to authorized users and applications.\nComponent management: functions for CIM Framework component registration, start-up, shutdown, etc.\nHistory: supports the ability of factory objects to configure and maintain histories (time-based sequences of data and events) and to support access to those histories.\nData collection: the functions common to data collectors, including equipment, sensors, and manual data entry.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9  Responsibilities of Product Ma nagement Component\n\n7.2.9.1  The Product Management component captures the state of all product material (work in progress). For wafer fabrication, this includes wafer and die-level tracking to support multiple products on a single wafer and to track known-good-die through wafer probe. The component also tracks engineering wafers and test wafers, even though they may not become “product.” The component implements the common material architecture functions so product material can be identified, grouped (product groups, lots, process groups, transport groups), moved and located in the factory.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component\n\nContent: Configure inventory regions. Configure product tracking histories, including what data to store and data archival mechanisms. 7.2.9.3 Run-time Responsibilities of P roduct Management Component Record and support access to current and historical product information, including: Where material is (and has been) in its process flow. NOTE 2: The decision to advance material along its process flow is in the Factory Operations component. Product state (processing, on hold, scrapped, etc.). • Material type (product, engineering, filler, etc.). User-defined product information. Genealogy, batching, allocation to product requests, the number of times reworked, etc. Historical information on what equipment processed the material, when, with what process flow specification, recipe and durables, and by what operator. Relations and history to related information in other components, including material location, material container, process flow specification, inventory region, process\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component\n\nContent: run data, recipe, etc. Notify other components of material information changes. Support creation, maintenance and historical recording of product groups and relationships among product groups (such as lots, transport groups and process batches) including splits and joins (and resulting product genealogy), experiments (planned future splits and processing changes), hold, rework, etc. NOTE 3: The decision to split, join, batch, move, rework, etc. is a responsibility outside of the Product Management component. Product Management records the results of the decisions. Record and support access to material location at multiple levels of detail: an area, a specific machine, a specific load port on a machine, a specific zone in a stocker, a specific wafer slot in a carrier, or a specific wafer coordinate of a die. Including reference to material containers (cassettes, pods, etc.) holding the product (the containers are managed by the Durables Management component). NOTE 4:\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.9.2  Build-time Responsibilities of Product Management Component\n\nContent: Material location is served by the Product Management component and the Material Transport and Storage component. The Material Transport and Storage component is responsible for physically moving material and recording its location, and the Product Management component is responsible for keeping its material location consistent with Material Transport and Storage material location information. Account for and track material loss. Support inventory regions: monitor, report and capture history of material movement through physical and logical regions of the factory.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10  Responsibilities of Durables Management Component\n\n7.2.10.1 The Durables Management co mponent manages the durable resources used in wafer manufacturing, including material containers (cassettes, SMIF pods, etc.), reticles, fixtures, test probes, etc. The component implements the generic resource tracking and maintenance architecture specialized for durables. The component also implements the common material architecture behavior so durables can be identified, grouped and located in the factory.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10.2  Build-time Responsibilities of D urables Management Component\n\nDefine the specific durables in the factory (the inventory of carriers, reticles, etc.).\nDefine inventory regions that track the use and movement of various durable types in a factory (for example, the reticles assigned to and existing in a lithography bay).\nDefine relationships between durables and the process steps that use them.\nDefine maintenance tasks for durables and what triggers them.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10.3  Run-time Responsibilities of D urables Management Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10.3  Run-time Responsibilities of D urables Management Component\n\nContent: Track durable attributes (location, usage, contamination exposure, etc.) and state (available, not available, in use, etc.). Maintain relations between durables and other CIM Framework objects (such as product material contained in a wafer carrier, the reticles in a reticle carrier, the process step a reticle is used for, etc.). NOTE 5: The Material Transport and Storage component has some responsibility for managing material containers, such as to move and allocate empty pods, gas purge and clean pods, etc. Maintain, report and record history of durable attributes, state and relations. Support assignment of durables to factory jobs (e.g. supporting the scheduling of a reticle for use in a production machine job) and monitor and record job progress (from the perspective of the durable’s role). Monitor durable maintenance triggers (such as excessive exposure to contaminants) and recommend durable maintenance jobs. Execute triggered durable maintenance jobs. Change\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10.3  Run-time Responsibilities of D urables Management Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.10.3  Run-time Responsibilities of D urables Management Component\n\nContent: durable capabilities. Execute durable maintenance jobs (pod cleaning, reticle inspection and repair, etc.) and report job progress. Record durable maintenance triggers and job results in resource maintenance histories. Collect and report durable utilization and effectiveness measures.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.11  Responsibilities of Consumables Management Component\n\n7.2.11.1  The Consumables Management component manages consumable materials, including gases, chemicals, etc. The component implements the generic resource tracking and maintenance architecture to track consumable usage and quality (e.g., expired resist) and to enable maintenance based on replenishment levels and quality expiration. The component also implements the common material architecture behavior so consumables can be identified, grouped and located in the factory.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.11.2  Build-time Responsibilities of Consumables Management Component\n\nDefine the specific consumables in the factory (the types of gases, chemicals, etc.).\nDefine inventory regions that track the use and movement of consumable types in a factory (for example, the equipment fed by a common gas bottle and feeders).\nDefine relationships between consumable types and the process steps that use them.\nDefine maintenance tasks and triggers for testing the quality of and replacing consumables.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.11.3  Run-time Responsibilities of Consumables Management Component\n\nTrack consumable attributes and state (supplier’s lot number, quantity available, usage rate, expiration date, etc.). Maintain relations between consumables and other CIM Framework objects (the product groups a particular consumable was used on, the equipment fed by a common gas bottle, etc.).  \nMaintain, report and record history of consumable attributes, state and relations.\nSupport assignment of consumables to factory jobs (e.g., the scheduling of a gas feed pressure for use in a production machine job) and monitor and record job progress (from the perspective of the consumable’s role).\nMonitor consumable maintenance triggers (quality checks and replenishment levels) and recommend consumable maintenance jobs.\nExecute triggered consumable maintenance jobs. Change consumable capabilities.\nExecute consumable maintenance jobs and report job progress.\nRecord consumable maintenance triggers and job results in resource maintenance histories.\nCollect and report consumable utilization and effectiveness measures.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12  Responsibilities of Specificatio n Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12  Responsibilities of Specificatio n Component\n\nContent: 7.2.12.1 The Specification component s upports definition and use of process specifications, product specifications and bill of materials. Process specifications define process flows (the process steps to manufacture a product, along with supporting material movement, advance process control, equipment maintenance and other tasks). Product specifications relate product types to the process flows to build them. 7.2.12.2 The CIM Framework does not specify a fullydetailed representation of process flows. At run-time, it views a specification as a current operation (the Process Flow Context) and a view of potential next steps (the Process Flow Iterator). Although a complete MES solution must build and provide process flow details, the CIM Framework standard does not require this detail for component integration. 7.2.12.3 Recipes, process capabilities, maintenance specifications, document management and version control services are the responsibilities of other components. The Specification\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12  Responsibilities of Specificatio n Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12  Responsibilities of Specificatio n Component\n\nContent: component references and uses these services.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component\n\nContent: Build process operation specifications. Specify a processing step as a relationship between a combination of recipes, data collection plans, advanced process control strategies, process capabilities, processing constraints (timing dependencies, contamination constraints, qualified machines, etc.), operator qualifications, durables, consumables and other elements. NOTE 6: At run-time, a process operation specification is fully bound to create a process operation (a specific machine is selected, recipe parameters are set, specific support resources are named, etc.). Build manufacturing process flows. • Specify a process flow as a combination of material processing steps, material movement tasks, equipment qualification and maintenance tasks and other tasks. NOTE 7: Process flows are primarily a combination process operation specifications, but the process flow should allow inclusion of explicit steps for material movement, metrology, equipment calibration, etc. • Define\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component\n\nContent: process flow traversal logic (rework decisions, metrology sampling decisions, alternate path decisions, parallel assembly routes, etc.). preconditions for beginning a step. postconditions for completing a step. logic to enable selecting appropriate next steps. • Support recursive (nested) composition of simple process flows (partial flows or miniflows) into complex process flows. Support a library of configurable, reusable process operation specifications and process flows. Build product specifications. The process flow to build the product. Product-specific run-time parameters. Reticle and other required resources. Quality/metrology sampling plans. Required manufacturing technologies. NOTE 8: This is not a full product specification. It is only those elements needed to select and initialize the manufacturing process. Define and maintain relationships between process flow specifications and product specifications which use them. Use document and version management for\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component\n\nContent: specification change control. 7.2.12.5 Run-time Responsibilities of Sp ecification Component Create a fully-bound process operation from a process operation specification. Create a Process Flow Context (PFC) from a product specification (create the initial process flow for a product). NOTE 9: The PFC is the “pointer” marking the current step in a process flow. Transition the PFC from the current process operation to the next process operation in the flow (move along the process flow). NOTE 10: The decision to move is the responsibility of other components. The Specification component records the decision. • Create a PFC from an existing PFC (for example, to support splitting of a product group). Create a Process Flow Iterator (PFI) from a product specification (create an initial process flow iterator for a product). NOTE 11: The PFI is a process flow navigation aid to look ahead or look behind at steps in a process flow without actually incrementing the PFC. This allows\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component\n\nContent: scheduling and other functions to determine what steps are possible and to use processing history in determining what steps to take next. • Create a PFI from an existing PFI (for example, to support evaluating among alternatives). • Use the PFI to traverse forward and backward through a process flow. Using the results of executing process flow traversal logic (the factory job control or process job control does the actual execution of traversal logic to decide among alternate paths). Provide query support for the contents and relationships of process operation specifications and process operations. Maintain relationships of active process flows to the factory jobs, production machine jobs, and transport jobs that are implementing the process flow. Maintain relationships of active process flows (process flow contexts) to product groups (e.g. process groups, transport groups, etc.) and product group histories for recording the results of executing process flow steps. Maintain\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component (Part 5)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.12.4  Build-time Responsibilities of Specification Component\n\nContent: relationships of process flow specifications to process capabilities and process resources. Support effectivity changes to process flows and process operation specifications (if the process flow version changes for the current product group on the flow, be responsive to those changes).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component\n\nContent: 7.2.13.1 The Factory Operations compo nent provides support for maximizing factory effectiveness through efficient use of factory resources to satisfy product demand and planned objectives. Examples of overall factory effectiveness measures are on-time delivery, profit margin, profit rate, cost per wafer, yield, overall equipment effectiveness, cycle time, etc. The Factory Operations component also provides the interface to the enterprise planning systems to commit the factory to fulfill product requests and to communicate factory capacity and production capability to enterprise planning. The product requests also provide a placeholder for order information (such as quantity, due date, priority, etc.) and are part of the link to material tracking at the enterprise level. Given the factory-wide scope of Factory Operations, this component owns the overall factory resource model of machines, areas, inventory regions, etc. 7.2.13.2 Factory Operations may not ha ve exclusive\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component\n\nContent: responsibility for maximizing all factory objectives. The Production Machine component maximizes the use of process resources (chambers, internal storage, production batching, etc.), the Material Transport and Storage component maximizes the use of transport and storage resources (transport vehicles, transport paths, storage locations, etc.), the Equipment Tracking and Maintenance component maximizes equipment availability and capability, etc. The business logic and decision-making methods may be distributed to improve overall enterprise effectiveness (Enterprise functions), overall factory effectiveness (Factory Operations functions) and overall equipment effectiveness (Production Machine, Material Transport and Storage and other functions). The CIM Framework provides flexibility, enabling the spectrum from centralized, enterprise-wide or factory-wide operations to distributed, resource-focused operations with coordination to achieve factory-wide effectiveness. The CIM Framework\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13 Responsibilities of Factory Op erations Component\n\nContent: Job Architecture is critical to enabling this flexibility (see Section 7.3.4).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.3  Build-time Responsibilities of Factory Operations Component\n\nDefine the factory model of resources (machines, people, durables, etc.), areas (bays, lines, cells, etc.), and inventory regions (see Section 7.3.3 for a description of the factory model of resources).  \nDefine the (initial or nominal) capabilities of the factory and area resources, including factory capacity, area capacity and process capability (detailed capabilities of the machines, people, etc. are the responsibility of other components).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component\n\nContent: • Dynamically receive product requests (from the enterprise or internally) and map them to product work-in-progress and planned material release (lot starts). Associate material to a process flow (in the Specification component) for the product. Consolidate product demand in the factory. Request Factory Jobs or modify existing Factory Jobs to drive material through its process flows, in response to product requests. New Factory Jobs for new material release, Modify existing Factory Jobs (and associated material model and assigned process flow) for assigning new or modified product requests to material in process. Set or modify product material quantity and due date(s) and other scheduling support information (such as priority and planned profit margin). Execute Factory Jobs to drive material through its process flow, using scheduling and dispatching services of the Scheduling component and requesting work from Production Machine, Material Transport and Storage, Equipment\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component\n\nContent: Tracking and Maintenance, and Factory Labor components. Based on factory state (material process state, material due date and priority, material location, equipment state, equipment process capability, operator availability and qualification, etc.) and where the material is in its process flow, request and track Production machine jobs, transport jobs, maintenance jobs and other jobs that implement and enable the process steps in the process flow. Based on success, failure or partial failure of production machine jobs and transport jobs, and based on metrology results and other information, determine the next activities for material and factory resources. This may include splitting or joining product groups, scrapping material, downgrading or changing the product type of material, and other actions responsive to job performance and resource availability. Once split, scrap and other decisions are made, Factory Operations may use scheduling utilities to select the next\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.13.4 Run-time Responsibilities of F actory Operations Component\n\nContent: activities for the material and resources. Record and report factory job status and decisions in factory job histories. Report status and progress on enterprise product requests. Manage assignment of human resources to other factory resources.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14  Responsibilities of Scheduling Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14  Responsibilities of Scheduling Component\n\nContent: 7.2.14.1 The Scheduling component supports Factory Operations, Material Movement, Production Machine and other components by ordering, in time, jobs that process material on equipment, move material, maintain equipment, etc. The scheduler uses knowledge of product demand, equipment and material state, process flows, throughput bottlenecks, operational policy and constraints, and other information to recommend jobs that maximize effective utilization of factory resources to satisfy product demand and planned objectives. 7.2.14.2 The CIM Framework specifies a dispatching function to support Factory Operations. Dispatching provides an answer to questions of the form, “What is next for this material or resource?” The answer may be based on any number of current or future constraints and objectives, but the dispatcher does not typically define a sequence of jobs projected into the future. Scheduling functions in the Scheduling component provide this future job sequencing function. Separate\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14  Responsibilities of Scheduling Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14  Responsibilities of Scheduling Component\n\nContent: scheduler and dispatcher utilities can also provide resource-focused utilities, such as scheduling of process resources within a production machine or scheduling of material transport and storage resources and internal material movements within the factory-wide material transport and storage system.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14.3  Build-time Responsibilities of Scheduling Component\n\n• Configure scheduling and dispatching decision mechanisms (for example, define scheduling goals and constraints, rules for resolving conflicting constraints, etc.).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.14.4  Run-time Responsibilities of Scheduling Component\n\nMonitor resource and material state and apply scheduling and dispatching decision mechanisms to  \nrecommend the next task (dispatching) or a sequence of tasks (scheduling) for factory resources.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15  Responsibilities of Equipment Tracking and Maintenance Component\n\n7.2.15.1  The Equipment Tracking and Maintenance component implements the Factory Resource architecture (see Section 7.3.3) specialized for production equipment (process and metrology tools and material handling and storage equipment).  \n7.2.15.2  Note that the machine is the so ftware representation of physical equipment and should reflect the state of that equipment. The functionality can be implemented within the equipment, within the MES, or in a separate system such as a cell controller, station controller or equipment integration solution.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.3  Build-time Responsibilities of Equipment Tracking and Maintenance Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.3  Build-time Responsibilities of Equipment Tracking and Maintenance Component\n\nContent: Configure production machines as a combination of, or relationship to, process resources (such as process chambers) and support resources (loadports, add-on sensors, internal material buffers and transport, etc.). • Configure material handling resources as a combination of transport machines and storage machines and relations to support resources (loadports, add-on sensors such as automatic material identification, etc.). Configure equipment state models compatible with SEMI E10 (at the machine level and/or at the machine resource level). Configure (initial or nominal) production machine capabilities. Configure the (initial) recipe namespaces that production machines use and manage. Configure the (initial) material locations that material transport equipment is able to reach and the locations it is authorized to reach. Define equipment maintenance tasks and what triggers them. Tasks: repair, calibration, qualification, etc. Triggers: failures, usage,\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.3  Build-time Responsibilities of Equipment Tracking and Maintenance Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.3  Build-time Responsibilities of Equipment Tracking and Maintenance Component\n\nContent: elapsed time, need by another related maintenance task, etc. Use document management and version control for maintenance specification change control.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.4  Run-time Responsibilities of E quipment Tracking and Maintenance Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.4  Run-time Responsibilities of E quipment Tracking and Maintenance Component\n\nContent: Track the equipment state and update the machine state, accordingly. Keep the machine state model current. Report and record equipment and machine state changes, alarms and events in machine history. Support query of machine state and history. Update machine and machine resource process capabilities to reflect machine state and capability and machine assigned capabilities. Drive the equipment to a requested state. Collect and report machine performance according to SEMI E58 and other utilization and effectiveness measures. Monitor equipment maintenance triggers. Execute and monitor triggered maintenance jobs. Update equipment state and resource capability (before and after maintenance). Recommend maintenance jobs for scheduling. Execute maintenance jobs and report job progress. Record maintenance triggered and maintenance job results in equipment maintenance history. Manage the relationships between production machines that have specific process\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.4  Run-time Responsibilities of E quipment Tracking and Maintenance Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.15.4  Run-time Responsibilities of E quipment Tracking and Maintenance Component\n\nContent: capabilities and process flows that need specific process capabilities. Manage the material locations that material transport equipment is capable of reaching and is authorized to reach.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16 Responsibilities of Production Machine Component\n\n7.2.16.1  The Production Machine component supports execution of production machine jobs on process equipment and interaction with material handling equipment for material input/output at the machine. The functionality can be implemented within the equipment and/or in a separate system such as a cell controller, station controller or equipment integration solution.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.2  Build-time Responsibilities of Production Machine Component\n\n7.2.16.2.1  Note that the configuration of the machine is the responsibility of the Equipment Tracking and Maintenance component.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component\n\nContent: Initiate and execute production machine jobs to perform specific process operations (and recipes) on specific material (process groups). Here are the steps to initiating and executing production machine jobs: 1) Validate the production machine job: compatibility and availability of the material in the process group, process capability of the equipment, proper machine state, valid and available recipe or process specification, necessary operator skills, etc. 2) Equipment setup: recipe download and select, launch advanced process control (APC) calculation, make operator and APC-recommended adjustments, configure equipment and sensors according to data collection plans. 3) Initiate processing. 4) Monitor process operation: Collect process run data from equipment, add-on sensors and operator entry according to data collection plans. per machine and per process resource. Store in process run histories. Event management: capture, interpret, record and respond to equipment\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component\n\nContent: events, fault detection events and other process anomalies. Monitor equipment operation and state (from the equipment tracking and maintenance component) as another source of information on process operation. Generate MES-level (machine) events and alarms. Track material within machine and record with process run histories and product histories. 5) Complete processing. Execute post-processing tasks for the process operation. Generate job completed events and invoke “inform job completed” method on job requestor. Sequence steps between machines and machine resources (for that sequence logic that is not covered by embedded equipment control). Implement recipe control and recipe agent functionality as defined in SEMI E42 - Recipe Management Standard. Integrate with factory-level recipe namespace functionality in the CIM Framework Recipe Management component. Job accountability: account for and report material yield loss in material management component and equipment\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.16.3  Run-time Responsibilities of P roduction Machine Component\n\nContent: productivity loss in equipment tracking component. Interact with Material Transport and Storage component and loadport for material hand-off handshake protocols. Manage and monitor equipment when idle.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.17 Responsibilities of Recipe Man agement Component\n\n7.2.17.1  The Recipe Management comp onent provides a capability for applying machine recipes across the factory. Recipes for multiple machines of the same process capability using the same recipe syntax are managed by specializing the recipes based on specific machine settings. The Production Machine component is responsible for merging the recipe with machinespecific data and run-time data (such as Advanced Process Control component recommendations for recipe settings) into an executable recipe and for downloading it to the equipment or selecting and modifying it in the equipment. The Recipe Management component also works with Recipe Executors and Recipe Agents (terminology from SEMI E42) implemented in the Production Machine component, in the equipment, or elsewhere.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.17.2  Build-time Responsibilities of Recipe Management Component\n\nBuild process recipes.  \nGeneric.\nSpecific to a machine type (same process capability and recipe syntax).\nIncluding identification of variable parameters in recipe.\nUse document management and version control for change management and effectivity.  \nDefine, configure and initialize recipe namespaces. NOTE 12: Including this responsibility under “build time” does not imply that all recipes are built at MES system build time. Recipes may be built after the MES system is running.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.17.3  Run-time Responsibilities of R ecipe Management Component\n\nWork with Production Machine component and other recipe controllers to select, download and modify recipes.\nImplement resource effectivity control (manage when and to what material and machines to apply recipe changes).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.18  Responsibilities of Advanced P rocess Control Component\n\n7.2.18.1  The Advanced Process Control component (defined in SEMI E93) supports the Production Machine component execution of production machine jobs by optimizing machine-specific settings for the current material and machine state to achieve desired process effects. It also detects faults in processing and recommends an appropriate response to the Production Machine component. Advanced Process Control strategies can include statistical process control, modelbased process control, multi-variate analysis, trace analysis, fault pattern matching, or any other appropriate mechanism. The internal design of the Advanced Process Control component allows integrating different types of analysis and computation mechanisms and their execution environments into a single control strategy.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.18.2  Build-time Responsibilities of Advanced Process Control Component\n\nDefine control strategies and associated sensor processing algorithms, fault detection algorithms and optimal process control algorithms. Define real-time control data structures to support control algorithms. Define data collection plans to acquire control data. Define control strategy selection logic.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.18.3  Run-time Responsibilities of A dvanced Process Control Component\n\nSelect a control strategy and associated sensor processing and analysis algorithms to optimize processing and detect faults.\nLaunch, coordinate and monitor the execution of data collection plans and control processing and analysis algorithms.\nApply algorithm results to recommend process settings and detected fault response actions (recipe adjustment, equipment shutdown, maintenance, rework, etc.).\nUpdate control data with algorithm results. Update control data with equipment and product material data (current equipment state, material state, process operation, etc.).\nRecord and report control strategy and algorithm results and recommendations in process run histories.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19  Responsibilities of Material Tr ansport and Storage Component\n\n7.2.19.1  The Material Transport and Storage component (defined in SEMI E102) supports active and manual material movement and active and passive material storage (active storage: stockers, smart racks, equipment buffers; passive storage: tables, racks). It executes Transport Jobs and interacts with the Production Machine components for material handoff to and from process equipment. The component tracks and reports on material location and material movement history. The equipment configuration, tracking and maintenance functions are the responsibility of the Equipment Tracking and Maintenance component. For complicated interbay and intrabay material transport and storage, there may be multiple instances of the component -- one for each material movement area -- that cooperate to provide factory-wide material movement functions.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19.2  Build-time Responsibilities of Material Transport and Storage Component\n\n7.2.19.2.1  Note that configuration of the material transport and storage equipment and its capabilities is the responsibility of the Equipment Tracking and Maintenance component.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19.3  Run-time Responsibilities of M aterial Transport and Storage Component (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19.3  Run-time Responsibilities of M aterial Transport and Storage Component\n\nContent: Support scheduling of material movement and processing by predicting time for material delivery to specific locations. Execute and monitor transport jobs to move material groups (transport groups) to specific locations. Validate that the job can be done: the material is available, the destination is reachable and has available storage or loadport capacity, there are sufficient material movement resources (cars, storage space, etc.) to implement the job. Implement the job by scheduling and enacting actions on internal material movement and storage resources (cars, turntables, stocker shelves, etc.). Collect and record data on transport job execution and history. Capture, record, interpret and respond to equipment events and fault detection. Generate MES-level job status events and material location change events. Record and report on material locations and material movement histories for material in the system. Interact with Production Machine component and\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19.3  Run-time Responsibilities of M aterial Transport and Storage Component (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.19.3  Run-time Responsibilities of M aterial Transport and Storage Component\n\nContent: loadport for material hand-off handshake protocols.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.20  Responsibilities of Factory La bor Component\n\n7.2.20.1  The Factory Labor component (defined in SEMI E86) implements the generic Factory Resource architecture (see Section 7.3.3) applied to factory personnel resources. It represents personnel, their capabilities (skills) and skill maintenance (training), and their assignment to other factory resources (to machines and areas) and jobs. The Factory Labor component integrates with access security services (in the Factory Services group) to associate personnel with roles, identity authentication (e.g. system login passwords) and access authorization.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.20.2  Build-time Responsibilities of Factory Labor Component\n\nConfigure the Person resource model.  \nEach Person’s name, identification, department, role, etc.\nEach Person’s initial skills and authorization to perform jobs and access data.\nEach Person’s initial assignment to other factory resources (such as specific machines or factory areas).\nEach Person’s medical qualifications.  \nDefine skill maintenance tasks and what triggers them.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.2.20.3  Run-time Responsibilities of F actory Labor Component\n\nTrack and report the Person skills, authorization and assignments and record these in Person histories.\nSupport assignment of Persons to factory jobs and monitor and record job progress (from the perspective of the Person’s role).\nMonitor skill maintenance triggers (such as expired\nskill certification) and recommend skill\nmaintenance jobs.\nExecute triggered skill maintenance jobs. Change Person capabilities (before and after training). Execute and monitor skill maintenance jobs (training, certification testing) and report job progress. Record skill maintenance triggers and job results in person skill maintenance histories.\nCollect and report person and skill performance\n(utilization and effectiveness).\nMaintain relationships between persons and system\nsecurity for identity authentication and\nauthorization.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3  Common Architectural Pattern s\n\n7.3.1  This section documents archite cture patterns that serve to functionally integrate CIM Framework components. The material architecture defines functionality common to Product Management, Durables Management and Consumables Management components. The factory resource architecture defines relationships and common functionality of factory resources. The job architecture defines a factory-wide model of controlling factory operations.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.2  Material Architecture\n\n7.3.2.1 The Product Management, Du rables Management and Consumables Management components all share a common architecture for identifying, grouping and locating materials. Figure 6 illustrates the common material interface architecture.  \n7.3.2.2  Material has an identification, history, location, inventory region and associations to material containers that may contain it. Material can also be in multiple material groups that physically (same location or carrier) or logically (same lot, same process batch, same product family, etc.) associate material. Specializations of material include products, durables and consumables. Specializations of material groups include product groups, lots, process groups and transport groups.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3  Factory Resource Architecture\n\n7.3.3.1  Factory resources, such as mac hines, people and reticles, are the entities that participate in transforming material into products. The CIM Framework defines an overall domain architecture for factory resources that supports  \nresource tracking and maintenance (resource usage counters, maintenance procedures, etc.), hierarchical organization (e.g., a factory is organized into areas which group machines and people), composition of resources (e.g., a machine is composed of chambers, load ports and sensors), and • an object-oriented type structure (transport machines and production machines are types of machines; machines, ports, durables and people are support resources, etc.).  \n7.3.3.2  This section defines the CIM F ramework resource architecture.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy\n\nContent: 7.3.3.3.1 A factory is usually viewed as a hierarchy of resources organized in groups, as in Figure 7. Each level or portion of the hierarchy has an associated task scope. An enterprise often includes multiple factories. The task of the enterprise is to deliver products to customers. • A factory is made up of areas and bays with interbay material handling systems. The task of the factory is to manufacture product in response to product requests. Areas or bays are made up of processing and metrology equipment with intrabay material handling systems. The task of the areas or bays is to perform a group of process operations on groups of materials, move material to the processing equipment, and perform maintenance and other supporting tasks. For a simple factory, the area level is optional. For a complex factory, there may be multiple area levels, with areas made up of subareas. Complex processing equipment (such as a cluster tool) is made up of processing chambers and internal material handling and\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy\n\nContent: storage resources. The task of the processing equipment is to perform a process or metrology step or a closely related group of steps on a material lot or process group. The task of the processing resource in the processing equipment (such as a chamber in a cluster tool) is to perform a single process step on a single wafer or on a collection of wafers in a process resource group. Material handling and transport systems are made up of interconnected stockers, tracks, conveyers, robotic handlers and other material storage and movement equipment. The task of the material handling systems is to store and move materials in transport groups. Manufacturing operators and other factory personnel are important resources to facilitate and supervise material processing and handling, preventive maintenance, and in some cases, perform manufacturing steps such as moving material or performing a visual inspection. Other factory resources include durables (reticles, cassettes, pods, etc.) and consumables (gases,\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy\n\nContent: utilities, etc.). The information model in Figure 8 shows the CIM Framework Resource Composition Architecture. The interfaces in the box labeled Resource Abstract Interface Group define the generic resource architecture. In general, resources can be composed of other resources. In particular, at the factory and area levels, Factory can be composed of Areas and an Area can be composed of other Areas. Areas group Support Resources, such as machines and persons. This is not a strict composition so that support resources can be in more than one Area grouping. At the machine level, Machine Resources are composed of other Machine Resources, in general. In particular, Production Machines are composed of Process Resources. 7.3.3.3.2 Figure 9 shows the CIM Framework Resource Type Architecture. Specializations of these interfaces, such as Machine Resource and Durable, provide component-specific details that extend the generic resource architecture. The functions added at each level of type specialization are\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3  Factory Resource Hierarchy\n\nContent: discussed next.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.3  Named Entity\n\n7.3.3.3.3.1  The CIM Framework Named E ntity interface provides for names and histories to be associated with any CIM Framework entity, including resources.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.4  Owned Entity\n\n7.3.3.3.4.1  The Owned Entity interface pr ovides for resources to be organized into hierarchies.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.5  Resource\n\n7.3.3.3.5.1  The Resource interface provid es for composition of subresources into complex resources, representing resource capabilities (such as capacity or process capability) (See Section 7.3.3), a simple state model (available, not available) and services to startup and shutdown the resource, and modeling of resource levels as in Figure 7 and Figure 8.  \n7.3.3.3.5.2  Each Resource has an attribute called resourceLevel to support the factory resource composition hierarchy of Figure 8. The CIM Framework defines the following resource levels: Factory (called MESFactory so as not to be confused with the OMA’s object Factory type), Area, Machine and Machine Resource. The Area level is optional, or it may have multiple levels (such as an area called LithoBay with sub-areas called Zone1 and Zone2). Other levels can be defined. The resourceLevel concept, combined with the Named Entity and Owned Entity, also provide a name scoping facility.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.6  Support Resource\n\n7.3.3.3.6.1  The Support Resource interface provides services for reserving resources (to support scheduling, for example) and to track resource utilization and effectiveness and associate maintenance tasks with resources (see Figure 10 and Section 7.3.3.5). The support resources include machine resources, material load ports, sensors, durables and people.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.7  Machine Resource\n\n7.3.3.3.7.1  The Machine Resource interface provides attributes for machine description, serial number, model number, vendor, software version, etc. The interface  \nextends resource composition to provide machine resources as composites of machine (sub)resources and specialized process resources with associated process capabilities. The Machine Resource interface also extends the resource state model to include the states and substates of SEMI E10 and SEMI E58. Specific subtypes of Machine Resource and Machine are possible. The CIM Framework defines the subtypes for Production Machine and Process Resource. Additional subtypes to support Transport Machine and Storage Machine interfaces are also possible if there are additional attributes or behaviors required that Machine and Machine Resource interfaces do not already provide.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.3.8  Port, Sensor, Durable, Consumable, Person, etc.\n\n7.3.3.3.8.1  The other support resource sub types provide additional, resource-specific, attributes and behavior. Note that durables are also subtypes of Material so they can be moved and tracked as material. Consumables are not currently considered as resources, but a given implementation of the CIM Framework could have consumables be support resources to track their consumption and replenish them as regular maintenance. Persons are considered support resources to schedule them and associate them with machines and other resources and to have associated “maintenance” schedules for training and certification.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.4  Resource Capabilities (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.4  Resource Capabilities\n\nContent: 7.3.3.4.1 Resources have associated cap abilities, as Figure 9 shows. Factory operations and scheduling use capabilities to identify resources with the capability to perform a specific task. A CIM Framework capability is represented as a text string, providing flexibility to define types of capabilities appropriate for a variety of resources. For example, an MESFactory resource may have capabilities defined in terms of its capacity and the product families it can produce, and a Process Resource may have capabilities that define its $\\mathbf { C } _ { \\mathrm { p k } }$ process capability and its throughput. 7.3.3.4.2 The Capability interface maint ains a list of Resources which have that specific capability, and the associated Resource interface maintains a list of its overall possible capabilities and the subset of possible capabilities that resource is assigned to perform. 7.3.3.4.3 The Capability interface is spe cialized for Process Capabilities associated with Process Resources. This provides an\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.4  Resource Capabilities (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.4  Resource Capabilities\n\nContent: association to the Process Operation Specifications a Process Resource can perform and the Process Durables and the person Skills needed to support the Process Capability. Other Resources can specialize the Capability interface.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.3.5  Resource Tracking and Maintenance\n\n7.3.3.5.1 Support Resources have an associated resource tracking and maintenance management function, as Figure 10 shows. A Resource Tracking Supervisor for a Resource monitors and records resource usage and status and creates Maintenance Jobs according to Maintenance Specifications. Factory Operations, with the aid of a scheduler or dispatcher, assigns Persons and other support resources defined in the Maintenance Specification and initiates Maintenance Job execution. The Resource Tracking Supervisor then supervises Maintenance Job execution. The Maintenance Job and Resource Tracking Supervisor specialize the Job/Job Supervisor pair as Section 7.3.4.6 describes. The Resource Tracking Supervisor also records appropriate history, such as maintenance logs and resource utilization and state, in the Named History Collection for the Resource (inherited from Named Entity). Resource type-specific specializations of the resource tracking and maintenance interfaces are possible.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4  Job Architecture\n\n7.3.4.1  This section describes the job management and control architecture of the CIM Framework. It defines a hierarchical job supervision and control structure that manages factory-level jobs (create product material to fill enterprise product requests) and implements these factory-level jobs by creating and managing machinelevel process jobs and transport jobs, coordinated with maintenance jobs and other support jobs. The job control architecture defines and manages relationships between manufacturing resources (process equipment, transport equipment, people), material groups (lots, product groups, process groups, transport groups) and specifications (product specifications, process flows and recipes). This is the central functional architecture which integrates the CIM Framework components into a coherent manufacturing execution system architecture. The concepts are derived from existing standards and related standards efforts [ANSI], [ALBUS], [OMA], [WfMC].\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts\n\nContent: 7.3.4.2.1 A job represents a unit of work requested of and performed (or facilitated) by a factory entity that results in some change to the overall factory state. There are several important aspects of a job within the CIM Framework: A job typically takes a non-zero time to perform and has a non-zero chance of refusal or failure. A job may encapsulate a decomposition into a combination of jobs/tasks/activities. There is a notion of higher-level jobs and lowerlevel jobs. Coordination of lower-level jobs are delegated to other job supervisors to ensure that the higher-level job is completed. There is a job requestor. 7.3.4.2.2 The CIM Framework specifies a number of structures for job control. The complexity and variability of the factory requires some organizational structure and separation of manufacturing tasks. Breaking up a complex task into a coordinated interoperation of simpler tasks enables practical solutions to complex problems (the principle of “divide and conquer”). This results in a key\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts\n\nContent: organizational structure based on the factory resource hierarchy of Figure 7 and Figure 8 , with the separation of tasks summarized in Section 7.3.3.3. The job control architecture defines how tasks are assigned and coordinated across the hierarchy of factory resources. 7.3.4.2.3 Another key job structure is th e relationship between manufacturing tasks and the material and resources used to carry out the task. For example, Factory Operations is responsible for efficiently allocating machine resources with the required processing capability to the material work-in-progress to drive the material through its process flow. A job is a combination of a requested task and the material and resources needed to execute that task (see Figure 13). The relationship between task, material and resource, combined with a hierarchical job structure (based on a hierarchical resource structure) results in complex relationships between tasks, material, and resources at multiple levels. 7.3.4.2.4 Given the complexity, scope\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.2  Job Architecture Concepts\n\nContent: and variability (chance of failure or partial success) of jobs, the CIM Framework separates job control into explicit functions. It does not bury job control into material management functions for driving process flows, nor does it bury job control into machine management functions for driving process operations. The CIM Framework makes job control explicit, providing an architectural structure to attach decision support logic (such as scheduling utilities), business processes (workflow) and business rules that enforce operational policy. Further, the CIM Framework distributes and coordinates job control among factory jobs, production machine jobs, transport jobs, and maintenance jobs. This allows job control to manage “local” complexity while coordinating factorywide operations toward “global” objectives.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.3  Hierarchical Task Structure (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.3  Hierarchical Task Structure\n\nContent: 7.3.4.3.1 At the lowest level of the facto ry hierarchy (the resource level in Figure 7), the tasks are single process or metrology operations or material movements. Through a complex, context-dependent combination of single tasks, products are manufactured and delivered to customers. This complex combination of single tasks is a task structure as shown in Figure 11. In manufacturing operations, these structures are predefined as task procedures, work flows, process specifications, etc. To accommodate manufacturing variability and exceptions, though, the structures must also be adjusted and modified as they are executed. For example, as factory operations selects specific machine resources to perform process steps, it may insert machine-dependent setup tasks and operation sequences, it may modify step specifications (recipes) with machine-dependents settings, or it may insert transport steps to get the material to the machine. 7.3.4.3.2 Notice in Figure 11 that tasks of a higher level are decomposed\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.3  Hierarchical Task Structure (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.3  Hierarchical Task Structure\n\nContent: into combinations of tasks for lower level resources. Each manufacturing resource has a thread of tasks that must be coordinated with the tasks of other resources. The higher level task is completed when the combination of lower level tasks is completed. Figure 11 illustrates this with the coordination of material movement and processing operations and with the coordination of operations within the processing equipment. Resource maintenance, advanced process control calculations and other tasks must also be coordinated with material processing, inspection and movement tasks. The role of job control is to decompose, coordinate, monitor, adjust, and report on this hierarchical structure of tasks.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.4  Elements of a Task (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.4  Elements of a Task\n\nContent: 7.3.4.4.1 The Hierarchical Task Structure of Figure 11 defines the requirements for a multi-level task model. Figure 12 shows the elements of a hierarchical task, indicating some of the additional data for an overall job control structure. A task is requested from a superior level. Along with the request is a task specification, which is often a template or procedure for how to carry out the task, including a combination of subtasks and monitor and adjustment checkpoints along the way. 7.3.4.4.2 As each task is started, comple ted, modified or aborted, the job control for the task publishes appropriate events or other notifications. The task endpoints illustrated in Figure 12 as triangles represent factory states or some specific aspect of a factory state. When a task is completed, the factory state is changed in the specified way. For example, after a wafer deposition task, the product state is changed, with a layer of oxide deposited on all the wafers in a lot. When a movement task is completed, the product\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.4  Elements of a Task (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.4  Elements of a Task\n\nContent: location state is changed to the load port for a machine to perform the next process operation. These intended factory states often have side effects on other factory states. For example, after a process operation, the equipment state changes to reflect its utilization, consumables consumption, etc. Job control achieves orderly, coordinated, efficient changes to factory state that result in products, that is, that efficiently turn raw wafers into product wafers. 7.3.4.4.3 As the job control executes the task, task results are collected in a job history that includes a job identifier, the (modified) specification used, and recorded inputs and results. Higher level job results could be a roll-up, an abstraction, or simply pointers to lower level job results.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.5  Job Structure\n\n7.3.4.5.1  A job is a relationship between all the elements necessary to perform a task with specific control functionality to carry out the task in light of manufacturing variability. A job implements a specified task on specified material using specific resources. The job structure of Figure 13 is the relationship mechanism for controlling and changing factory material and resource states and recording job results in associated job histories. That is, the job instantiates and manages the relationships in the structure of Figure 13.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.6  Jobs and Job Supervisors (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.6  Jobs and Job Supervisors\n\nContent: 7.3.4.6.1 Jobs are transient entities. The y are created to perform a task and go away when the task is complete. A job supervisor is the persistent object that responds to job requests by creating jobs. Figure 14 shows an information model for the generic Job Supervision architecture. 7.3.4.6.2 There is a corresponding job supervisor which specializes the generic job supervisor; a Factory Job Supervisor manages Factory Jobs; an Area Job Supervisor manages Area Jobs; and a Production Machine Job Supervisor manages Production Machine Jobs. There is also a Maintenance Job Supervisor and an Advance Process Control job supervisor (the Control Execution Manager in the Advanced Process Control component). Job Requestors, Job Supervisors, and Jobs 7.3.4.6.3 The entities in Figure 14 are as follows: • Job. A unit of work that takes time and may fail. Has state (see Figure 15). Job Supervisor. Receives requests for work, facilitates creation of a job for the task and returns a reference to that job to the\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.6  Jobs and Job Supervisors (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.6  Jobs and Job Supervisors\n\nContent: requestor. Manages all jobs within the component that implements it. Job Requestor. Requests work. Receives job progress through interface methods (informJobStarted, informJobCompleted, informJobTerminated) and published events. Job Specification. Job description (process flow, recipe, transport destination, maintenance spec, etc.). Priority and deadline.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles\n\nContent: 7.3.4.7.1 Jobs and Job Supervision are encapsulated within a component. Their interaction and the division of responsibility between them is hidden. At any level, the requestor of activity will request work of a Job Supervisor and receive in return the handle to a Job which represents this work. This requestor will not have visibility to how the Job Supervisor performs the work beyond what is specified in the original activity specification and what is reported later as data. Not visible or accessible are the Job Supervisor’s internal and lower-level activity requests (and resulting jobs). 7.3.4.7.2 A job requestor does not micro manage the job. Instead, the job requestor creates a specification of the work to be done and hands it to the Job Supervisor when requesting the work. Once the work request is accepted, the Job Supervisor’s component controls the execution of that job within the limitations of the job specification and its business rules. The only exceptions are coarse commands such as\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles\n\nContent: job abort or pause. The responsibility of the Job Supervisor and Job is to perform the activity and report back to the requestor on the success or failure of the effort. 7.3.4.7.3 There is no predefined limitation on the facilities within the factory that may be used to satisfy a job request. However, a Job Supervisor may be configured to be limited to specific factory resources that it can call on to perform work. 7.3.4.7.4 The job requestor has an interface so the Job/Job Supervisor can report overall job progress. The Job Requestor interface includes the methods requesting that it be notified that a job has started, completed, or been terminated. The requestor or other components can subscribe to job state change events and other events for a more detailed job status. 7.3.4.7.5 The Job Supervisor interface p rovides high level information about the jobs it is currently managing. The details of any specific job are provided by the Job itself, not the Job Supervisor. From the Job Supervisor,\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.7  Job Supervision Design Principles\n\nContent: the Job Requestor is able to request activity, locate jobs that meet certain criteria, request lists of all jobs being performed, and control all the jobs as a group (e.g. “abort all jobs”), but not individually (not “abort job X”— this would be a responsibility of the Job interface). NOTE 13: Much thought should be given to the use of these “all jobs” commands since they can cause a great deal of harm if not designed and used properly. 7.3.4.7.6 The Job interface is the sole so urce of all public information about a job. It also provides all specific control of the job (pause, abort, etc.).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.8  Hierarchical Job Structure (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.8  Hierarchical Job Structure\n\nContent: 7.3.4.8.1 The factory and task hierarchy of Figure 11 and Figure 12 results in a multi-level (hierarchical) job control structure, with a given Job/Job Supervisor requesting work through other (sub)Jobs. As Figure 16 illustrates, higher level job controllers specify and request work from any number of lower level job controllers and monitor job progress through status and external feedback. At the lowest level, job control results in directly manipulating equipment actuators based on real-time sensor feedback. (Note, this lowest level of job control is outside the MES scope of the CIM Frameworkit is within the scope of the equipment control.) The job request, status, and feedback information are all candidates for storage in job history. 7.3.4.8.2 Placing the job structure template of Figure 13 into the job control hierarchy of Figure 16 results in the hierarchical job control pattern of Figure 17. 7.3.4.8.3 At each level, the job control Receives job requests with associated job specifications,\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.8  Hierarchical Job Structure (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.8  Hierarchical Job Structure\n\nContent: Decomposes the job into subjobs, Defines resource relations between the job and subjob (e.g., selects and schedules resources for subjobs within the scope of the job supervisor, such as machines assigned to an area or process chambers in a production machine), Defines material relations between the job and subjob (e.g. how lots are assigned to transport groups and process groups, including decisions on batching, splits, joins, etc.), Requests the subjobs and provides associated subjob specifications, Monitors subjob progress, Reports job progress to the job requestor and other interested functions, Records job history.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: 7.3.4.9.1 Figure 18 shows the job hierar chy pattern applied to the material movement resources of Figure 7. Figure 19 shows the pattern of Figure 17 applied to the material processing resources of Figure 7 (branching to multiple lower-level resources is not shown). Figure 20 summarizes how the CIM Framework components come together into an integrated manufacturing execution system. The product material hierarchy and genealogy is modeled in the Product Management components of the CIM Framework Specification. The task specification hierarchy is modeled in the Specification Definition and Recipe Management components. The resource hierarchy is modeled in the Factory Operations (for Factory and Area levels), Equipment Tracking and Maintenance, Durables and Consumables Management, and Factory Labor components. • The control hierarchy is modeled in the Factory Operations (Factory Jobs), Production Machine (Production Machine Jobs), Material Transport and Storage (Transport Jobs), and the\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: maintenance job supervision aspects of the various Resource Tracking and Maintenance specializations (Maintenance Jobs). 7.3.4.9.2 As Section 7.3.3.3 describes, each of these job control views shows a job supervision function that performs the tasks for each level of the factory resource hierarchy. 7.3.4.9.2.1 Factory Job Supervision: Facto ry Operations satisfies enterprise product requests. It releases material and creates Factory Jobs which drive material work-in-progress through its process flow. The Factory Job Executor requests, schedules, monitors and coordinates supporting jobs: production machine jobs, transport jobs, maintenance jobs, etc. 7.3.4.9.2.2 Area Job Supervision: This op tional level serves Factory Operations and is responsible for multiple machine activities (areas may map to bays, cell controllers, linked lithography, etc.). This level is not required, but is available for organizing large factories. Area job supervision could support factories that have a factory within\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: a factory model with separate but integrated operations management for separate units of manufacturing capacity. It could also support factories transitioning from legacy systems, with parts of the factory under a CIM Framework-conformant MES and other parts under a legacy MES that is fronted or wrapped by a CIM Framework conformant Area Job Supervisor component. Another example could be a factory that provides a pseudo-cluster cell controller to group stand-alone process equipment into an integrated workcell that behaves like a cluster tool. The CIM Framework does not specify separate Area Job Supervision interfaces. These functions are met by the Production Machine Job interfaces with no changethe same interface serves both functional roles. Areas typically receive a sequence of process jobs as a request (implemented by requesting lower-level process jobs and material transport jobs), whereas simple machines usually receive a single process job (implemented through direct interaction with\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: process equipment). 7.3.4.9.2.3 Machine Job Supervision: This level lies within the CIM Framework Production Machine component. It accepts activities that apply to a single Machine. It delegates work directly to the physical equipment, either through some equipment interface driver or directly through the GEM/SECS interface. 7.3.4.9.2.4 Transport Job Supervision: Th is level lies within the Material Transport and Storage component. It takes requests to move material from one location to another. While the CIM Framework provides for layers of Transport Job Supervisors in a complex interbay and intrabay material handling system, today’s typical installation has a single material handling system controller (a single Transport Job Supervisor). Complex production machines with internal material handling and storage may also be Transport Job Supervisors. 7.3.4.9.2.5 Maintenance Job Supervision: Maintenance is a preventive (scheduled) or reactive (repair on failure) activity on specific resources\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 5)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: (machines, durables, etc.) using labor resources and materials. Maintenance job progress is reported and tracked and maintenance job history is stored. The generic Resource Tracking and Maintenance component defines the overall maintenance job supervision functions (see Section 7.3.3.5), and the various resource types implement these functions in the Equipment Tracking and Maintenance, Durables Management, Consumables Management, and Factory Labor components. 7.3.4.9.2.6 Advanced Process Control (AP C): APC includes lengthy calculation activities that may not succeed and which impact the performance of other jobs. For example, an algorithm may not converge, a sensor may emit bad data, or process recipes and job specifications may be modified. The CIM Framework APC component leverages the overall job architecture, where control strategies and scripts are the job specifications, sensor analysis and control execution environments are scheduled resources, and the state of process specifications\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary (Part 6)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.9  CIM Framework Job Structure Summary\n\nContent: (machine settings, modified process flows) are the result of APC job execution. 7.3.4.9.2.7 Enterprise and Process Resour ce: The job control hierarchy of Figure 19 provides interfaces to the enterprise at the top level and the equipment at the bottom level. The enterprise level is the requestor of work for the factory. Enterprise control is outside the MES functional scope of the CIM Framework. The equipment level is also outside the scope of control of the CIM Framework. It is usually implemented by process controllers embedded in or piggyback on equipment. The equipment level is modeled for the MES to allow process data to be collected and organized for specific equipment resources such as a specific chamber in a cluster tool.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.10  Job History\n\n7.3.4.10.1  Any entity can have an associated CIM Framework History. The CIM Framework defines some specific named histories, as  Figure 21 illustrates. Product-oriented data is captured in production history associated with the material hierarchy and is used, for example, for material traceability and defect analysis. Process-oriented data is captured in process history associated with the job supervision hierarchy and is used, for example, for run-to-run process control. Equipment and other resource-oriented data is captured in resource history associated with the resource hierarchy and is used, for example, for preventive maintenance and warranty tracking.  \n7.3.4.10.2  As jobs are executed (and possibly broken down into sub-tasks as shown in Figure 12), their results are captured as various types of histories. For example, an Area Job’s history may be captured within an InventoryRegionHistory. A Resource Level Job’s history may be captured within an E10PerformanceHistory or within a ResourceMaintenanceLogHistory.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.11  Task Specification and Workflow (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.11  Task Specification and Workflow\n\nContent: 7.3.4.11.1 The specification of a task takes various forms. For Factory Jobs, the specification is the process flow defining the process steps to transform material into products. For Production Machine Jobs, the specification is the specific steps in the process flow that this production machine is to perform, along with process recipes. For Transport Jobs, the specification defines the destination location for the material transport group. For maintenance jobs, the specification defines the specific maintenance tasks for the resource. For advanced process control jobs, the specification defines a script that includes the sensor processing and algorithm steps of a control strategy. 7.3.4.11.2 In general, each task specificat ion is a definition of a business process and a task workflow to carry out that business process. There is a diversity of information that could appear in a business process, including associated operational business rules and constraints, workflow traversal logic, and data\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.11  Task Specification and Workflow (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.3.4.11  Task Specification and Workflow\n\nContent: structures for tasks, recipes, steps, etc. There is not industry consensus on representing these generic task specification details. For each specific job type, the CIM Framework defines some specification structure, but leaves room for suppliers and users to define additional data and behavior and to leverage workflow engines and evolving workflow standards [Workflow, WfMC].\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4  Specification Conventions\n\n7.4.1  This section provides an overv iew of the notations required to express the CIM Framework specifications. These notations provide the representational formalisms for all CIM Framework specifications. This section is a reference rather than a tutorial. Hence, those unfamiliar with these topics are strongly encouraged to consult the materials listed in the references for a more thorough explanation.  \n7.4.2  CIM systems requirements and the architectural principles upon which the CIM Framework was founded were derived through use of industry standards, practices reported in the literature, and other state-of-the-art information. The requirements of the CIM Framework are specified using a combination of graphical and textual notations. Where applicable, methods were employed and notations applied that were supported by the automation of computer-aided software engineering tools.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3  Model Specification and Grap hical Notation Usage\n\n7.4.3.1  This section briefly describes t he graphical notations used to specify the semantics of the framework, including the following:  \nComponent Relationship Model.\nComponent Information Model.\nComponent Interaction Diagram. State Model.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.2  Component Relationship Model\n\n7.4.3.2.1  The Component Relationship Model was developed specifically for the framework specification as a mechanism to show relationships among framework components. It shows the logical combination of components and the relationships among the component parts.  Figure 22 depicts the Component Relationship Model.  \n7.4.3.2.2  This model is based on the Un ified Modeling Language (UML) Class Diagram [UML] with added stereotypes to represent the components. The UML Association concept is abstracted to represent the highlevel relationships between components of the framework.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.3  Component Information Model\n\n7.4.3.3.1  The Component Information Model shows the specified CIM Framework interfaces along with the relationships between those interfaces. This model is based on the UML Class Diagram [UML] with the stereotype «Interface» to indicate that the classes are interfaces rather than implementation artifacts. This model shows generalization as applied to interface inheritance, aggregation of interfaces, and the use of an Association Class to represent data associated with an association between two interfaces. The associations also capture specific semantics of the relationship, including multiplicity and optionality as shown in Figure 23.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.4  Component Interaction Model\n\n7.4.3.4.1  The Component Interaction Model expresses framework dynamics by describing the sequence of collaborations between objects supporting CIM Framework interfaces. This model is represented using the UML Sequence Diagram [UML]. The vertical lines each represent an object that conforms to a role specified by a CIM Framework interface. This is called a “lifeline.” The connecting arrows represent messages that flow between these objects and the data they convey. Each message must map to a defined operation on the interface of the message recipient. The example shown in Figure 24 of a Sequence Diagram models a portion of the interaction between a bank customer and an Automated Teller Machine (ATM).\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5  State Model\n\n7.4.3.5.1  The State Model shows behav ior associated with CIM Framework interfaces as changes in state that result from specific events. The required behavior for an interface is conveyed through UML State Diagrams [UML] and textual tables that offer supporting details. Under this notation which is based on Harel Statecharts, states may be divided into substates, thereby forming a hierarchy of states. Substates must be one of two types, termed AND substates (representing concurrency) and exclusive OR substates (representing a finer breakdown of a parent state).  \n7.4.3.5.2  Object State Tables provide supplementary (to the State Diagram) state information including descriptive state definitions, state query mechanisms, the triggers effecting state transition, and the actions resulting from state transitions.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5.3  Object State Definitions and Query Table\n\n7.4.3.5.3.1  The Object State Definition and Query Table provide supplementary information to the State Diagram.  \n7.4.3.5.3.2  Table 1 provides a detailed description of each object state and identifies the query mechanism for determining if the object is in that state. Given the example provided in this section, an entry in the State Definitions and Query Table would appear as shown.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5.4  Object State Transition Tables (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5.4  Object State Transition Tables\n\nContent: 7.4.3.5.4.1 Another supplement to the state model is the Object State Transition Table (Table 2). 7.4.3.5.4.2 It lists the transition from the s tate diagram identified by the starting and ending states, and the event that causes the transition between these states. 7.4.3.5.4.3 Within the CIM Framework sp ecification, only those triggers and state changes relevant to external interfacing are shown to help define how an external entity (in this case a driver) interoperates with an object (in this example an automobile). 7.4.3.5.4.4 While this table defines trigge rs for state transitions, there is no guarantee that the transition will take place in response to the trigger. In the above example, if the car is out of gas the engine will not go to the running state; if the light is burned out, it will not transition to the on state; depressing the accelerator pedal when the auto is in the off state will have no effect, etc. In the CIM Framework, object state can be queried to ensure successful\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5.4  Object State Transition Tables (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.3.5.4  Object State Transition Tables\n\nContent: transitioning in response to a triggering message. Events are also used in some cases to inform the client of a transition or change of state. Table 1 Object State Definitions and Query Table Example Table 2 Object State Transition Table Example\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4  Textual Specification Languag e\n\n7.4.4.1  The textual notations used to s pecify the framework in this specification, include the following:  \nInterface Definition Language (IDL).\nInterface Definition Format.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL) (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL)\n\nContent: 7.4.4.2.1 Specifications of CIM Framework components are composed mainly of interfaces. The specifics of each interface, while also represented in the UML-based Component Information Model, are rigorously specified using OMG IDL. The IDL for CIM Framework interfaces shall be complete and consistent as verified by automated IDL compilers. The IDL portion of SEMI specifications will be available in a text file format to facilitate such validation and use with IDL compiler technologies. 7.4.4.2.2 This explanation of IDL is add ressed to its use as a rigorous specification tool. The considerations of mapping the specifications to an implementation infrastructure are addressed in SEMI E96. 7.4.4.2.3 Common Object Broker Architecture (CORBA) [CORBA][CIMArch] defines the architecture which enables and regulates interoperability between objects and applications across heterogeneous languages and computer boundaries. In all Object Management Group (OMG) specifications, services are defined as object\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL) (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL)\n\nContent: interfaces expressed in the $\\mathrm { O M G ^ { \\prime } } s$ IDL. CORBA standards define IDL and its mapping to implementation languages (for example, C, $C + +$ , Smalltalk, and Java). 7.4.4.2.4 IDL is a compilable language t hat describes the operations that are specified for an interface. The notation is independent of the language in which the methods that implement an interface’s operations are written. This goal is achieved by mapping between the $I D L$ syntax and whatever language is used to implement client and server objects. Because $I D L$ is designed purely for interface specification, it omits the flow control and operator constructs of an implementation language. Object classes can implement an interface differently as long as their behavior conforms to the interface specification. 7.4.4.2.5 IDL obeys the same lexical rul es as $C$ , while introducing a number of keywords specific to a distributed system. As $I D L$ is mapped to object-oriented languages, new constructs will\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL) (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.2  Interface Definition Language (IDL)\n\nContent: appear. A brief discourse on some of the keywords and concepts used in this specification follows. In the examples, words in italics are user supplied, others are $I D L$ -defined keywords.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t\n\nContent: 7.4.4.3.1 The OMG defines an object’s interface as “a listing of the operations and attributes that an object provides. This includes the signatures of the operations, and the types of the attributes. An interface specification ideally includes the semantics as well” [OMA]. The CIM Framework Specification builds upon this definition to provide additional semantic information for an interface. These semantics are captured in an interface description. This section describes the format of an interface. Each description of an interface follows this format. The format includes the following: Name — The capitalized noun following the word “Interface:” Inherited Interface — The capitalized noun after the words “Inherited Interface:” Description — A definition of the interface giving its form and function. Exceptions — An IDL specification for reporting user-defined, framework-related error conditions. Published Events — The name of the event structure that must be placed on an event channel. The event\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t\n\nContent: structure identifies the event through a subject field. The subject is composed of the component and interface issuing the event and data describing the event, and filterable and nonfilterable information. Events are defined at the interface level; neither posting services nor subscribers are identified. Thus, events are not tied to specific services and may be the result of an internal (to the component) computation. Provided Services — A list of publicly available services provided by this interface. In other words, a list of non-private, named operations. Each is given by a description in comment form (i.e., $I ^ { * } . . . ^ { * } / )$ followed by its representation in the IDL syntax. Contracted Services — A table of framework services provided by other interfaces that are being used by public and/or private services in this interface. These methods must be available in order for the documented interface to provide its described services. Changes to contracted services may result in changes\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.3  Interface Specification Forma t\n\nContent: to the behavior of the interface making use of these services.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # State Model — See Section 7.4.3.5 for details.\n\n7.4.4.3.2  If no Provided Services are defined for a particular category, then “No public interfaces” will appear after the category identifier. If no Exceptions, Published Events, Contracted Services, or Dynamic Model are provided, then the word “None” will appear. State Transition Tables occur only in conjunction with Dynamic Models.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 7.4.4.4  Interface Specification Examp le\n\n7.4.4.4.1  Table 3 provides a complete il lustration of IDL and CIM Framework interface specification format usage within this specification. Words in italics are user-supplied, others are either IDL or CIM Framework-defined keywords.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications\n\nContent: 8.1 The objective of the CIM Fram ework is to speed the creation, use and improvement of a manufacturing execution system for a semiconductor wafer fabrication factory by enabling the integration of disparate components into a cohesive system. The CIM Framework achieves this objective by specifying a domain model for MES components. MES component suppliers use the specification to help establish the boundaries and interfaces of their components. Component customers first use the specification to assess the capabilities of individual components and then to facilitate the integration of components into a working system. 8.2 The CIM Framework increase s the value of the MES components by enhancing their qualities of interoperability, substitutability and extensibility. Interoperability is the ability of components to work together through compatible interfaces. Substitutability implies the option to swap one component with another because they support the same interfaces. Extensibility\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications\n\nContent: means the planned capability to add functionality to a component, again by leveraging the support for predefined interface specifications. 8.3 Given both the scope and objectives of the CIM Framework, conformance to the Framework can not be reduced to a simple “yes or no” proposition. Rather, component customers must assess component conformance on a case-by-case basis. Potential buyers assess conformance in terms of how well a component supplier demonstrates use of the CIM Framework specification to enable rapid component integration. 8.4 With this background, here the n are factors for consumers to consider in assessing MES components and for suppliers to comprehend when building components. These factors form the basis for communication between buyers and sellers of components regarding conformance to the CIM Framework specifications. CIM Framework component packaging: Component suppliers must explain how their component is packaged relative to the corresponding CIM Framework\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications\n\nContent: component(s). Note, however, that suppliers may choose to provide multiple CIM Framework components as an integrated package. In this case the complete package can be assessed relative to the combination of services provided by the combined set of CIM Framework components. Obviously, a consumer must also assess the benefits of the integrated component relative to the reduction in the ability to substitute components within the integrated package. CIM Framework objects and interfaces: Component suppliers must describe how their objects and methods support the CIM Framework component interfaces. This includes describing the object methods available in comparison to the interfaces specified in the CIM Framework. Note that this interface specification question encompasses specific operations, the operations’ arguments, the exceptions returned, and the events published. Object behavior: Component suppliers must document object behavior so component consumers can understand the purpose and\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 8  Conformance to CIM Fram ework Domain Specifications\n\nContent: consequences of specific methods. The CIM Framework specifies behavioral semantics for components using a variety of representations such as state models, information models showing relationships, interaction models, and text-based comments. Component suppliers need to explain how their objects conform to the CIM Framework behavioral semantics. 8.5 As these factors indicate, asses sing the CIM Framework conformance of supplied components takes more than just verifying the existence of specific objects and methods. The key issue is whether a component supplier provides both the software and its associated conformance information needed to enable the use and integration of the component.\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents (Part 1)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents\n\nContent: 9.1 The following documents desc ribe programs, standards, and guidelines used in the development of the CIM Framework specification. 9.1.1 SEMATECH Documents Advanced Process Control Framework Initiative (APCFI) 1.0,6/27/97 (SEMATECH - Technology Transfer #97063300A-ENG):CIM Framework Enhanced Machine Component Communications Driver (MCCD) Final Report (SEMATECH Technology Transfer #97073323A-TR). $\\mathrm { C } { + } { + }$ Reference Implementation for the Computer Integrated Manufacturing (CIM) Application Framework: Release 2, 1/4/96 (SEMATECH Technology Transfer #95082944B-ENG). Computer Integrated Manufacturing (CIM) Application Framework Validation Project: Lessons Learned During the Automation Software Systems Project (SEMATECH - Technology Transfer #94102568AENG). Computer Integrated Manufacturing (CIM) Development Manual 1.1 - Volumes 1 and 2 (SEMATECH - Technology Transfer #91120794BENG). Computer Integrated Manufacturing (CIM) Framework Member Validation Project (FMVP): Phase II Final Report (SEMATECH -\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents (Part 2)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents\n\nContent: Technology Transfer #96013061A-TR). Evolution of WorkStream for Preventive, Predictive Maintenance (PM) at SEMATECH (SEMATECH - Technology Transfer #95092966A-TR). Real-Time Dispatcher (RTD) Computer Integrated Manufacturing (CIM) Framework Conformance and Integration Studies (SEMATECH - Technology Transfer #96023088A-ENG). Results of the AutoSimulations and TI/WORKS Integration Feasibility Study (SEMATECH Technology Transfer #95092981A-ENG). SEMATECH Workbench for Integrated Modeling (SWIM) Enhanced Prototype Functional Specification 5.0, 12/2/93 (SEMATECH - Technology Transfer #93112072A-ENG). Semiconductor Generic Manufacturing Model. (SEMATECH - Technology Transfer #91090704AENG). Semiconductor Generic Manufacturing Requirements Specification (SEMATECH - Technology Transfer #91090703A-ENG). Strategic Cell Controller (SCC) Program Repository Contents Guide 1.1 SEMATECH Factory Integration Technologies (FIT) Project (SEMATECH - Technology Transfer #93091827B-XFR). Strategic Computer Integrated Manufacturing (CIM)\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents (Part 3)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents\n\nContent: Computing Environment Specifications. (SEMATECH - Technology Transfer #92010916A-ENG) Technical Summary of CIM Framework-Based Integration of ASI Real-Time Dispatcher and IBM Legacy Systems (SEMATECH - Technology Transfer #96093180A-TR). NOTICE: SEMI makes no warranties or representations as to the suitability of the specification set forth herein for any particular application. The determination of the suitability of the specification is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These specifications are subject to change without notice. The user’s attention is called to the possibility that compliance with this specification may require use of copyrighted material or of an invention covered by patent rights. By publication of this specification, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection\n\nSEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents (Part 4)\n\nTitle: SEMI E81-0600PROVISIONAL SPECIFICATION FOR CIM FRAMEWORK DOMAINARCHITECTURE - # 9  Related Documents\n\nContent: with any item mentioned in this specification. Users of this specification are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM)\n\nThis specification was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org June 2005 and on CD-ROM in July 2005.  Originally published September 1999; previously published November 2004.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 1  Purpose\n\n1.1  This standard establishes a Specific Equipment Model (SEM) for interbay and intrabay AMHS transport equipment (IBSEM). The model consists of equipment characteristics and behaviors that are to be implemented in addition to the SEMI E30 fundamental requirements and selected additional capabilities.  The intent of this standard is to facilitate the integration of IBSEM equipment into an automated (e.g., semiconductor fabrication and flat panel display) factory. This document accomplishes this by defining an operational model for IBSEM equipment as viewed by a factory automation controller (Host). This definition provides a standard host interface and equipment operational behavior (e.g., control, state models, data reports, and reporting levels). Several topics require additional activity that are within the scope of this standard: traffic management characteristics (queuing), parallel interface for carrier transfer (SEMI E23), transport system controller architecture, and delivery of the transfer unit.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 2  Scope (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 2  Scope\n\nContent: 2.1 The scope of this standard is limited to the usage and description of interbay and intrabay AMHS transport equipment (OHT, OHS, RGT, AGT, DWC) as perceived by a SEMI Equipment Communications Standard 2 (SECS-II) host that complies with the GEM model (as specified in $\\ S 1 3$ ). It defines the view of the equipment through the SECS communication link. It does not define the internal operation of the equipment. It includes a specific transfer command state model and transport system controller state model as the basis for all equipment of this class. 2.2 This document assumes that the GEM fundamental requirements and selected additional capabilities (as specified in $\\ S 1 3$ ) have been implemented on the IBSEM equipment. It expands the GEM standard requirements and capabilities in the areas of state models (TSC, transfer command, vehicle and carrier state models), collection events, alarm documentation, remote commands, data item variables, and material movement. NOTICE: This standard does not purport to address safety issues, if\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 2  Scope (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 2  Scope\n\nContent: any, associated with its use. It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 3.1  Evaluation of SEMI E32 (MMM) (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 3.1  Evaluation of SEMI E32 (MMM)\n\nContent: 3.1.1 The concepts defined in SEMI E32 were analyzed and included where applicable to the IBSEM, but the GEM model was used as the basis for IBSEM requirements definition. 3.2 Interbay and Intrabay AMHS Transport Equipment Types 3.2.1 This standard is targeted at the different types of $3 0 0 \\ \\mathrm { m m }$ and interbay and intrabay AMHS transport equipment. The term IBSEM equipment refers to all types of transport equipment. The equipment types have fundamental mechanical differences: 3.2.1.1 Overhead Hoist Transport (OHT) — An overhead rail guided transport system positioned for vertical access to SEMI E15.1 compliant ports. 3.2.1.2 Over Head Shuttle (OHS) — An overhead rail guided transport system (monorail) positioned for access to stocker automated interbay input and output ports. The OHS vehicle may or may not contain a transfer agent. 3.2.1.3 Rail Guided Transport (RGT) — A ground-based rail guided transport system positioned for access to SEMI E15.1 compliant ports. 3.2.1.4 Automated Guided Transport\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 3.1  Evaluation of SEMI E32 (MMM) (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 3.1  Evaluation of SEMI E32 (MMM)\n\nContent: $( A G T ) \\mathop { - } \\mathbf { A }$ ground-based transport system with automated guidance (i.e., no rail guidance). Automated guidance system allows vehicles to access SEMI E15.1 compliant ports. 3.2.1.5 Direct WIP Conveyer (DWC) — An overhead transport system, based on direct WIP roller conveyers. No vehicles are used for point to point delivery. The conveyers are positioned for vertical access to SEMI E15.1 ports. 3.2.2 Transport vehicles may contain zero or more internal buffers for carrier transport. If mechanically feasible, the transport system may acquire or deposit carriers simultaneously. If transported in a safe manner, carrier transport may occur while occupying the acquire/deposit transfer port(s) of the transport vehicle (e.g., a single position hoist vehicle). In the context of this standard, a “vehicle” on a DWC is defined as a single carrier in the transport system.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 3.3  Physical Layout Limitations\n\n3.3.1  The equipment controlled by a single TSC must allow for a carrier to be transported from any given source port to any destination port via a single transfer command without the assistance of an external device (manual or automated).  In other words, if a source port and a destination port are controlled by a TSC, there must not exist a physical or logical barrier that prevents a carrier from being moved between the two ports.  This assumes that the type of carrier (FOUP, Reticle Pod, etc.) is permitted at the source and destination ports.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 4.1  SEMI Standards\n\nSEMI E4 — SEMI Equipment Communications Standard 1 Message Transfer (SECS-I)  \nSEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nSEMI E23 — Specification for Cassette Transfer Parallel I/O Interface  \nSEMI E30 — Generic Model for Communications and Control of Manufacturing Equipment (GEM)  \nSEMI E32 — Material Movement Management (MMM)  \nSEMI E37 — High-Speed SECS Message Services (HSMS) Generic Services  \nSEMI E84 — Specification for Enhanced Carrier Handoff Parallel I/O Interface  \n4.2  Other References  \nHarel, D., “Statecharts: A Visual Formalism for Complex Systems,” Science of Computer Programming 8 (1987) 231-274.1  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology\n\nContent: 5.1 Abbreviations and Acronyms 5.1.1 AGT — Automated Guided Transport 5.1.2 AMHS — Automated Material Handling System 5.1.3 DWC — Direct WIP Conveyor 5.1.4 FOUP — Front Opening Unified Pod 5.1.5 GEM — Generic Equipment Model 5.1.6 ITS — Interbay or Intrabay Transport System 5.1.7 OHS — Over Head Shuttle 5.1.8 OHT — Overhead Hoist Transport 5.1.9 PGV — Person Guided Vehicle 5.1.10 RGT — Rail Guided Transport 5.1.11 TCP/IP — Transmission Communication Protocol/ Internet Protocol 5.1.12 TSC — Transport System Controller 5.2 Definitions 5.2.1 active vehicle — a vehicle in the transport system that contains a robot or other transfer agent for providing the acquiring (loading) and depositing (unloading) actions. 5.2.2 buffer — a set of one or more locations for holding carriers at the production equipment. 5.2.3 carrier — a container with one or more fixed positions for holding substrates. Examples of carriers include FOUPs and open cassettes. 5.2.4 FOUP — a closed carrier for holding wafers. 5.2.5 host — the factory computer system, or\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology\n\nContent: an intermediate system, that represents the factory and the user to the equipment. Refers to the system that controls or supervises the Transport System Controller (TSC) throughout this document. 5.2.6 internal buffer — locations within the equipment to store carriers. These locations exclude load ports. 5.2.7 internal transfer port — a specific type of transfer port, which is internal to a single TSC domain. As an example, this location may be used to transfer carriers among different vehicles in a single TSC domain. 5.2.8 load port — the interface location on the equipment where carriers are delivered. 5.2.9 open cassette — an open structure that holds one or more wafers. 5.2.10 passive vehicle — a vehicle in the transport system that does not contain a robot or other transfer agent for providing the acquiring (loading) and depositing (unloading) actions. The vehicle simply contains a position(s) to carry the transfer unit. The loading and unloading action must be accomplished at the load or unload port by a different system\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology (Part 3)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology\n\nContent: (e.g., stocker port robot). 5.2.11 process equipment — equipment used to make semiconductor devices. This excludes metrology and material handling equipment. 5.2.12 production equipment — equipment used to produce semiconductor devices, including wafer sorting, process, and metrology equipment and excluding material handling equipment. 5.2.13 transfer port — point on the transport system at which a change of equipment ownership of the carrier occurs. See also internal transfer port. 5.2.14 transfer unit — the element of movement (assemblage of carriers) of the ITS that consists of a maximum number of carriers allowed in a specific transfer command: AA is the maximum number of carriers allowed for acquire at the transfer source. BB is the maximum number of carriers allowed for deposit at the transfer destination. CC is the maximum number of carriers allowed for transfer in one transport vehicle. The maximum size of the transfer unit is the minimum of AA, BB, and CC. 5.2.15 Transport System — a transport system dedicated to one or\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology (Part 4)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology\n\nContent: more bays in the factory and responsible for transferring carriers to production equipment, from production equipment, from production equipment to production equipment or from stocker to stocker. TS consists of the physical units of the system (e.g., vehicles, nodes, docking stations), the low-level unit controllers, and a system-level controller. TS excludes factory floor storage systems (stockers), but includes any short-term storage integral to the system, such as storage locations within an overhead track system that are accessible only to units of the particular TS. 5.2.16 Transport System Controller — interbay or intrabay Transport System Controller that communicates with the Factory Host and represents the system as the equipment. 5.2.17 Transport System Equipment — an individual transport system viewed as a single piece of equipment, with distributed components and distributed control. The TS controller communicates with the host using HSMS and GEM and represents the system as an equipment. The factory may require more\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology (Part 5)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 5  Terminology\n\nContent: than one type of transport system. 5.2.18 transport unit — a physical component of a transport system, such as a vehicle, node, or docking unit.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 6  Communication Requirements\n\n6.1  It is required that any IBSEM compliant equipment follow the Communications State Model in SEMI E30. In addition, IBSEM compliant equipment shall support either the High-speed SECS Message Services Single-Session Mode (SEMI E37 and SEMI E37.1, HSMS and HSMS-SS) communication standard or SEMI Equipment Communications Standard 1 Message Transfer (SEMI E4, SECS-I) communication standard.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.1  State Model Requirements (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.1  State Model Requirements\n\nContent: 7.1.1 The state models included in this standard are a requirement for IBSEM equipment. This standard requires implementation of all SEMI E30 state models (such as control, communication, on-line/off-line, etc. according to the GEM capabilities required per $\\ S 1 3$ ). A state model consists of a state model diagram, state definitions, and a state transition table. All state transitions in this standard, unless otherwise specified, shall correspond to collection events. 7.1.2 A state model is the host’s view of the equipment, and does not necessarily describe the internal equipment operation. All IBSEM state model transitions shall be mapped into the appropriate internal equipment events that satisfy the requirements of those transitions. In certain implementations, the equipment may enter a state and have already satisfied all of the conditions required by the IBSEM state model for transition to another state. The equipment makes the required transition without any additional actions in this situation. 7.1.3 Some\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.1  State Model Requirements (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.1  State Model Requirements\n\nContent: equipment may need to include additional substates other than those in this standard. Additional substates may be added, but shall not change the IBSEM defined state transitions. All expected transitions between IBSEM states shall occur.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.1  TSC State Model Requirements\n\n7.2.1.1  The purpose of the Transport System state model is to provide information to the host regarding the overall status of the Transport System. The TSC state model is valid when the SEMI E30 (GEM) state is ON-LINE. The TSC state model is not valid when the SEMI E30 (GEM) state is OFF-LINE. Since a transport system may consist of many components (e.g., vehicle, robot arm, ID reader, etc.), it may be possible to continue ON-LINE operation when the operation mode of some transport components (as viewed by the TSC) is a manual state. The details of what happens when individual components of the transport system enter a manual state are specific to the IBSEM equipment supplier. When the SEMI E30 Control state changes from OFF-LINE to ON-LINE, the TSC State Model is started from the TSC INIT state.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.3  TSC State Definitions (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.3  TSC State Definitions\n\nContent: 7.2.3.1 TSC INIT — TSC initialization of TS components is occurring. This is a non-operational state. No commands from the host will be processed or queued. The system will not move out of this state if there are vehicles actively loading or unloading carriers at ports. These vehicles must be manually or automatically recovered before moving on to the next state. 7.2.3.2 PAUSING — A system PAUSE command has been received and is being processed. All vehicles that are currently loading or unloading will continue until the load/unload is complete. Vehicles that are currently moving may continue to move but they must not begin a load or unload. TRANSFER commands are accepted and queued. All status requests will be processed. The RESUME command will also be processed. 7.2.3.3 PAUSED — No vehicles are in the process of loading or unloading a carrier at a port, but vehicles may still be moving. TRANSFER commands are accepted and queued. All status requests will be processed. The RESUME command will also be processed. 7.2.3.4\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.3  TSC State Definitions (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.3  TSC State Definitions\n\nContent: AUTO — System is in the normal operational state. Commands are actively processed. 7.2.3.5 NO ALARMS — There are no alarms present in the system. 7.2.3.6 ALARMS — There are one or more alarms present in the system, but the TSC is still capable of normal processing since several components may remain unaffected by the alarm situation.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.2.4  TSC State Transition Table\n\nTable 1  TSC State Transition Table\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.1  TRANSFER Command State Model Requirements\n\n7.3.1.1  The TRANSFER command state model serves as the SEMI E30 Processing State Model.  The purpose of the TRANSFER command state model is to provide information to the host regarding the control of the TRANSFER command.  The TRANSFER command allows the host to manage interbay or intrabay delivery and scheduling.  The control of each TRANSFER command must independently support the TRANSFER command state model.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.2  TRANSFER Command State Model Diagram\n\n7.3.2.1  The TRANSFER command state model is detailed for IBSEM equipment in Figure 3.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.3  TRANSFER Command State Definitions (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.3  TRANSFER Command State Definitions\n\nContent: 7.3.3.1 NOT ACTIVE — The transfer unit is not involved in the physical aspect of the TRANSFER command. It is denoted by the time spanned by the queuing of the TRANSFER command to the moment just prior to the acquire of the first carrier in the transfer unit. 7.3.3.2 QUEUED (NOT ACTIVE sub-state) — TSC has acknowledged and queued the TRANSFER command. TRANSFER command has not been initiated. 7.3.3.3 WAITING (NOT ACTIVE sub-state) — TRANSFER command has been initiated. A vehicle is on its way to the source location to acquire the transfer unit. 7.3.3.4 ACTIVE — The transfer unit is involved in the physical aspect of the TRANSFER command. It is denoted by the time spanned by the acquire of the first carrier in the transfer unit to the deposit of the last carrier in the transfer unit. 7.3.3.5 TRANSFERRING (ACTIVE sub-state) — The transfer command is actively being executed by the transport equipment. 7.3.3.6 PAUSED (ACTIVE sub-state) — The transfer command is not actively being executed by the transport\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.3  TRANSFER Command State Definitions (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.3.3  TRANSFER Command State Definitions\n\nContent: equipment. 7.3.3.7 CANCELING — The TRANSFER command cancel procedure is being performed to terminate a transfer command which never entered the ACTIVE state (either QUEUED or WAITING). This state is entered via a CANCEL remote command. 7.3.3.8 ABORTING — The TRANSFER command abort procedure is being performed to terminate a transfer command which has entered the ACTIVE state. This state can only be entered via an ABORT remote command.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.1  Vehicle State Model Requirements\n\n7.4.1.1  The purpose of the vehicle state model is to provide information to the host for use of transport vehicle information and metric tracking (i.e., the Host will not control vehicles).  Each vehicle must individually comply with the vehicle state model.  Implementation of this state model, along with associated events and variables, is not a requirement for Transport Systems which do not have vehicles.  An example of such a Transport System is a DWC. The Host should not be dependent on any events from the vehicle state model.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.3  Vehicle State Definitions (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.3  Vehicle State Definitions\n\nContent: 7.4.3.1 INSTALLED — The vehicle is available or being used for TRANSFER commands. All enabled collection events and alarms will be sent to the Host for vehicles in this state. 7.4.3.2 REMOVED — The vehicle is not available for Host initiated TRANSFER commands. No collection events or alarms will be sent to the Host for vehicles in this state. 7.4.3.3 ASSIGNED (INSTALLED sub-state) — Vehicle is allocated to a TRANSFER command. 7.4.3.4 NOT ASSIGNED (INSTALLED sub-state) — Vehicle is not allocated to a TRANSFER command. The vehicle may contain a carrier as the result of a command being aborted. 7.4.3.5 ENROUTE (ASSIGNED sub-state) — The vehicle is on its way to a transfer port. This is the default entry into the ASSIGNED state since it must be entered for the host to track vehicle metrics completely and adequately. 7.4.3.6 PARKED (ASSIGNED sub-state) — This state occurs when the vehicle is in the following conditions: • After the arrival of the vehicle is completed and before the action of the transfer agent is\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.3  Vehicle State Definitions (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.3  Vehicle State Definitions\n\nContent: started. • After the action of the transfer agent has completed and before the departure of the vehicle. • After continuous actions of the transfer agent (e.g., acquire/acquire and deposit/deposit) are completed. 7.4.3.7 ACQUIRING (ASSIGNED sub-state) — The vehicle is currently involved in carrier acquire (one or more carriers possible depending on vehicle limitations). 7.4.3.8 DEPOSITING (ASSIGNED sub-state) — The vehicle is currently involved in carrier deposit (one or more carriers possible depending on vehicle limitations).\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.4.4  Vehicle State Transition Table\n\nTable 3  Vehicle State Transition Table\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.5.1  IBSEM Carrier State Model Requirements\n\n7.5.1.1  The purpose of the carrier state model is to provide information to the host regarding carrier tracking (the Host will not control carriers). Each carrier must comply with the carrier state model.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.5.2  IBSEM Carrier State Model\n\nGeneric IBSEM Carrier State Model Diagram\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.5.3  Carrier State Definitions\n\n7.5.3.1  INSTALLED — The carrier is in the physical domain of the TSC.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.5.4  Carrier State Transition Table\n\nTable 4  Carrier State Transition Table\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.6.1  Port Transfer State Model Requirements\n\n7.6.1.1  The purpose of the port transfer state model is to provided information to the host for the use in accessing ports.  This may permit the host and stocker to utilize ports that are in service while avoiding the use of ports that are not in service.\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.6.3  Port Transfer State Definitions (Part 1)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.6.3  Port Transfer State Definitions\n\nContent: 7.6.3.1 OUT OF SERVICE — Transfer to/from this port is disabled and the port should not be used in any Transfer command issued by the host. If a command is issued by the host which uses this port, it will not be rejected simply because the port is in this state. 7.6.3.2 IN SERVICE — Transfer to/from this port is enabled. 7.6.3.3 The following are optional sub-states of the IN SERVICE state to provide information to the host for the use in accessing ports. The information is generally obtained by the TSC via a low-level interface with the connected equipment. The connected equipment should generally, though not required, follow the Load Port Transfer State Model defined in SEMI E87. If these states are implemented, they are not required for every port. 7.6.3.3.1 TRANSFER BLOCKED — The state is neither READY TO LOAD nor READY TO UNLOAD. 7.6.3.3.2 READY TO LOAD — The port is able to accept (be loaded with) a carrier from the IBSEM equipment. 7.6.3.3.3 READY TO UNLOAD — The port is able to have a carrier removed\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.6.3  Port Transfer State Definitions (Part 2)\n\nTitle: SEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 7.6.3  Port Transfer State Definitions\n\nContent: (unloaded) by the IBSEM equipment 7.6.4 Port Transfer State Transition Table Table 5 Port Transfer State Transition Table\n\nSEMI E82-0705 SPECIFICATION FOR INTERBAY/INTRABAY AMHS SEM (IBSEM) - # 8  Collection Event List\n\n8.1  This section identifies data collection events and defines (Stream 6) suggested associated variable data items. The host can use the report definition scenario defined in SEMI E30 to define reports at IBSEM defined levels.  The intent of this section is to demonstrate that certain suggested data is available at specific events.",
  "images": []
}