[
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.4  CancelReservationAtPort",
    "content": "18.5.4.1  The CancelReservationAtPort service is sent by the host to cancel a reservation at the load port.  The load port will enter the UNRESERVED State after receiving this service.  A Port reserved by the physical initiation of a pod out operation may not be cancelled by this service."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.5  CancelReticleTransferJob",
    "content": "18.5.5.1  The CancelReticleTransferJob is sent by the host to cancel a previous ReticleTransferJob service.  \nTable 40  CancelReticleTransferJob Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.6  Clamp",
    "content": "18.5.6.1  The Clamp service is used by the host if the equipment has separate mechanisms for clamping the carrier that are independent of opening the carrier.  It is used to instruct equipment to engage the independent clamping mechanism.  It is used by the host when “macro” instructions such as provided by Bind, PodNotification, ProceedWithPod and ReticleTransferJob have not been provided.  \nTable 41  Clamp Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.7  Close Pod",
    "content": "18.5.7.1  The ClosePod service is used by the host to request the equipment close a pod.  \nTable 42  ClosePod Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.8  IndexDown",
    "content": "18.5.8.1  The IndexDown service is sent by the host to indicate that the equipment should index the reticle cassette to the position where reticle may be removed from the cassette when it is safe for equipment, personnel, and reticles to do so.  \nTable 43  IndexDown Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.9  IndexUp",
    "content": "18.5.9.1  The IndexUp service is sent by the host to indicate that the equipment should index the reticle cassette to the position where the reticle pod may be removed from the equipment when it is safe for equipment, personnel, and reticles to do so.  This service is optional.  \nTable 44  IndexUp Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.10  MoveReticle",
    "content": "18.5.10.1  The MoveReticle service is used to move reticles from one reticle location to another.  This can include moving a reticle from a reticle pod location (external to a tool) to an internal reticle library, ReticleID read location, process location, or a different reticle pod location or from an internal location to another internal location or to a reticle pod location.  \nTable 45  MoveReticle Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.11  OpenPod",
    "content": "18.5.11.1  The OpenPod service is used by the host to request the equipment open a pod  \nTable 46  OpenPod Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.12  PodIn",
    "content": "18.5.12.1  The PodIn service is only used to request the internal buffer equipment internalize a carrier that has been moved to the load port via a previous PodOut service.  When using host based verification, the production equipment shall move the pod in to the internal buffer for the first time after receiving the ProceedWithPod request. If the PodIn service is received by the production equipment without previously having received a PodOut service for the carrier, the service will be refused.  \nTable 47  PodIn Service Parameter Definitions  \n18.5.13  PodOut ⎯ The PodOut service is sent to internal buffer production equipment, to request that the equipment move the specified carrier to a load port, as soon as the carrier is completed.  When the CarrierOut service is started, the destination load port state becomes TRANSFER BLOCKED, and the load port’s association state becomes ASSOCIATED."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.13.1  PodOut Queuing",
    "content": "18.5.13.1.1  This service request can be queued by the production equipment.  The production equipment is required to support a queue of n size, where n is equal to the sum of the number of internal buffer locations and the number of internal FIMS ports.  The order of the queue is FIFO for each load port.  If the load port is not specified in service request, the equipment chooses which load port queue to place the PodOut service.  The queued service does not take effect until the current substrate handling action is complete (i.e., filling, emptying of the pod) and the load port is in the NOT ASSOCIATED state.  When a PodOut service is queued and the production equipment load port is currently in the TRANSFER BLOCKED state, the production equipment shall keep the load port in the TRANSFER BLOCKED state.  Then, after the port is cleared, the PodOut service shall begin.  \nTable 48  PodOut Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.14  PodRelease",
    "content": "18.5.14.1  PodRelease request is used to tell the equipment that the pod is ready to be moved away from the read or write position.  Equipment shall deny the request if LocationID and PodID are mismatched.  ReticlePodLocationID is a ReticlePod attribute.  \nTable 49  PodRelease Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.15  PodTagReadData",
    "content": "18.5.15.1  PodTagReadData is used to request a block of data from the PodID tag.  Equipment shall deny the request if LocationID and PodID are mismatched.  \nTable 50  PodTagReadData Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.16  PodTagWriteData",
    "content": "18.5.16.1  PodTagWriteData is used to request that a block of data be written to the PodID tag.  Equipment shall deny the request if LocationID and PodID are mismatched.  \nTable 51  PodTagWriteData Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.17  Re-QualifyReticle",
    "content": "18.5.17.1  The Re-QualifyReticle service is sent by the host to indicate that a reticle should be re-qualified.  \nTable 52  Re-QualifyReticle Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.18  ReserveAtPort",
    "content": "18.5.18.1  The ReserveAtPort service is sent by the host to indicate future activity at the load port.  This allows for reserving the port but doing host based ID verification.  The load port will enter the RESERVED State after receiving this service.  \nTable 53  ReserveAtPort Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.19  ReticleTransferJob",
    "content": "18.5.19.1  The ReticleTransferJob service is sent by the host to inform the equipment of the expected arrival of a reticle pod to a reticle pod load port and/or the expected departure of a reticle pod.  The equipment should create an association between the reticle pod and reticle load port.  The equipment should transition the load port reservation state model to RESERVED.  The ReticleTransferJob service is also used by the host to inform the equipment which reticles contained in the reticle pod should be removed and placed in the equipment.  Lastly the ReticleTransferJob service is used by the host to inform the equipment which reticles contained in the equipment should be removed from the equipment and placed in the reticle pod.  This service is optional.  \nTable 54  ReticleTransferJob Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 18.5.20  Unclamp",
    "content": "18.5.20.1  The Unclamp service is used by the host if the equipment has separate mechanisms for unclamping the carrier that are independent of opening the carrier.  It is used to instruct equipment to disengage the independent clamping mechanism.  It is used by the host when “macro” instructions such as provided by Bind, PodNotification, ProceedWithPod and ReticleTransferJob have not been provided by the host.  \nTable 55  Unclamp Service Parameter Definitions"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 19  Pod Tag Read/Write (Part 1)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 19  Pod Tag Read/Write\n\nContent: 19.1 Some technologies allow data to be stored on a PodID tag where it can be subsequently read and/or modified. In one case the equipment can write information to the PodID tag. For example, the equipment will have knowledge of the ReticleID of a reticle placed in a pod. At this time the equipment may write the ReticleID on the PodID tag. In another case, it is the host that specifies when this data is written and read, because the equipment has no knowledge of the contents of the data. The read operations shall be performed only when the pod is at the read position. The write operations shall be performed only when the pod is at the write position. NOTE 2: The read and write positions may be the same position. The host shall be able to both read and write whenever PodHold switch is set to Host Release and the pod is at the respective read or write position. Once the host has completed all of its read and write operations for that pod, then the host sends the PodRelease request to the equipment. The PodRelease service"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 19  Pod Tag Read/Write (Part 2)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 19  Pod Tag Read/Write\n\nContent: informs the equipment that pod read or pod write is complete. The PodRelease service has a different purpose from the PodOut service. The intent of the PodOut service request is to move the pod to a load port, while the intent of the PodRelease service request is to inform equipment that it may move the pod away from the read or write position. Therefore, PodOut may also be used with the PodRelease command. If PodHold is Host Release, then the pod shall be kept at the write position until an PodRelease service request is received, regardless of when a PodOut is sent. If PodHold is set to Equipment Release, then the PodRelease request has no effect."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 20  Additional Events",
    "content": "20.1  This section identifies data collection events that are not related to State transitions for variable data items. The intent of this section is to ensure certain data is available for specific events that are not related to state transitions, not to define all the additional collection events for RPMS.  Also, all state transitions in RPMS state models are required to have associated event reports."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 20.2  Buffer Capacity Changed Event (Part 1)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 20.2  Buffer Capacity Changed Event\n\nContent: 20.2.1 An event shall be generated whenever Buffer Capacity changes. This applies to all internal buffers and internal buffer partitions. 20.2.2 Data required to be available for this event report: BufferPartitionInfo 20.3 Pod Closed Event 20.3.1 If the pod is equipped with a door, an event shall be generated when a pod door has been closed. 20.3.2 Data required to be available for this event report: PodID, LocationID, and PortID (if valid). 20.4 Pod Location Change Event 20.4.1 An event shall be generated whenever a pod has changed location. This applies to both load ports, substrate ports, and internal buffer locations. 20.4.2 Data required to be available for this event report: PodID, LocationID (new destination location), and PodLocationMatrix. 20.5 Pod Opened Event 20.5.1 If the pod is equipped with a door, an event shall be generated when a pod door has been opened. 20.5.2 Data required to be available for this event report: PodID, LocationID, and PortID (if valid). 20.6 PodID Read Fail Event 20.6.1 An"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 20.2  Buffer Capacity Changed Event (Part 2)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 20.2  Buffer Capacity Changed Event\n\nContent: event shall be generated when the equipment attempts to read a PodID and fails at a port in the NOT ASSOCIATED STATE. 20.6.2 Data required to be available for this event report: PortID 20.7 ID Reader Unavailable Event 20.7.1 An event shall be generated whenever an id reader becomes unavailable for any reason. This applies to all load ports. 20.7.2 Data required to be available for this event report: Port ID 20.8 ID Reader Available Event 20.8.1 An event shall be generated whenever an id reader becomes available. This applies to all load ports. 20.8.2 Data required to be available for this event report: Port ID 20.9 Reticle Usage Warning Limit Event 20.9.1 An Event shall be generated whenever a reticle is nearing the configurable limits of usage 20.9.2 Data required to be available for this event ReticleID 20.10 ReticleTransferJob Complete Event 20.10.1 An event shall be generated whenever a ReticleTransferJob completes. 20.10.2 Data required to available for this event: PodID"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 21  Variable Data",
    "content": "21.1  The purpose of this section is to define the list of variable data requirements for RPMS equipment.  Values of these variables are available to the host via collection event reports and host status queries.  Some of the data items listed are valid for internal buffer production equipment only, and are marked as such."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 21.2  Variable Data Definitions",
    "content": "21.2.1  The following table defines variable data that shall be provided by the production equipment.  Also, for the objects defined by Reticle and Pod Management, the identifier of that object and all of the attributes of that object shall be available for inclusion in event reports associated with that object.  Subscripted variables are used either as items within a list or to differentiate data representing different entities.  Subscripted variables are always valid.  \nTable 56  Variable Data Definitions  \n#1  These are defined in the Alarm Information table. #2  For all the variables defined as lists of port information (such as states), the port information should be placed in the list in numerical order by PortID, from lowest to highest."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 22  Alarms",
    "content": "22.1  This section includes specific alarms that are required to be implemented by RPMS compliant equipment."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 22.2  Alarm List Table",
    "content": "22.2.1  Table 57 is a listing of required alarms for both fixed buffer and internal buffer equipment.  This list is only a subset of the pod transfer alarms.  There may be more pod transfer related alarms that are not listed here."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 22.3  Alarm Usage",
    "content": "22.3.1  Reticle and Pod Management requires standardization on the alarm codes.  Many errors may be mapped to a sinlge “generic” alarm code.  In this case, the recovery scenario would be the same but the alarm text shall contain a more descriptive explanation of the error.  For example, the Pod Open/Close alarm can be caused by many different opener errors.  \n22.3.2  This alarm applies to both Fixed and Internal Pod Buffer Equipment.  \n22.3.3  For any load port Alarm condition, process equipment should not stop processing current jobs."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 22.4  Duplicate PodID at Production Equipment",
    "content": "22.4.1  If the equipment receives a pod with a PodID that is the same as that of another pod present at the equipment, the following rules shall apply:  \n1. The second pod with a PodID shall not be processed.  \n2. If processing on the first pod with the PodID has not begun, it should not be processed.  \n3. If processing on the first pod has begun a Duplicate PodID In Process event shall be issued to notify the host."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 23  Reticle and Pod Management Equipment Constants",
    "content": "23.1  Reticle ID Verification Constant — Reticle ID verification may or may not be required by IC makers.  To facilitate common implementation across reticle handling tools, an equipment constant (ECV) called ReticleIDVerification (RIV) is required.  The values of this constant are Boolean.  If true, ID verification is required. Verification is provided by the equipment if the reticle is instantiated (by service) prior to reticle ID read. Verification is provided by the Host or an operator if the reticle not instantiated at the time of reticle ID read.  If false, ID verification is not required.  \n23.2  Particle inspection may or may not be required by IC makers.  To facilitate common implementation across reticle handling tools, an equipment constant call ReticleParticleInspection (RPI) is required.  The values of this constant are Boolean.  If true, particle inspection is required.  If false, no particle inspection is required."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # 24  Requirements for Compliance",
    "content": "24.1  Table 59 provides a checklist for RPMS compliance."
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # APPENDIX 1 APPLICATION NOTES (Part 1)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # APPENDIX 1 APPLICATION NOTES\n\nContent: NOTICE: The material in this appendix is an official part of SEMI E109 and was approved by full letter ballot procedures. A1-1 This is a place holder for the description of when the Alarms can be cleared. NOTICE:. SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this"
  },
  {
    "title": "SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # APPENDIX 1 APPLICATION NOTES (Part 2)",
    "content": "Title: SEMI E109-0305SPECIFICATION FOR RETICLE AND POD MANAGEMENT (RPMS) - # APPENDIX 1 APPLICATION NOTES\n\nContent: standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS)",
    "content": "This specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee.  Current edition approved by the North American Facilities Committee on March 14, 2004.  Initially available at www.semi.org  May 2004; to be published July 2004.  Originally published March 2002; previously published November 2002."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 1  Purpose",
    "content": "1.1  This document maps the services of SEMI E109 to SECS-II streams and functions.  This document also maps the data of SEMI E109 to E5 data definitions."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 2  Scope",
    "content": "2.1  This is a provisional standard that covers host and equipment communication for equipment that handle reticles. This includes equipment that handle reticles both inside and outside of a reticle pod. The provisional status is required because of the immaturity of implementations of integrated equipment with Automated Material Handling Systems (AMHS) or Automated Reticle Handling Systems (ARHS). Additional specifications may be defined to add further functionality. Also, further exception handling and error recovery scenarios need to be defined.  \n2.2  This document applies to all implementations of SEMI E109 that use SECS-II message protocol (SEMI E5).  Compliance to this standard requires compliance to both SEMI E109 and SEMI E5.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 3  Limitations",
    "content": "3.1  This standard applies to semiconductor equipment that handles reticles and reticle carriers. This standard is intended to be used for lithography production, bare reticle storage, and reticle inspection equipment. It may or may not be applied to other types of equipment."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 4.1  SEMI  Standards",
    "content": "SEMI E5 — SEMI Equipment Communications Standard 2 Message Content (SECS-II)  \nSEMI E39.1 — SECS-II Protocol for Object Services Standard (OSS)  \nSEMI E109 — Provisional Specification for Reticle and Pod Management (RPMS)  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 5  Services Mapping",
    "content": "5.1  This sections shows the specific SECS-II streams and functions that shall be used for SECS-II implementations of the services defined in SEMI E109, as well as the parameter mapping for data attached to services."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 5.2  Services Message Mapping",
    "content": "5.2.1  Table 1 defines the relationships between SEMI E109 services and SECS-II messages.  \nTable 1  Service Message Mapping"
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 5.3  Services Parameter Mapping",
    "content": "5.3.1  Table 2 maps the SEMI E109 service parameters to SECS-II Data Items.  \nNOTE 1:  Use of parameters not specified for a given message in SEMI E109 is prohibited.  SECS-II data items not used for a given message shall be sent as zero length items."
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 5.4  Object Service Parameter Mapping",
    "content": "5.4.1  Table 3 maps the SEMI E109 service parameters that use S14F19 to SECS-II data items.  \nTable 3  Object Service Parameters for SECS-II"
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 5.5  SECS-II Data Items without Corresponding E109 Parameters",
    "content": "5.5.1  Table 4 contains the SECS-II data items that do not correspond to SEMI E109 service parameters.  \nTable 4  Additional Data Item Requirements Table"
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 6  Variable Data Item Mapping (Part 1)",
    "content": "Title: SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 6  Variable Data Item Mapping\n\nContent: 6.1 This sections shows the specific SECS-II data classes, and formats needed for the SECS-II implementation of SEMI E109 data items. Table 5 Variable Data Item Mapping Table Table 6 Reticle Pod Object Attribute Definitions Table 7 Reticle Object Attribute Definition NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer' s instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this"
  },
  {
    "title": "SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 6  Variable Data Item Mapping (Part 2)",
    "content": "Title: SEMI E109.1-0704 PROVISIONAL SPECIFICATION FOR SECS-II PROTOCOL FOR RETICLE AND POD MANAGEMENT (RPMS) - # 6  Variable Data Item Mapping\n\nContent: standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM)",
    "content": "This specification was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org June 2005 and on CD-ROM in July 2005.  Originally published March 2003; previously November 2004."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 1  Purpose",
    "content": "1.1  The purpose of this specification is to provide a generally applicable object model of semiconductor equipment structure.  This object model is intended to be used in the following ways:  \n• As a guide to equipment suppliers on how to represent the external view of their equipment to the factory host.\n• As a base model to be used and extended by other SEMI equipment communication standards.\n• As a reference for the creation of technology-specific object model definitions, such as XML schema."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 2  Scope",
    "content": "2.1  This specification provides a common set of constructs that can be used by the equipment manufacturer to model their equipment structure.  \n2.2  This specification defines the classes, attributes, relationships, and other detail appropriate for the model of an equipment’s structure as viewed by a factory host application through the available communication interfaces.  \n2.3  The model contained in this specification documents features of the equipment structure considered necessary for more than one (current or future) equipment communication standards.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 3  Limitations",
    "content": "3.1  This specification does not define “object diagrams” (that is, instances) of equipment.  These are the responsibility of the equipment supplier to define in conformance with the model.\n3.2  This specification does not define the behavior of objects/classes.  Behavior definition of classes defined in this specification is left to other equipment communication standards.\n3.3  This specification does not define any specific messaging between equipment and factory host.  It is expected that communication related to the Common Equipment Model will be defined by other standards.\n3.4  This specification addresses only the host view of the equipment.  No other part of the factory is modeled by this document."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 4  Referenced Standards and Documents",
    "content": "uuid: ISO/IEC 11578:1996 Information technology - Open Systems Interconnection — Remote Procedure Call (RPC), http://www.iso.ch/cate/d2229.htm.  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Terminology",
    "content": "5.1  Abbreviations and Acronyms  \n5.1.1  CEM — Common Equipment Model"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.2  Definitions",
    "content": "5.2.1  UML terms used in this document conform to definitions in the Glossary of Terms of the OMG specification of UML (referenced above).  Related Information, $\\ S \\mathbf { R } \\mathbf { l }$ , contains selected definitions from that Glossary of Terms.  \n5.2.2  Definitions or descriptions of many of the terms used in this specification can be found in the SEMI Compilation of Terms, available on the SEMI web site, http://www.semi.org/.  \n5.2.3  When terms from the above two sources conflict, the definition from the OMG UML specification takes precedence in this specification."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions\n\nContent: 6.1 This section defines conventions followed in this document. 6.2 Object Modeling 6.2.1 Unified Modeling Language (UML) — This specification uses UML notation for all class diagrams and for object diagrams provided as examples. No other types of diagrams are used in this specification. 6.2.1.1 UML class diagrams have clearly defined meaning and are a part of this specification. Detail contained in these diagrams is not always repeated in the text. 6.2.2 Behavior Not Defined — This specification, defines classes, their relationships, and attributes. No behavior is specified either in the form of UML state, activity, sequence diagrams, or in the form of operations definitions. 6.2.3 Name of a Class — The text capitalizes class names. 6.2.4 Abstract and Concrete Classes — Each class is specified as Abstract or Concrete. Abstract classes are not directly implemented. In this specification “implemented” means represented to the factory through the communications interface. All classes defined as concrete may be directly implemented."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions\n\nContent: This specification does not attempt to define equipment control system implementation. In UML class diagrams, abstract class names are shown in italics. 6.2.5 Class Attribute Definition — The attributes of a class are defined in table format as illustrated by Table 1 below. Note that the $\" + \"$ sign in front of attributes in UML class diagrams indicates “public” attributes. All attributes defined in this specification are public. Table 1 Attribute Table Format 6.2.5.1 Access — Attributes may be settable (ReadWrite or RW) or not settable (ReadOnly or RO) through an interface to the equipment. 6.2.5.2 Reqd — Is this attribute required? Y – Yes, or $\\Nu - \\Nu _ { 0 }$ . 6.2.5.3 Form — Defines the data type of the attribute. Data types specified in the Common Equipment Model specification are described in the subsections that follow. Data types in this specification are high-level definitions and should be mapped to the data types of a specific technology as appropriate. Extensions to the Common Equipment Model are not limited to the"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions (Part 3)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  Conventions\n\nContent: list of data types defined in this specification. See the definition of “Form” in the SEMI Compilation of Terms for other Form values commonly used in SEMI documents. 6.2.5.3.1 Enumeration — A list of named values used as the range of a particular attribute type. In this document, these values are represented as text strings, but may be implemented differently (e.g. as integers that correspond to the named values). 6.2.5.3.2 String — A text string. Limitations on length are left to the implementation technology unless otherwis specified in this document. 6.2.5.3.3 List of xxx — An item that can hold multiple instances of a specified type (where xxx is the data type)."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.6  Constraints",
    "content": "6.2.6.1  Constraints in UML are shown with dotted lines, typically with a note attached to explain the constraint. Constraints shown in this way tend to clutter large UML diagrams.  Therefore, in this specification, constraints are shown only on the diagrams focusing on individual classes."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.7  Association Navigability",
    "content": "6.2.7.1  UML associations include the concept of “Navigability”.  When an association is navigable, the association may be traversed to reach the class instance at the opposite end of the association (target object).  \n6.2.7.2  By default, an association is navigable in both directions.  If an arrowhead is shown on one end of an association, then navigability exists only in that direction.  \n6.2.7.3  From any object, it must be possible to obtain a reference to the target objects of any of its navigable associations.  \n6.2.7.4  The method of referencing the target objects is implementation dependent and is not specified in this document.  \n6.2.7.5  Any implementer or subordinate standards mapping the concepts of this specification to an implementatio method shall specify the means of referencing the target object of an association from the source object."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Model Extension (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Model Extension\n\nContent: 6.3.1 Any concrete class in the CEM model can be extended. Extension is achieved through association. In “extension by association” the new capability is contained in a separate class that is related to the original by an association. In the case of CEM, an “Extension” class has been added to the model (see $\\ P [ 8 . 5 . 3 . 4 )$ along with the needed association. 6.3.2 The Extension class is associated with Nameable, so that any Nameable can have multiple Extensions. The Extension class has no attributes or services and does not itself add anything to the extended CEM class. To have a meaningful extension, a subclass of Extension must be created containing the new features. $6 . 3 . 3 \\mathrm { \\ S o }$ , in order to create an extension to a selected concrete CEM class, a new class would be designed with added features. For instance, it might contain a new attribute. This new class would be designed as a subclass of Extension. Remember that any Nameable can navigate the association to any of its Extensions. Therefore, the"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Model Extension (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Model Extension\n\nContent: new subclass of Extension could be associated with any CEM class. See Figure 1 below for an illustration. The final step is to associate the new Extension subclass to the specific CEM class it is extending. 6.3.4 Most extensions will be designed to work on specific CEM classes. The CEM model does not enforce matching an extension with its intended CEM class. Therefore, the specification of the Extension class must describe its allowed usage. 6.3.5 The scope of CEM is limited to static information about the equipment. However, that limitation does not apply to extensions. So extensions might include static or dynamic attributes as well as links to state models or other complex constructs. An example of an extension that might be added by a supplier is a class containing “manufacturedDate” and “serviceTagNumber” attributes to be applied to an Equipment object."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7  Background",
    "content": "7.1  This specification documents common characteristics of equipment in a single specification that can be referenced and used by other standards.  These other standards are expected to extend the Common Equipment Model to add characteristics unique to that standard.  Thus, this specification attempts to be the core of a single, coordinated object model of the equipment with the full model being a composite of multiple standards."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.2.1  Class Model vs. Instance Model",
    "content": "7.2.1.1  A model showing the specifics about particular equipment is considered an “instance model”.  Each equipment instance model will have its own characteristics based on its function.  No single model can directly describe all such instances.  Instead, the class model contained in this specification defines the classes to be used to describe the equipment’s structure and how they shall relate to one another.  The instance model of the equipment is to be provided by the equipment supplier as specified by the CEM class model."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.2.2  Model Extensibility",
    "content": "7.2.2.1  The Common Equipment Model is intended to be extensible (within defined limits). $\\ P [ 6 . 3$ describes acceptable ways to extend the model.  \n7.2.2.2  The instance model of the equipment shall thus be constructed by the equipment supplier based on  \nthe classes defined in this document,\nextensions to this model defined in other SEMI standards, and extensions to the standardized model made by the supplier to address unique equipment characteristics.  \n7.2.3  External View — Not Equipment Design  \n7.2.3.1  There is no expectation that equipment suppliers will use the model specified in this document as the basis for the design of their equipment.  The CEM is intended to provide a structure to promote clear communication.  It needs to provide an unambiguous view to the factory host that is representative of the equipment and meets the needs of the host."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.2.4  Communication Not Defined",
    "content": "7.2.4.1  This specification leaves to other SEMI standards the definition of how the Common Equipment Model will be communicated (in whole or in part) between the equipment and the factory host.  It is to be expected that there will be many uses for the model and the details of communication are best defined in context with planned use."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.2.5  Behavior Not Defined",
    "content": "7.2.5.1  In order to keep the model simple, this document does not define behavior of classes in the CEM.  Class behavior is related to function, and thus to functionality supplied by the equipment interface.  This functionality and behavior is left to other SEMI standards to define."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.2.6  Applicability",
    "content": "7.2.6.1  Though the CEM attempts to address all semiconductor related factory equipment, it is recognized that this may not be possible.  The CEM covers only manufacturing equipment (i.e. equipment that perform their function on material—e.g. no independent environmental monitoring systems, etc.).  The vast majority of semiconductor factory equipment should be able to comply with this specification."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.3  Uses For The CEM (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.3  Uses For The CEM\n\nContent: 7.3.1 In order to understand the CEM, it is necessary to understand expected uses of the model. While it is not possible to anticipate every possible use, the following list presents several expected uses that may be defined by other standards. 7.3.2 Equipment Self-Description Using Metadata — An important consideration for the integration of semiconductor equipment into the factory is the ease with which the equipment’s structure and capabilities can be understood and translated into functioning software. With traditional semiconductor communication technologies this is achieved by first reading the equipment supplier’s communication manual and then configuring or coding factory software to match the documentation. Unfortunately, manuals are too often incomplete or out of date. If the equipment can provide its instance model (and the extended class model on which it is based) to the host, it is more likely to be complete and accurate. If it can construct that model in real-time, based on its current hardware configuration it"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.3  Uses For The CEM (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7.3  Uses For The CEM\n\nContent: will be more accurate. This self-descriptive data is also known as “metadata”. 7.3.3 Relation Of Data To The Equipment — Data gathered from equipment gains greater meaning if it is clear as to what part of the equipment it pertains and what related data items provide context information. The instance model can be a reference in the definition of the data collection plans and reflected by actual data collected. 7.3.4 Relation Of Parameters & Setting To The Equipment — Proper and predictable control of equipment is possible only if the effects of all available parameters and settings is understood. These must be related to the equipment and to the measurable values that they affect. This information can be provided by the instance model. 7.3.5 Understanding Equipment Capabilities — The process capabilities of equipment depend on the modules present and the characteristics and status of those modules. In some situations, the hardware configuration of equipment can change on a regular basis."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8  Common Equipment Model Definition (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8  Common Equipment Model Definition\n\nContent: 8.1 This section documents the Common Equipment Model. 8.2 Overview 8.2.1 Documentation of the Common Equipment Model begins with system views of the model and moves to detailed descriptions of the classes with their attributes and relationships. No behavior is defined—that is, no state models and no methods are described for classes. 8.2.2 It is important to note that the two system views presented are of the same model. They are separated to avoid large, complex diagrams, thus enhancing understandability. 8.2.3 The model shows only classes and their relationships. Actual equipment will have corresponding instance models that define the detail of the equipment as viewed through an equipment interface. Thus, the Common Equipment Model in this document provides rules for constructing the instance model of an equipment. 8.2.4 The Common Equipment Model is represented in two system level views. The first is the inheritance hierarchy that shows which classes inherit characteristics (e.g. attributes and"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8  Common Equipment Model Definition (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8  Common Equipment Model Definition\n\nContent: relationships) from which other classes. The second view represents the relationships among classes to show general equipment structure. These views are described in general terms to highlight important aspects of the model. 8.2.5 Everything in these two views is repeated in subsequent sections dealing with individual classes in the model. In the individual class views, class of interest is shown with all relationships to other classes. No other detail is shown in these views."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.3  Inheritance Hierarchy",
    "content": "8.3.1  The inheritance hierarchy view, Figure 2, shows the superclass/subclass relationships of the Common Equipment Model.  \n8.3.2  Items to note about the inheritance hierarchy view:  \n• Nameable is at the top of the inheritance hierarchy and provides common accessibility to all classes in the Common Equipment Model.\n• Equipment and Modules may be able to process material, but Subsystems cannot.\n• Note that a subclass inherits the attributes of its superclass.  Some subclasses have no additional attributes defined in this specification.  It is anticipated that other standards will extend this model to add attributes, relationships, state models, etc. as equipment behavior is mapped onto this model."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.4  Relationship View",
    "content": "8.4.1  The relationship view is shown in Figure 3.  This view illustrates expected equipment.  Items to note about the relationship view:  \nFlexibility is built into the structure so that, for instance, IODevices may belong directly to almost any level of the equipment structure.\n• Subsystems, Modules, and Equipment may have MaterialLocations (i.e. hold material).\n• Equipment — Equipment aggregation allows Equipment that acts on behalf of other Equipment to describe these Equipment."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5  Class Definitions",
    "content": "8.5.1  Class definitions consist of a brief description of the highlighted class, a class diagram showing the class and all related classes (both from an inheritance and relationship standpoint), a table defining the attributes, and further text as necessary to fully define the class.  \n8.5.2  For clarity, the abstract classes are listed separately from concrete classes."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: 8.5.3.1 Nameable — The root of each class in the CEM class hierarchy. This class provides a means for uniquely identifying each component of the equipment structure. Nameable is a superclass of EquipmentElement and MaterialLocation (see Figure 4). It includes three attributes: uid, name, and description (see Table 2). Nameable is also associated with the class Extension. See $\\ P [ 6 . 3$ for more information on the use of Extension. Table 2 Attributes of Nameable 8.5.3.1.1 uid — The requirements for each uid value are: The uid value shall conform to the rules for constructing a uuid as defined in standard ISO/IEC 11578:1996. The uid shall be a fixed value with respect to the physical hardware and shall be unique among all Nameables. The uid shall remain with the Nameable, even if the Nameable is removed from one equipment and added to another. For example, if an IODevice fails and is removed from an equipment, its replacement will have a different uid. If the original IODevice is repaired and installed on a different"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: equipment, it will retain its original uid. Note that a MaterialLocation is contained within an equipment component and will move with that component, retaining its own uid. 8.5.3.1.2 name — The naming requirements for each Nameable are: • Names shall consist of alphanumeric characters, spaces, hyphens, and underscores. Names shall start with an alpha character, and shall not contain leading or trailing spaces. • The value of the name attribute shall be unique among component parts1 of the same aggregate (object). This restriction holds for a Nameable instance that is aggregated (shared) by more than one object. • If a Nameable represents a class or variable described in a SEMI standard, the name used shall conform to the spelling and case style specified in the standard. If the uniqueness rules can’t be met, the name shall include an appended suffix of the form $\" \\mathrm { \\cdot } \\mathrm { n } ^ { \\mathrm { \\cdot } \\mathrm { \\cdot } }$ , where ‘n’ is a number making the name unique. The name attribute represents the role"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 3)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: or function of the object in the equipment hierarchy. The value of name shall not change unless the physical equipment configuration changes. Upon a configuration change, if a Nameable is replaced in its role and function by a different one, the name value representing that role shall be transferred to the new Nameable. For example, if an IODevice named “TemperatureControlZone5” fails and is replaced with a new unit, that new unit shall be named “TemperatureControlZone5”. 8.5.3.2 EquipmentElement — This abstract class represents the basic information required for each hardware component in the equipment structure (see Figure 7). EquipmentElement includes the attributes: elementType, supplier, make, model, modelRevision, function, and immutableId (see Table 3). It also has a composite aggregation of SoftwareModules. Table 3 Attributes of EquipmentElement 8.5.3.3 ExecutionElement — This abstract class models the parts of the equipment structure capable of processing, measuring, or testing material — Module and Equipment. It"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 4)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: is a subclass of EquipmentElement (see Figure 8). ExecutionElement has the following attributes: processName, processType, and recipeType (defined in Table 4). Table 4 Attributes of ExecutionElement 8.5.3.3.1 The definition of processType lists four enumerated values. These are described as follows: Measurement — Refers to Equipment or Modules whose intended function is to measure or inspect the product and report results. • Process — Refers to Equipment or Modules whose intended function is to process product by adding value to the product. Storage — Refers to Equipment or Modules whose intended function is primarily to provide storage, either short-term or long-term, for carriers (e.g. stockers). Transport — Refers to Equipment or Modules whose intended function is primarily to move material from one location to another. Transport equipment may also provide short-term storage for material. 8.5.3.4 Extension — This abstract class provides the ability for other SEMI standards and implementers to extend the CEM. Extension"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 5)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: has no superclass and no attributes (see Table 5). It is associated with Nameable (see Figure 9). This association is navigable in both directions so that an Extension can identify the class that it modifies and a Nameable knows its Extensions. 8.5.3.4.1 Extension is modeled to allow extension of any Nameable. However, in practice, only concrete objects that inherit from Nameable shall have extensions. 8.5.3.4.2 As an abstract class, Extension must have a concrete subclass in order to be useful. The definition of subclasses of Extension is left to the implementer and/or other standards to define as extensions to the CEM. See $\\ P [ 6 . 3$ for a discussion of how the Extension class may be used to extend the Common Equipment Model. Table 5 Attributes of Extension 8.5.3.4.3 Since each class in the CEM inherits from Nameable, this extension method applies to the entire CEM. However, for ease of management, this specification limits the extensions. Extensions shall be applied to concrete CEM classes only. 8.5.3.4.4 Any number"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes (Part 6)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.3  Abstract Classes\n\nContent: of subclasses of Extension may be created and thus be available as extensions of CEM classes. No extension shall conflict with or override any feature of the CEM. So, for example, no CEM defined attributes may be redefined as a different type."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes\n\nContent: 8.5.4.1 Equipment — This class models the equipment as a whole. Equipment is a subclass of ExecutionElement (see Figure 10). An Equipment is an aggregate of Modules, Subsystems, and IODevices. It must contain a total of at least one of these components, but may contain zero or more of each. An Equipment that can communicate information about or act on behalf of other Equipment will also model associations with these Equipment2. Equipment defines no additional attributes defined in the Common Equipment Model (see Table 6). 8.5.4.1.1 Figure 10 shows that a Module or Subsystem may belong to more than one Equipment. The case where these components can be shared by multiple Equipment is unusual. An example of this would be where an in-line metrology tool is shared. In most cases, a Module or Subsystem will belong to zero or one Equipment. Table 6 Attributes of Equipment 8.5.4.2 Module — This class models major subsystems of the equipment, such as process chambers. Module is a subclass of ExecutionElement (see Figure 11)."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes\n\nContent: 8.5.4.2.1 A Module is capable of having (zero or more) MaterialLocations and is capable of processing material. A Module or one of its aggregated Subsystem or Module objects must contain at least one MaterialLocation. 8.5.4.2.2 A Module must be a component part of Equipment or another Module and may be shared by multiples of these. It may also be an aggregation of Subsystem, IODevice, and/or other Module instances (zero or more each). 8.5.4.2.3 Module has no additional attributes defined in the Common Equipment Model (see Table 7). Table 7 Attributes of Module 8.5.4.3 Subsystem — This class models subsystem and subassembly components of the equipment (see Figure 12). Subsystem is a subclass of EquipmentElement. 8.5.4.3.1 A Subsystem may be capable of having (zero or more) MaterialLocations, but is not capable of processing material. 8.5.4.3.2 A Subsystem must be a component part of Equipment, Module, or another Subsystem and may be shared by multiples of these. It may also be an aggregation of Subsystem, or IODevice"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes (Part 3)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes\n\nContent: instances (zero or more each). 8.5.4.3.3 Subsystem has no additional attributes defined in the Common Equipment Model (see Table 8). Table 8 Attributes of Subsystem 8.5.4.4 IODevice — This class models sensors, actuators, or intelligent actuator/sensor devices. Suppliers shall model this EquipmentElement on equipment if it is practical and useful to do so for the purposes of process control and technical support. IODevice is a subclass of EquipmentElement and is a component part of zero or more Equipment, Subsystem, and/or Module instances (see Figure 13). IODevice has no additional attributes defined in the Common Equipment Model (see Table 9). Table 9 Attributes of IODevice 8.5.4.5 MaterialLocation — This concrete class models the ability of certain equipment components to hold material. MaterialLocation is a subclass of Nameable. The attributes of MaterialLocation class are defined in Table 10. 8.5.4.5.1 A MaterialLocation is exclusively related to a single Equipment, Module, or Subsystem in a composite aggregation (see"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes (Part 4)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes\n\nContent: Figure 14). Each Equipment, Module, and Subsystem may have zero or more MaterialLocations. Equipment, Modules, and Subsystems may also have indirect access to MaterialLocations if they aggregate a component that has a MaterialLocation. So, for instance, a Module may not have a MaterialLocation, but may contain a Subsystem with a MaterialLocation. Table 10 Attributes of MaterialLocation 8.5.4.6 SoftwareModule — This concrete class is used to describe the existence and version of equipment system software that is in use on the equipment and on equipment components. Such software might be supplied by the equipment manufacturer or by third parties. It includes any software that may be changed without affecting the identity of the hardware. This would cover software stored on disk drives, flash memory, eeproms, and other memory devices. This class allows the factory host to track changes in the software. See $\\ P [ 8 . 5 . 3 . 2$ EquipmentElement for the definition of the modelRevision attribute that tracks changes in hardware."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes (Part 5)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8.5.4  Concrete Classes\n\nContent: Tracking hardware and software revisions together allows better detection of changes in the equipment capability. 8.5.4.6.1 The SoftwareModule class is a component of EquipmentElement in a composite aggregation (see Figure 15). It has four attributes: name, supplier, description, and version (see Table 11). In the case where a SoftwareModule affects multiple EquipmentElements, each would contain its own separate SoftwareModule describing the same software. Table 11 Attributes of SoftwareModule"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.1  Introduction (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.1  Introduction\n\nContent: 9.1.1 The E120 specification provides fixed referencing of all Nameable objects by means of the uid attribute. The uid is fixed to a specific hardware entity. Consider a massflow controller that fails and is swapped out with one of the same kind. It is expected that the name attribute of that massflow controller would become the same as the old one, but it is required that the uid be different. Thus, the name is distinctively a “positional reference” that identifies a place or position in the hierarchy. 9.1.2 This section defines a positional reference that is unique within the equipment. This “Locator” value is based on the name attribute of Nameable. It can be used in communications to the equipment to uniquely identify a Nameable object in that equipment. 9.1.3 If the equipment provides a positional reference for an equipment component, the Locator form, as defined in this section, shall be used. 9.1.4 There are some situations where a positional reference to an equipment component is more useful than the fixed reference that"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.1  Introduction (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.1  Introduction\n\nContent: uid provides. For example, a data collection plan might indicate that during processing, the reading from a massflow controller (one kind of Nameable) is to be recorded. At some point, the massflow controller is replaced. If the reference in the specification is to the uid, then the data collection plan no longer works. In a worse case, two identical massflow controllers are removed from similar process modules for maintenance and then replaced on the opposite modules. In this case, the uid reference would yield data from the wrong process module. If a positional reference were used, then the data collection plan would always collect readings from the massflow controller on the specified process module."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.2  Constructing A Locator (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.2  Constructing A Locator\n\nContent: 9.2.1 Values for the Locator string are derived by starting with the name attribute of the root Nameable (usually an Equipment) in the hierarchy followed by the $\\cdot \\boldsymbol { \\mathbf { \\mathit { \\omega } } } _ { \\mathbf { \\mathit { \\varepsilon } } } ,$ character. This is followed by the names of any objects between the root and target (each name separated by the $\\cdot \\boldsymbol { \\mathbf { \\mathit { I } } } ^ { , }$ character). Finally, the name of the target is added. A shorthand notation for this pattern is: “root/aggregate/aggregate/aggregate/target”. Example values for Locator are illustrated by the block diagram in Figure 14. 9.2.2 In the case where an object is shared, there may be more than one Locator that will resolve to that object. The block diagram in Figure 15 gives an example of the Locators that might result. Notice that Object8 is shared by Object6 and Object7. This means that it can be referenced by two different but equally valid Locator values as shown in the diagram. For Nameable instances"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.2  Constructing A Locator (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 9.2  Constructing A Locator\n\nContent: with more than one possible Locator value, any valid Locator construct will resolve to that object. 9.2.3 Note that the Locator value is valuable as a reference to a Nameable. However, that value is not available from the Nameable as an attribute. The Locator can be built independently and used when only the names are known or when the position in the hierarchy is more important than the identity of the equipment component being referenced."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10  Compliance (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10  Compliance\n\nContent: 10.1 This section defines requirements for compliance to this specification. 10.1.1 The term “CEM class” refers generally to any one of the classes defined by this specification. The term “equipment component” refers generally to any part of the equipment that fits the definition of any subclass of EquipmentElement (including Equipment, Module, Subsystem, and IODevice). 10.1.2 Compliance to this specification requires 1. Satisfaction of all requirements listed in Table 12, and 2. Satisfaction of all requirements for each CEM class that has been implemented (as reflected in the corresponding row of Table 13). 10.1.3 The tables below each contain columns labeled “Implemented” and “CEM Compliant”. Each row represents a requirement (or group of requirements). 10.1.4 The “Implemented” column communicates an assertion that the equipment has provided the function or capability that corresponds to the intent of that requirement. This assertion is not testable. However, in order to be “CEM Compliant”, the “Implemented” column would logically"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10  Compliance (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10  Compliance\n\nContent: be set to “yes”. 10.1.5 A row/requirement is considered to be “CEM Compliant” when all defined aspects of that requirement have been satisfied. Therefore, an implementation that is compliant to CEM would have: • All rows of Table 12 marked “yes” for both “Implemented” and “CEM Compliant”, • The “Equipment” row of Table 13 would be marked “yes” for both “Implemented” and “CEM Compliant”, and • Any other rows of Table 13 that are marked “yes” for “Implemented” would also be marked “yes” for CEM Compliant”."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.2  General CEM Compliance Requirements",
    "content": "10.2.1  There are five general CEM compliance requirements.  They are listed in Table 12.  \nTable 12  General CEM Requirement Compliance Table"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.3  Specific Compliance Requirements (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.3  Specific Compliance Requirements\n\nContent: 10.3.1 Table 13 lists each concrete class and references the section where requirements are defined for that class. The requirements are primarily defined by the UML diagram and table of attributes in the referenced section. The text of the section serves to clarify the requirements and add detail where appropriate. 10.3.2 On the UML diagram, note the associations and their cardinality and role specifications. Associations (including aggregations) constitute requirements on a given class if navigable to the target class. (See $\\ P [ 6 . 2 . 7$ for an explanation about Navigability and related requirements). For a navigable association, object(s) of the target class are required. When the cardinality of the target class of the association may be zero, the association and target class may be omitted as appropriate. 10.3.3 In Table 13, the first column represents a CEM concrete class. “CEM Compliance” in this table indicates (1) that at least one instance of that class exists and (2) that all instances of that"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.3  Specific Compliance Requirements (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.3  Specific Compliance Requirements\n\nContent: class meet all requirements for the class. 10.3.4 The “Class/Superclass Definition” column gives a section number reference to each class in the inheritance hierarchy for the concrete class in that row. The requirements for all classes in the inheritance hierarchy apply for this concrete class. 10.3.5 The “Navigable Via Association” column lists the section number for the definition of each class that may be associated with the concrete class in that row. When such an association exists, there must be a CEM Compliant instance of that associated class. If the cardinality of the association may be zero, then the existence of the association is dependent on the equipment structure. Table 13 CEM Class Compliance Table"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 10.4  Compliance Verification Approach",
    "content": "10.4.1  Verification of compliance to SEMI E120 may be accomplished by comparing the objects and their attributes that are reported from the equipment with their class definitions from CEM and with the other requirements listed in this Table 12.  \n10.4.2  Electronic verification requires that all CEM related objects be collected directly from the equipment along with all their attributes.  The method for collection will vary depending on the type of electronic communication available.  Since the CEM classes and their attributes are static, the method and time of collection shall not affect the verification outcome.  \n10.4.3  Once the objects are collected, the set is checked electronically against the requirements defined in Table 12 and Table 13 above.  The process will ensure that the names of all classes and attributes are correct, that any required objects exist and that each instance provides all defined attributes and appropriate associations."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # 11  Related Documents",
    "content": "11.1  Unified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-67, available from http://www.omg.org/technology/documents/modeling_spec_catalog.htm."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # RELATED INFORMATION 1FURTHER BACKGROUND AND JUSTIFICATION",
    "content": "NOTICE:  This Related Information is not an official part of SEMI E120.  This Related Information is not intended to modify or supersede the official standard.  Determination of the suitability of the material is solely the responsibility of the user."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 1)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: R1-1.1 In order to help with understanding terminology used in conjunction with object technology, this section shares excerpts from the glossary of the OMG standard for UML—the predominant modeling notation. Unified Modeling Language (UML) Specification, Version 1.4, OMG Specification 01-09-67, available from http://www.omg.org/technology/documents/modeling_spec_catalog.htm R1-1.2 These definitions are taken from B.2 Glossary of Terms of the above document. R1-1.2.1 abstract class — a class that cannot be directly instantiated. Contrast: concrete class. R1-1.2.2 aggregate [class] — a class that represents the “whole” in an aggregation (whole-part) relationship. See: aggregation. R1-1.2.3 aggregation — a special form of association that specifies a whole-part relationship between the aggregate (whole) and a component part. See: composition. R1-1.2.4 association — the semantic relationship between two or more classifiers that specifies connections among their instances. R1-1.2.5 attribute — a feature within a classifier that"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 2)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: describes a range of values that instances of the classifier may hold. R1-1.2.6 cardinality — the number of elements in a set. Contrast: multiplicity. R1-1.2.7 child — in a generalization relationship, the specialization of another element, the parent. See: subclass, subtype. Contrast: parent. R1-1.2.8 class — a description of a set of objects that share the same attributes, operations, methods, relationships, and semantics. A class may use a set of interfaces to specify collections of operations it provides to its environment. See: interface. R1-1.2.9 classifier — a mechanism that describes behavioral and structural features. Classifiers include interfaces, classes, datatypes, and components. R1-1.2.10 classification — the assignment of an object to a classifier. See dynamic classification, multiple classification and static classification. R1-1.2.11 class diagram — a diagram that shows a collection of declarative (static) model elements, such as classes, types, and their contents and relationships. R1-1.2.12 composition — a"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 3)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: form of aggregation which requires that a part instance be included in at most one composite at a time, and that the composite object is responsible for the creation and destruction of the parts. Composition may be recursive. Synonym: composite aggregation. R1-1.2.13 concrete class — a class that can be directly instantiated. Contrast: abstract class. R1-1.2.14 constraint — a semantic condition or restriction. Certain constraints are predefined in the UML, others may be user defined. R1-1.2.14.1 Constraints are one of three extensibility mechanisms in UML. See: tagged value, stereotype. R1-1.2.15 diagram — a graphical presentation of a collection of model elements, most often rendered as a connected graph of arcs (relationships) and vertices (other model elements). UML supports the following diagrams: class diagram, object diagram, use case diagram, sequence diagram, collaboration diagram, state diagram, activity diagram, component diagram, and deployment diagram. R1-1.2.16 element — an atomic constituent of a model."
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 4)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: R1-1.2.17 feature — a property, like operation or attribute, which is encapsulated within a classifier, such as an interface, a class, or a datatype. R1-1.2.18 generalization — a taxonomic relationship between a more general element and a more specific element. The more specific element is fully consistent with the more general element and contains additional information. An instance of the more specific element may be used where the more general element is allowed. See: inheritance. R1-1.2.19 inheritance — the mechanism by which more specific elements incorporate structure and behavior of more general elements related by behavior. See: generalization. R1-1.2.20 instance — an entity that has unique identity, a set of operations that can be applied to it, and state that stores the effects of the operations. See: object. R1-1.2.21 interface — a named set of operations that characterize the behavior of an element. R1-1.2.22 interface inheritance — the inheritance of the interface of a more general element. Does not include"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 5)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: inheritance of the implementation. Contrast: implementation inheritance. R1-1.2.23 method — the implementation of an operation. It specifies the algorithm or procedure associated with an operation. R1-1.2.24 model [MOF] — an abstraction of a physical system with a certain purpose. See: physical system. Usage note: In the context of the MOF specification, which describes a meta-metamodel, for brevity the metametamodel is frequently to as simply the model. R1-1.2.25 multiplicity — a specification of the range of allowable cardinalities that a set may assume. Multiplicity specifications may be given for roles within associations, parts within composites, repetitions, and other purposes. Essentially a multiplicity is a (possibly infinite) subset of the non-negative integers. Contrast: cardinality. R1-1.2.26 object — an entity with a well-defined boundary and identity that encapsulates state and behavior. State is represented by attributes and relationships, behavior is represented by operations, methods, and state machines. An"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 6)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: object is an instance of a class. See: class, instance. R1-1.2.27 object diagram — a diagram that encompasses objects and their relationships at a point in time. An object diagram may be considered a special case of a class diagram or a collaboration diagram. See: class diagram, collaboration diagram. R1-1.2.28 operation — a service that can be requested from an object to effect behavior. An operation has a signature, which may restrict the actual parameters that are possible. R1-1.2.29 parent — in a generalization relationship, the generalization of another element, the child. See: subclass, subtype. Contrast: child. R1-1.2.30 qualifier — an association attribute or tuple of attributes whose values partition the set of objects related to an object across an association. R1-1.2.31 relationship — a semantic connection among model elements. Examples of relationships include associations and generalizations. R1-1.2.32 role — the named specific behavior of an entity participating in a particular context. A role may be static"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 7)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: (e.g., an association end) or dynamic (e.g., a collaboration role). R1-1.2.33 signature — the name and parameters of a behavioral feature. A signature may include an optional returned parameter. R1-1.2.34 subclass — in a generalization relationship, the specialization of another class; the superclass. See generalization. Contrast: superclass. R1-1.2.35 subtype — in a generalization relationship, the specialization of another type; the supertype. See: generalization. Contrast: supertype. R1-1.2.36 superclass — in a generalization relationship, the generalization of another class; the subclass. See: generalization. Contrast: subclass. R1-1.2.37 supertype — in a generalization relationship, the generalization of another type; the subtype. See: generalization. Contrast: subtype. R1-1.2.38 type — a stereotyped class that specifies a domain of objects together with the operations applicable to the objects, without defining the physical implementation of those objects. A type may not contain any methods, maintain its own thread of"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 8)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: control, or be nested. However, it may have attributes and associations. Although an object may have at most one implementation class, it may conform to multiple different types. See also: implementation class. Contrast: interface. NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or"
  },
  {
    "title": "SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology (Part 9)",
    "content": "Title: SEMI E120-0705 SPECIFICATION FOR THE COMMON EQUIPMENT MODEL (CEM) - # R1-1  UML Terminology\n\nContent: copyrights, and the risk of infringement of such rights are entirely their own responsibility."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM)",
    "content": "This standard was technically approved by the global Information & Control Committee.  This edition was approved for publication by the global Audits and Reviews Subcommittee on April 7, 2005.  It was available at www.semi.org June 2005 and on CD-ROM in July 2005.  Originally published in 2004."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # Table of Contents (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # Table of Contents\n\nContent: 1 Purpose 2 2 Scope 3 Referenced Standards and Documents.. 2 3.1 SEMI Standards. 2 3.2 OMG Standards.... 2 3.3 W3C Standards.. 2 4 Terminology .... 4.1 Abbreviations and Acronyms... 3 4.2 Definitions and Acronyms . 5 Conventions. 3 5.3 Translating UML to XML 5.7 Translation Table Column Header Description . 5.8 Documenting The XML With Diagrams . 6 CEM Class Mapping to XML 6 6.2 Abstract Classes . 6.2.2 Nameable $\\Rightarrow$ NameableType.. 6.2.3 EquipmentElement $\\Rightarrow$ EquipmentElementType.... 6.2.4 ExecutionElement $\\Rightarrow$ ExecutionElementType ... 8 6.2.5 Extension $\\Rightarrow$ ExtensionType. 9 6.3 Concrete Classes ..... 9 6.3.5 Equipment $\\Rightarrow$ EquipmentType . 10 6.3.6 Module $\\Rightarrow$ ModuleType.. 12 6.3.7 Subsystem $\\Rightarrow$ SubsystemType... .. 13 6.3.8 IODevice $\\Rightarrow$ IODeviceType . 14 6.3.9 MaterialLocation $\\Rightarrow$ MaterialLocationType.. .. 15 6.3.10 SoftwareModule $\\Rightarrow$ SoftwareModuleType . 15 6.4 Added XML Constructs... 16 6.4.2 XML simpleTypes . 16 6.4.3 Added XML"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # Table of Contents (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # Table of Contents\n\nContent: complexTypes .... 16 6.4.4 Equipment Element... 17 7 XML Schema.. 17 8 Related Documents. 17"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # List of Figures",
    "content": "Figure 1 XML Example Diagram . 5\nFigure 2 XML for Sample. 6\nFigure 3 – NameableType....\nFigure 4 - EquipmentElementType.. .. 8\nFigure 5 – ExecutionElementType . .. 8\nFigure 6 - ExtensionType . 9\nFigure 7 - Example Of The XML Structure For Shared Components . 10\nFigure 8 - EquipmentType.. 11\nFigure 9 - ModuleType .. . 13\nFigure 10 - SubsystemType . . 14\nFigure 11 - IODeviceType.. .. 15\nFigure 12 - MaterialLocationType. 15\nFigure 13 - SoftwareModuleType. . 16\nFigure 14 - Equipment Element. 17"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # List of Tables",
    "content": "Table 1 - Example Translation Table.. 4\nTable 2 - XML Diagram Symbols .. 4\nTable 3 - Translation Table For Nameable\nTable 4 - Translation Table For EquipmentElement. 7\nTable 5 - Translation Table For ExecutionElement .. .8\nTable 6 - Translation Table For Extension.. .9\nTable 7 - Translation Table For Equipment ... .10\nTable 8 - Translation Table For Module Class ... ..12\nTable 9 - Translation Table For Subsystem .. .14\nTable 10 - Translation Table For IODevice .. ..14\nTable 11 - Translation Table For MaterialLocation.. ..15\nTable 12 - Translation Table For SoftwareModule... ..15\nTable 13 - simpleTypes In The CEM Schema . ..16\nTable 14 - complexTypes In The CEM Schema ... .16"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 1  Purpose",
    "content": "1.1  The purpose of this specification is to provide an XML schema that corresponds to the UML model for equipment defined by SEMI E120.  This schema is available to equipment communication standards that want to use CEM-defined equipment structural information in XML formatted equipment communication."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 2  Scope",
    "content": "2.1  The scope of this document is the faithful representation of the CEM model in an XML schema.  It will not add new domain information or concepts to the model.  The only additions made are those needed to render a useful XML schema.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 3  Referenced Standards and Documents",
    "content": "3.1  SEMI Standards  \nSEMI E120 — Provisional Specification for the Common Equipment Model (CEM)  \nSEMI E121 — Guide for Style & Usage of XML for Semiconductor Manufacturing Applications  \n3.2  OMG Standards  \nUnified Modeling Language (UML) Specification , Version 1.4, OMG Specification 01-09-67  \n3.3  W3C Standards  \nExtensible Markup Language (XML) 1.0 (Second Edition)2 — W3C, 6 October 2000  \nNamespaces in XML3 — W3C, 14 January 1999  \nXML Schema Part 0: Primer4 — W3C, 2 May 2001  \nXML Schema Part 1: Structures5 — W3C, 2 May 2001  \nXML Schema Part 2: Datatypes6 — W3C, 2 May 2001  \nXML Path Language (Xpath)7 — W3C, 16 November 1999  \nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 4  Terminology",
    "content": "4.1  Abbreviations and Acronyms  \n4.1.1  UML — Unified Modeling Language  \n4.1.2  W3C — World Wide Web Consortium  \n4.1.3  XML — eXtensible Markup Language  \n4.2  Definitions and Acronyms  \n4.2.1  UML (Unified Modeling Language) — a notation for representing object-oriented designs and views created by Booch, Rumbaugh, and Jacobson in order to merge their three popular notations plus aspects of other existing notations into a single object-oriented notation intended to be usable by all.  \n4.2.2  XML (eXtensible Markup Language) — a markup language used for representing data rich with context and content in documents and in communications.  XML is an extension of SGML, a document-oriented markup language.  It was created by W3C for use on the Internet.  XML can represent object-oriented structures."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions\n\nContent: 5.1 This section discusses the conventions used in this specification for translating UML to XML and for documenting the XML. These conventions are heavily influenced by the SEMI E121. 5.2 The reader is expected to have a working knowledge of the UML, XML, and Schema specifications (See $\\ P 3 . 2$ and $\\ P ( 3 . 3 )$ . This document does not provide tutorial information on these subjects. 5.3 Translating UML to XML 5.4 This document follows the guidelines for XML as outlined in SEMI E121. 5.5 Some of the key guidelines followed in this specification are summarized here: Attributes of a class are generally represented as elements such that they can be easily extended by other applications. • Inheritance is modeled as element extension. • Compositions always turn into contained elements (or arrays if multiples are allowed). Associations and Aggregations are modeled as contained elements or arrays wherever possible to simplify the instance model. 5.6 The translation of a UML class to XML is documented using a table format illustrated"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions\n\nContent: Table 1. Note that SEMI E120 does not define services, so only attribute and association representations are addressed here. Any superclass information is addressed in the text and the diagrams. 5.7 Translation Table Column Header Description Attribute or Role Name — If an attribute, the name of the attribute is placed here. If an association (including aggregation or composition), the role name from the UML diagram is placed here. Compositions are often not assigned roll names. In that case “none” is placed here. UML Name/Type — If an attribute, the data type of the UML attribute is place here. If an association, the type of association is placed here. The possible types are “Composition”, “Aggregation”, or the basic “Association”. UML defines these three types of association. XML Element or Attribute — Lists the type of XML construct used to represent the UML attribute or association. • XML Name/Type — Provides the name and data type of the resulting XML construct. The type may be a builtin type (for example, xs:string), or a named"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions (Part 3)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5  Conventions\n\nContent: type defined within the XML schema. Table 1 Example Translation Table"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams\n\nContent: 5.8.1 This document provides graphical representations of the included XML. Although no standard graphical notation for XML could be found, various XML tools have their own notation. This document will use the notation provided by $\\begin{array} { r } { \\mathbf { X M L S P Y \\circledast } } \\end{array}$ from Altova Corporation8. There is no requirement for use of ${ \\mathrm { X M L S P Y } } \\textcircled { \\mathrm { B } }$ in order to comply with this specification. Figure 1 shows a sample XML diagram that will be used to provide a basis for explanation of the XML graphical notation used in the rest of the document. 5.8.2 In the diagram, rectangular boxes represent XML elements. Ownership or containment is read from right to left in the diagrams. In the sample diagram, ParentType contains Child1, Child2, Child3, and Child4. In turn, Child2 contains Child2a, Child2b, and Child2c. The additional symbols (8-sided boxes) represent sequences or choices. See Table 2 for an explanation of these symbols. 5.8.3 Please"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams\n\nContent: note that “element”, “sequence”, “all”, and “choice” are XML terms (see the W3C standards referenced in $\\ P [ 3 . 3 )$ . The reader is expected to be familiar with XML. Table 2 Altova XMLSPY Schema Diagram Symbols 5.8.4 A graphic using a solid line is a required element; using a dashed line represents an optional element. Numbers or ranges in the lower right hand corner represent cardinality. The default cardinality is one. 5.8.5 To simplify a diagram or help focus on a particular aspect, detail may be hidden. The 8-sided symbols have a small square on the right end. If a minus sign “-“ is in the box, then all detail is shown. If the box contains a plus sign $\" \\mathrm { \\Phi } _ { + } , \"$ , then all detail to the right of that symbol is hidden. The example has no hidden detail. 5.8.6 The yellow (or gray if printed in monochrome) boxes indicate the use of other defined types. So, Child4 is of type “Child4Type”. Child4Type defines Child4a and Child4b. This detail may be hidden in the diagram. Object oriented"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams (Part 3)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8  Documenting The XML With Diagrams\n\nContent: inheritance is typically represented in XML as type extension. In Figure 1, ParentType extends Child1and2Type by adding a sequence that includes Child3 and Child4. 5.8.7 Reading Figure 1 would yield the following additional information: 1. Child1and2Type is an ordered sequence of two items: Child2 and Child1. 2. Child1 contains an optional ordered sequence of Child1a, one or more Child1b, and (optionally) Child1c. 3. Child2 contains a choice of one or two of the following: Child2a, Child2b, and Child2c. 4. Child3 contains an unordered sequence of Child3a and Child3b."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8.8  XML Sample (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8.8  XML Sample\n\nContent: 5.8.8.1 The sample XML for the example shown in Figure 1, is presented below. Refer to the XML documentation referenced in $\\ P 3 . 3$ for a complete description of the syntax and semantics of XML. <?xml version $\\ c =$ \"1.0\" encoding $\\mathbf { \\bar { \\rho } } = \\mathbf { \\bar { \\rho } }$ \"UTF-8\"?> <xs:schema xmlns:xs $\\ c =$ \"http://www.w3.org/2001/XMLSchema\" elementFormDefault $\\ c =$ \"qualified\" attributeFormDefault $\\ c =$ \"unqualified\"> <xs:complexType name $\\ c =$ \"ParentType\" abstract $\\ c =$ \"true\"> <xs:complexContent> <xs:extension base $\\ c =$ \"Child1and2Type\"> <xs:sequence> <xs:element name $\\ c =$ \"Child3\"> <xs:complexType> <xs:all> <xs:element name $\\ c =$ \"Child3a\"/> <xs:element name $\\ c =$ \"Child3b\"/> </xs:all> </xs:complexType> </xs:element> <xs:element name $\\ c =$ \"Child4\" type $\\ c =$ \"Child4Type\" nillable $\\ c =$ \"false\"/> </xs:sequence> </xs:extension> </xs:complexContent> </xs:complexType> <xs:complexType name $\\ c =$ \"Child4Type\" abstract $\\ c =$ \"true\"> <xs:sequence> <xs:element name $\\ c =$ \"Child4a\""
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8.8  XML Sample (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 5.8.8  XML Sample\n\nContent: type $\\ c =$ \"xs:integer\" nillable $\\ c =$ \"false\"/> <xs:element name $\\ c =$ \"Child4b\" type $\\ c =$ \"xs:string\" nillable $\\ c =$ \"false\"/> </xs:sequence> </xs:complexType> <xs:complexType name $\\ c =$ \"Child1and2Type\" abstract $\\ c =$ \"true\"> <xs:sequence> <xs:element name $\\ c =$ \"Child2\"> <xs:complexType> <xs:choice maxOccurs $\\ l =$ \"2\"> <xs:element name $\\ c =$ \"Child2a\"/> <xs:element name $\\ c =$ \"Child2b\"/> <xs:element name $\\ c =$ \"Child2c\"/> </xs:choice> </xs:complexType> </xs:element> <xs:element name $\\ c =$ \"Child1\"> <xs:complexType> <xs:sequence minOccurs $\\ c =$ \"0\"> <xs:element name $\\ c =$ \"Child1a\"/> <xs:element name $\\ c =$ \"Child1b\" maxOccurs $\\ c =$ \"unbounded\"/> <xs:element name $\\ c =$ \"Child1c\" minOccurs=\"0\"/> </xs:sequence> </xs:complexType> </xs:element> </xs:sequence> </xs:complexType> <xs:element name $\\ c =$ \"Parent\" type $\\ c =$ \"ParentType\" final $\\ c =$ \"#all\"/> </xs:schema>"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6  CEM Class Mapping to XML",
    "content": "6.1  This section describes how the CEM classes from SEMI E120 were mapped to XML.  The descriptions in this section are provided to support and explain the XML schema document."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2  Abstract Classes",
    "content": "6.2.1  The classes from the CEM that were designated “abstract” are included in this section.  Abstract classes are not directly implemented.  They exist in the model (and in the schema) to provide a basis for the concrete objects. So, they will not have corresponding instances in an XML instance file based on this schema."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.2  Nameable $\\Rightarrow$ NameableType",
    "content": "6.2.2.1  The Nameable class is mapped to the XML NameableType.  The XML definition of the class Nameable uses simple types UuidType and NameType (see $\\ P [ 6 . 4 . 2$ for definition).  \n6.2.2.2  The association of Nameable with the class Extension is modeled here as an array (Extensions) contained inside of Nameable.  See $\\ P [ 6 . 2 . 5$ for more about Extension.  \nTable 3  Translation Table For Nameable"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.3  EquipmentElement $\\Rightarrow$ EquipmentElementType",
    "content": "6.2.3.1  The EquipmentElement class is mapped to the XML EquipmentElementType.  EquipmentElement translates in a straightforward way with all UML attributes mapping to elements.  EquipmentElementType extends NameableType.  \nTable 4  Translation Table For EquipmentElement"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.4  ExecutionElement $\\Rightarrow$ ExecutionElementType",
    "content": "6.2.4.1  ExecutionElement class maps to the XML ExecutionElementType.  ExecutionElement’s three attributes map directly to XML elements.   A special type “ProcessTypeEnum” has been created to represent the enumeration processType.  ExecutionElementType extends EquipmentElementType.  \nTable 5  Translation Table For ExecutionElement"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.2.5  Extension $\\Rightarrow$ ExtensionType",
    "content": "6.2.5.1  The Extension class maps to the XML ExtensionType.  Extension class has no attributes, but it has a navigable association to the Nameable class.  This association is represented as the element NameableRef which contains the uid attribute of the associated Nameable.  \n6.2.5.2  The SEMI E120 specification says that CEM classes are extended by creating subclasses of the Extension class.  In this XML schema, this mechanism is represented by the addition of xs:any to ExtensionType.  The XML rendering of the additions by the UML subclass of Extension are placed directly in the ExtensionType in this way.  \nTable 6  Translation Table For Extension"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Concrete Classes (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Concrete Classes\n\nContent: 6.3.1 This section contains the XML mappings for the classes defined in SEMI E120 as concrete classes. These are the classes that can be instantiated an XML instance document based on this schema. 6.3.2 The mapping from UML to XML was created with the goal of having the simplest XML instance documents for most equipment. It was assumed that cases of shared equipment components (Modules, Subsystems, or IODevices belonging to more than one aggregation) are rare and can be treated as special cases. Where no components are shared, the simplest solution is to map all aggregated objects to be contained within the object that represents the aggregate. In XML, this translates to an Element that contains a set of sequences containing the instances of the components—one sequence for each type of component. This is the way one would normally map a composite aggregation. 6.3.3 In order to deal with the occasional shared component, a second set of sequences was added for each type of component that can be shared. These sequences contain"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Concrete Classes (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3  Concrete Classes\n\nContent: references (via the uid attribute) to the shared components that are defined elsewhere. So, if a Subsystem is shared by two Modules, then the Subsystem instance is defined once and included inside one of the Module instances. In the other Module instance, this Subsystem appears in the sequence of references to Subsystems and is identified by the uid of the original. $6 . 3 . 4 \\ \\mathrm { I n }$ summary, with this approach, the structure of the equipment is readily apparent in the XML instance document except for the components that are shared. When a component is shared, its definition does not need to be repeated. Instead, a reference by uid is provided. This avoids additional complexity and duplication that could bloat the XML instance document."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.5  Equipment $\\Rightarrow$ EquipmentType",
    "content": "6.3.5.1  The Equipment class is mapped to the XML EquipmentType. EquipmentType extends the ExecutionElementType (see Figure 8).  It is also a container for all of the components of the Equipment – Modules, Subsystems, IODevices, MaterialLocations, and other Equipment.  \n6.3.5.2  Table 7 shows how the associations of the Equipment class are mapped into XML.  The EquipmentType contains the element EquipmentComponents to act as a container.  The XML elements listed in the table are contained in EquipmentComponents.  \nTable 7  Translation Table For Equipment"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.6  Module $\\Rightarrow$ ModuleType",
    "content": "6.3.6.1  The Module Class is mapped to the XML ModuleType. The ModuleType extends the ExecutionElementType (see Figure 9).  It is also a container for all of the components of the Module – Subsystems, IODevices, MaterialLocations, and other Modules.  \n6.3.6.2  Table 8 shows how the attributes and associations of the Module class are mapped into XML.  The ModuleType contains the element ModuleComponents to act as a container.  The XML elements listed in the table are contained in ModuleComponents.  \nTable 8  Translation Table For Module Class"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.7  Subsystem $\\Rightarrow$ SubsystemType",
    "content": "6.3.7.1  The Subsystem class is mapped to the XML SubsystemType.    SubsystemType extends EquipmentElement (see Figure 10).  It is also a container for all of the components of the Subsystem – IODevices and other Subsystems. 6.3.7.2  Table 9 shows how the associations of the Subsystem class are mapped into XML.  The SubsystemType contains the element SubsystemComponents to act as a container.  The XML elements listed in the table are contained in SubsystemComponents.  \nTable 9  Translation Table For Subsystem"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.8  IODevice $\\Rightarrow$ IODeviceType",
    "content": "6.3.8.1  The IODevice class is mapped to the XML IODeviceType.  IODeviceType defines no attributes or navigable associations, but it does extend EquipmentElementType (see Figure 11).  It is included in multiple associations, but it cannot navigate any of them.  Therefore, its translation table is empty."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.9  MaterialLocation $\\Rightarrow$ MaterialLocationType",
    "content": "6.3.9.1  The MaterialLocation class is mapped to the XML MaterialLocationType.  MaterialLocationType extends NameableType (see Figure 12).  \n6.3.9.2  Table 11 shows how the attribute of the MaterialLocation class is mapped into XML."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.3.10  SoftwareModule $\\Rightarrow$ SoftwareModuleType",
    "content": "6.3.10.1  The SoftwareModule class is mapped to the XML SoftwareModuleType.  Table 12 shows how the attributes of SoftwareModule are mapped to XML.  The resulting XML structure is illustrated in Figure 13.  \nTable 12  Translation Table For SoftwareModule"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4  Added XML Constructs",
    "content": "6.4.1  In the process of translating the UML model for CEM into a useful XML schema, is was necessary to add certain types and constructs to the schema.  This section describes these XML constructs and explains the purpose of each."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.2  XML simpleTypes",
    "content": "6.4.2.1  Table 13 describes each simpleType9 contained in the XML schema.  \nTable 13  simpleTypes In The CEM Schema"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.3  Added XML complexTypes",
    "content": "6.4.3.1  Table 14 describes each added complexType contained in the XML schema that was not described above.  \nTable 14  complexTypes In The CEM Schema"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.4  Equipment Element (Part 1)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.4  Equipment Element\n\nContent: 6.4.4.1 Equipment is an element of type EquipmentType (see Figure 14). The Equipment element is included in the schema to provide for better type checking through the use of Keys and Keyrefs. 6.4.4.2 The key and keyref constructs in the schema allow the enforcement the structure of the document. A key defines an element that may be used to uniquely identify a structure in the document. To uniquely identify the structure in the document, the key element must remain unique within the document. A document will fail validation if an instance of the element is found that is not unique. 6.4.4.3 The keyref construct allows a reference to a specific key to be created. The keyref requires an instance of the element exist with the same value as the reference. The key and keyref constructs allow the enforcement of the Uid elements in the CEM schema. A key exists for all Uid elements in the document forcing each Uid defined in the document to be unique and creates a table of them. This key is then used to enforce references to all"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.4  Equipment Element (Part 2)",
    "content": "Title: SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 6.4.4  Equipment Element\n\nContent: objects base on Nameable in the document. Additional keys and keyref fields are defined to enforce a reference to an IODevice, Subsystem, or Module. 6.4.4.4 The unique construct is also used to enforce the structure of the document. The unique construct defines an element that must be unique within a portion of the document. For the CEM schema, the unique construct enforces the uniqueness of object names within an aggregation. The enforcement of names is limited to Nameable objects defined directly within the aggregation. It does not enforce names of objects in references."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 7  XML Schema",
    "content": "7.1  The XML schema defined by this specification is contained in a separate document named:"
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # E120-1.V0704.CommonEquipmentModel.xsd",
    "content": "7.2  That schema document is a part of this specification and it should accompany this document.  \n7.3  The contents of the schema document constitute the core part of this specification.  The information above serves only to explain and describe the schema."
  },
  {
    "title": "SEMI E120.1-0705 XML SCHEMA FOR THE COMMON EQUIPMENT MODEL (CEM) - # 8  Related Documents",
    "content": "8.1  None  \nNOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice.  \nBy publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS",
    "content": "This guide was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee.  Current edition approved by the North American Regional Standards Committee on November 4, 2004 and December 10, 2004.  Initially available at www.semi.org February 2005; to be published March 2005. Originally published March 2003; last published March 2004."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 1  Purpose",
    "content": "1.1  The inclusion of XML (Extensible Markup Language) notation within current SEMI standards reflects the industry’s growing interest in XML technology.  This guide is the first step to prepare for XML protocols in SEMI standards and to establish consistency in XML style and usage.  Recommendations given in this document are intended for the definition and conformance of XML based standards.  This document also attempts to highlight those areas where standardization and further work may be required."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 2  Scope",
    "content": "2.1  This guide is intended to promote interoperable application of XML in a variety of semiconductor manufacturing usage contexts.  It addresses an approach for the usage and definition of XML specifications within the semiconductor industry with the focus on the use of XML in future SEMI standards.  These guidelines should be applied to any XML document or schema generated as part of a SEMI standard for communication between software entities.  This guide includes the following:  \n2.1.1  Overview of XML Resources, Organizations, and Standards,  \n2.1.2  XML Three Tier Model Architecture, and  \n2.1.3  General and specific recommendations of XML style and usage.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 3  Limitations",
    "content": "3.1  Because of the rapid development of new standards in the XML arena at the time of the writing of this document, it was found that there are areas in XML where standards are still in the development stage.  Some examples of emerging XML technologies are: XMI (XML Metadata Interchange), SOAP (Simple Object Access Protocol), and Web Services Routing.  Therefore, this guide does not include recommendations in those areas until the governing bodies approve these specifications.  A list of some of the areas where guidance may be necessary is provided below:  \n3.1.1  (UML) (Unified Modeling Language) models with derived schema definition\n3.1.2  XMI (XML Metadata Interchange) usage and recommendations\n3.1.3  XML Namespace definitions\n3.1.4  XSLT (Extensible Stylesheet Language Transformations) usage and conversion rules\n3.1.5  WSDL (Web Service Definition Language) usage and recommendations\n3.1.6  SOAP (Simple Object Access Protocol) and transport recommendations"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 4  Referenced Standards",
    "content": "4.1  Other References  \n4.1.1  Extensible Markup Language (XML) 1.0 (Second Edition) — W3C Recommendation, 6 October 2000 (http://www.w3.org/TR/2000/REC-xml-20001006/)\n4.1.2  XML Schema Part 1: Structures — W3C Recommendation, 2 May 2001 (http://www/w3/org/TR/xmlschema1/)\n4.1.3  XML Schema Part 2: Datatypes — W3C Recommendation, 2 May 2001 (http://www/w3/org/TR/xmlschema2/)\nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 5  Terminology",
    "content": "5.1  Abbreviations and Acronyms\n5.1.1  DTD — Document Type Definition\n5.1.2  HTTP — Hypertext Transfer Protocol\n5.1.3  SGML — Standard Generalized Markup Language\n5.1.4  SOAP — Simple Object Access Protocol\n5.1.5  W3C — World Wide Web Consortium\n5.1.6  WSDL — Web Services Definition Language\n5.1.7  WWW — World Wide Web\n5.1.8  XMI — XML Metadata Interchange\n5.1.9  XML — Extensible Markup Language\n5.1.10  XPATH — XML Path Language\n5.1.11  XSL — Extensible Stylesheet Language\n5.1.12  XSLT — Extensible Stylesheet Language Transformations"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 6  Overview of XML Resources, Organizations, and Standards",
    "content": "6.1  There are a large number of resources in the area of XML.  Most of the information is readily available from organizations such as OMG, W3C, RosettaNet, ebXML, OASIS, Sun Micro Systems, IBM and other through their web sites. There has been an extensive amount work in standardizing dictionaries and vocabularies for several industries.  These documents can be used until further standards and guides specific to this industry are created."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 6.2  Resources (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 6.2  Resources\n\nContent: 6.2.1 Extensible Markup Language (XML) 1.0 (Second Edition) — W3C, 6 October 2000 (http://www.w3.org/TR/2000/REC-xml-20001006/) 6.2.2 Namespaces in XML — W3C, 14 January 1999 (http://www.w3.org/TR/1999/REC-xml-names-19990114/) 6.2.3 XML Schema Part 0: Primer — W3C, 2 May 2001 (http://www/w3/org/TR/xmlschema-0/) 6.2.4 XML Schema Part 1: Structures — W3C, 2 May 2001 (http://www/w3/org/TR/xmlschema-1/) 6.2.5 XML Schema Part 2: Datatypes — W3C, 2 May 2001 (http://www/w3/org/TR/xmlschema-2/) 6.2.6 XML Path Language (Xpath) — W3C, 16 November 1999 (http://www/w3/org/TR/xpath/) 6.2.7 RFC 2396 Uniform Resource Identifiers (URI): Generic Syntax. T. Berners-Lee, R. Fielding, L. Masinter. August 1998. 6.2.8 Hyper Text Transfer Protocol 1.1 (HTTP, http://www.w3.org/Protocols/rfc2616/rfc2616.html) 6.2.9 Simple Object Access Protocol 1.1 — W3C Note, 8 May 2000 (SOAP, http://www.w3.org/TR/SOAP) 6.2.10 Web Service Definition Language 1.1 — W3C Note, 15 March 2001 (WSDL, http://www.w3.org/TR/wsdl) 6.2.11 ISO/IEC 11179 (1-6)"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 6.2  Resources (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 6.2  Resources\n\nContent: Information Technology — Standardization and Specification of Data Elements"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 7  XML Three Tier Model Architecture",
    "content": "7.1  The following three-tier schema model is recommended:  \nPrimary Schemas (common SEMI models) Secondary Schemas (individual SEMI models) Tertiary Schemas (non SEMI models)  \n7.1.1  Primary Schemas — Primary Schemas are schemas that have been defined by SEMI.  These schemas usually cover a particular area such as equipment, transport system, scheduler/dispatcher, maintenance, etc.  \n7.1.2  Secondary Schemas — Secondary Schemas are schemas that have been defined by SEMI.  These schemas are for a particular functionality required by the application such as carrier management, process job, data collection, etc.  Secondary Schemas may derive from Primary Schemas as a base by extension or restriction.  \n7.1.3  Tertiary Schemas — Tertiary Schemas are defined by the supplier of the tool or application.  These Schema may derive from either Primary or Secondary Schemas as a base by extension or restriction."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.1  XML Document Compliance",
    "content": "8.1.1  All XML documents, by definition, must comply with the W3C Recommendation, XML version 1.0 (see http://www.w3.org/TR/REC-xml for more detail on the specification).  The purpose of this compliance is to assure that all XML documents are “well-formed” and “valid”.  A “well-formed” document means that there is exactly one root element, all sub-elements (and recursive sub-elements) have delimiting start- and end-tags, and that they are properly nested within each other.  A “well-formed” document also conforms to the XML syntax specification and does not include external references unless a schema reference is provided.  An XML document is “valid” if it has an associated schema and complies with the constraints expressed in the schema.  “Valid” XML data is also “wellformed”."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.2  Use of XML Schema versus DTD (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.2  Use of XML Schema versus DTD\n\nContent: 8.2.1 All XML documents should conform to a specified set of production rules. These production rules should be specified as XML Schemas. XML Schemas are the preferable way to define XML documents. XML Schemas are modular in structure and can be built from multiple components (files) by including or importing the components. 8.3 Using Elements versus Attributes 8.3.1 When defining attributes from an object model, it is preferable to define them as XML elements such that they can be easily extended by other applications. 8.3.2 Use elements if the information is hierarchical, contains a content model, or could potentially become more complex or hierarchical in the future. 8.3.3 Use attributes when the information is metadata about the element. 8.4 Naming Conventions 8.4.1 The following list is a compendium of recommended practices to be used when naming attributes and simple or complex elements. 8.4.1.1 Use the UpperCamelCase convention for elements and the lowerCamelCase convention for"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.2  Use of XML Schema versus DTD (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.2  Use of XML Schema versus DTD\n\nContent: attributes. 8.4.1.2 Do not use any punctuation in the element name; i.e. underscores, dashes, etc. Use only alphanumeric characters. 8.4.1.3 Acronyms should be all in uppercase. Following a Three (or more) Letter Acronym (TLA), all in uppercase, the next letter is lowercase, i.e.: TLAlowercase, not TLAUppercase."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.5  Common XML Structures",
    "content": "8.5.1  When defining a list of elements where each has the same element name, nest the list of elements inside a parent element.  Form the parent’s element name by concatenating the name of the list elements with the word “List”.  \n8.5.1.1  For example:  \n<SubstrateIDList> <SubstrateID>Substrate1</SubstrateID> <SubstrateID>Substrate2</SubstrateID> <SubstrateID>Substrate25</SubstrateID>\n</SubstrateIDList>  \n8.6  Schema Element Organization — The following recommendations apply only to the Primary and Secondary Schemas.  \n8.6.1  With the purpose of readability of the schema and to aid in the understanding of the XML document, the following guidelines are recommended when elements are defined in the XML document or schema:  \n8.6.1.1  Elements of type ID or KEY should be listed at the top of the schema, and elements of type IDREF or KEYREF should be listed second.  \n8.6.1.2  Elements of simpleType should be declared first, followed by elements of complexType."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7  XML Namespaces",
    "content": "8.7.1  A namespace name is a URI (Universal Resource Identifier) that uniquely identifies the namespace. A namespace is a group of names usually with a related purpose and context. The namespace is a globally unique name. This is ensured by using a domain names as part of the namespace definition or a pre-determined identifier. SEMI documents will use the URN (Universal Resource Naming) convention to define namespaces, suppliers or any other $3 ^ { \\mathrm { r d } }$ party suppliers can use either URN or URL (Universal Resource Locator) descriptions.  \n8.7.2  Each application or document definition is responsible for providing a namespace for the extension of its vocabulary definition. A namespace must be unique and to ensure its uniqueness the definitions of namespaces must follow the rules described below."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax\n\nContent: 8.7.3.1 SEMI Namespaces use Uniform Resource Names (URNs). All URNs have the following syntax: 8.7.3.2 Where $\\scriptstyle < \\mathrm { N I D } >$ is the namespace identifier and ${ < } \\mathrm { N S S } >$ is the namespace specific string. The <NID> syntax is limited to upper or lower characters followed by upper or lower characters including a hyphen “-“. <NID> :: $: =$ <Letter> [<Letter-Number-Hyphen>]\\* <Letter> :: $: =$ <upper> | <lower> <Letter-Number-Hyphen> :: $: =$ <upper> | <lower> | <number> | “-“ 8.7.3.3 The namespace identifier is case insensitive thus “ABC” and “abc” refer to the same namespace. All SEMI defined namespaces will use <NID> : $: =$ “semi-org”. 8.7.3.4 The ${ < } \\mathrm { N S S } >$ syntax is limited to upper or lower case characters followed by upper lower characters including a hyphen “-“ . The ${ < } \\mathrm { N S S } >$ is composed of more than one field and each field is separated by a period as shown below. No other characters than the ones shown are allowed and"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax\n\nContent: should be considered reserved. <NSS> :: $: =$ <XML Domain>”.”<SEMI Domain>”.”<Version>”.”<Name> <XML domain> :: $: =$ <Letter> [ Letter-Number-Hyphen] <SEMI Domain> :: $\\Bumpeq$ <Letter> [ Letter-Number-Hyphen] <Version> :: $: =$ <Letter> [ Letter-Number-Hyphen] <Name> :: $: =$ <Letter> [ Letter-Number-Hyphen] 8.7.3.5 <XML Domain> — A XML domain needs to be included to explain whether this is a schema (xsd) or a web service (ws) by using the following format: <XML domain> $\\mathbf { \\tau } = \\mathbf { \\tau }$ “xsd” for schema or “ws” for web service. 8.7.3.6 <SEMI Domain> or <Company Domain> — Include in the SEMI domain identifier the standard number as assigned by SEMI. For example, Specification for Carrier Management $= { } ^ { \\mathrm { 6 6 } } \\mathrm { E 0 } 8 7 ^ { \\mathrm { 3 } }$ . In those cases where the standard has not been approved but a formal document number has been assigned, use this number instead. For example, Equipment Diagnostic Interface $= \\cdot \\mathrm { { D o c } } 3 5 6 3"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax (Part 3)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax\n\nContent: ^ { \\circ }$ . When the definition is from a third party use the defined company domain. For example, Etch equipment $\\ c =$ “EtchTool” or “Model-3731-134”. 8.7.3.7 <Version> — Properly identifying the revision level of the schema and it is required when there is an approved version of the standard the namespace definition should include the date that corresponds to the standard release date or when it was approved. Dates are represented as month (mm) and year (yy) and use the “Vmmyy” format. This field is not required when SEMI standards are non-existent. For third party applications it is recommended that the “Vx-x” form be used. For example, $2 0 0 1 \\mathrm { F e b } = \\mathrm { ^ { * } V 0 2 0 1 ^ { \\circ } }$ or for Version $2 . 1 = \\mathrm { ^ { * } V } 2 \\mathrm { - } 1 ^ { \\mathrm { - } }$ 8.7.3.8 <Name> — This label corresponds to the actual name of the document to which the namespace belongs. For metadata definitions include the descriptive name of the schema using upper camel case. Ex."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax (Part 4)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.3  Namespace Syntax\n\nContent: CarrierManagement, EquipmentDiagnosticAcquisition, EquipmentMetadata, etc. For web services, the <Name> includes the service or interface role and whether it corresponds to the “binding” or the “portType” definition. (See UDDI Version 3 from OASIS for WSDL structure). Examples of valid representations of namespaces are: “urn:semi-org:xsd.E087.V0702.CarrierManagement” “urn:semi-org:xsd.Doc3509.V12.DataCollectionManagement” “urn:supplierXX-com:EtchTool.V07.Model123” “urn:semi-org:ws.E132-1.V0305.SessionManager-binding” “urn:semi-org:ws.E125-1.V1104.MetadataManager-portType” Examples of invalid representation of namespaces are: “urn:semi.org:xsd.Doc3509.V12.DataCollectionManagement” (Invalid use of period in <SEMI Domain>) “urn:semi-org:xsd.E087.V7.22.CarrierManagement” (Invalid use of period in <Version>)"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.4  Multiple Default Namespaces",
    "content": "8.7.4.1  When more than one namespace is used in an XML document or schema, a prefix shall be defined for each of the namespaces that uniquely identifies the elements that belong to each of the namespaces. This prefix is used to specify that a local element or attribute name belongs to a particular namespace. These prefixes are used to override attribute values and must be documented by the supplier of the application. The following rules apply to prefixes:  \nRule 1: Prefixes should be defined in all uppercase or all lower case letters but not both.  \nEx: <Definition xmlns: CMS $\\circleddash$ ”urn:semi-org:xsd.E087.V0201.CarrierManagement”> <CMS:Data> abcd </CMS:Data> <CMS:Data> xyze </CMS:Data> </Definition>  \nRule 2: Do not use the same prefix for more than one XML namespace. Prefixes defined with the same characters and in the same order are considered the same even when defined in different letter case.  \nEx. CMS and cms are equivalent."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.5  Target Namespace (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.5  Target Namespace\n\nContent: 8.7.5.1 When more than one namespace is used in schema definition a target namespace should be defined using the “targetNamespace” format definition. The target namespace definition should include the elementFormDefault $\\mathbf { \\tau } = \\mathbf { \\tau }$ “qualified” such that the elements defined within the target namespace are all qualified (in the namespace). For example: <schema targetNamespace $= ^ { \\prime }$ \"urn:semi-org:xsd.E125.V0303.Metadata\" xmlns:CEM $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"urn:semi-org:xsd.E120.V0303.CommonEquipmentModel\" xmlns:CMS $\\mathbf { \\tau } = \\mathbf { \\tau }$ \"urn:semi-org:xsd.E087.V0304.CarrierManagement\" elementFormDefault=\"qualified\"> </schema> For web services: <wsdl:definitions name $\\mathrel { \\mathop : } = \\mathrel { \\mathop : }$ \"ESD\" targetNamespace $\\circleddash$ \"urn:semi-org:ws.E125-1.V0305.Metadata-portType\" xmlns $\\cdot = ^ { \\prime }$ \"urn:semi-org:ws.E125-1.V0305.Metadata-portType\" xmlns:auth $\\mathbf { \\lambda } = \\mathbf { \\vec { \\lambda }"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.5  Target Namespace (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.7.5  Target Namespace\n\nContent: }$ \"urn:semi-org:xsd.E132-1.V0305.auth\" xmlns:esd $\\ c =$ \"urn:semi-org:xsd.E125-1.V0305.esd\" xmlns:eqmport=\"urn:semi-org:ws.E125-1.V0305.Metadata-portType\" xmlns:wsdl $\\ c =$ \"http://schemas.xmlsoap.org/wsdl/\" xmlns:xsd $\\ c =$ \"http://www.w3.org/2001/XMLSchema\"> </wsdl:definitions>"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.8  Character Sets",
    "content": "8.8.1  Vocabularies (element and attribute names) should be restricted to the ASCII 7-bit character set (ISO-646) in addition to restrictions imposed by XML and XML Schema on element and attribute names as defined in this document.  \n8.8.2  XML Schema and instance documents should use the UTF-8 (ISO-10646) encoding; all other documents should use the UTF-8 encoding (other encoding types may be used for documents whose intended use is restricted to locales where the restriction to UTF-8 is inappropriate).  \n8.8.3  UTF-8 supports the ASCII 7-bit character set and the Unicode character set and is the current default encoding for SOAP based documents."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9  Extensions to Enumeration Lists",
    "content": "8.9.1  As a general guideline fixed enumeration lists should not to be changed with additional values. Extendable enumeration lists, on the other hand, are defined such that they allow the inclusion of supplier or application specific choices."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.2  Non-extendable Enumeration Lists (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.2  Non-extendable Enumeration Lists\n\nContent: 8.9.2.1 When an element or attribute has a fixed list of values it can be assumed that it is necessary to restrict the list. The reasons for restriction to a fixed list are: The implementation has a known set of cases to consider. Variations in spelling, abbreviating, and case use need to be eliminated. For example, an answer to a question may be either “yes” or “no”. A depth may be either “HI” or “LOW”. A unit of measure may be one of a long, but finite list of ISO abbreviations. 8.9.2.2 For this case implementation is straight forward. An enumerated list is the choice and the list is not extendable. The above construct should only be used where it is clear that the list should be tightly controlled and only extended as a new version. If a user needs to extend the list they should copy this construct and build their own schema with the simpleType that contains the new set of values. • When the usage case indicates that the enumerated list should be fixed then a simpleType using"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.2  Non-extendable Enumeration Lists (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.2  Non-extendable Enumeration Lists\n\nContent: enumeration of values should be used. The elements and attributes that use these values should be local. Extension (or further restrictions) on the set of values should be done by SEMI with a change in version. <xsd:simpleType name $\\ c =$ ”pressureType” final ${ \\bf \\mu } = \\prime \\prime$ #all”> (block $\\scriptstyle = \\prime \\prime$ #all” may also be used) <xsd:restriction base $\\ c =$ ”xsd:string”> <xsd:enumeration value=”HI”/> <xsd:enumeration value $\\ c =$ ”LOW”/> </xsd:restriction> </xsd:simpleType>"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.3  Extendable Fixed Enumerated Lists (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.3  Extendable Fixed Enumerated Lists\n\nContent: 8.9.3.1 The term ‘extendable fixed’ is contradictory. However, there is a common usage case suggested for this situation. This case is where the list is fixed but allows ‘other’ or ‘unknown’ to be specified. In this case, there is no semantic meaning to the value of ‘other’ or ‘unknown’ except that it states that the given list has not appropriate values. In this example a list of process control may include {R2R, FDC, SPC, other}. The instance writer may not want to use the listed options, and therefore can choose ‘other’ or ‘unknown’ as the value. 8.9.3.2 In this case the semantic meaning of the two values is different. ‘Other’ generally means that there is an appropriate value but it is not in the list of values that are given. ‘Unknown’ means that the instance writer does not know the value. The example below illustrates a list where the enumeration “other” defined. <xs:simpleType name $\\ c =$ \"ProcessType1\" block $\\ c =$ ”#all”> <xs:restriction base $= ^ { \\prime }$"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.3  Extendable Fixed Enumerated Lists (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.3  Extendable Fixed Enumerated Lists\n\nContent: \"xs:string\"> <xs:enumeration value $\\mathrel { \\mathop = } 1$ \"R2R\"/> <xs:enumeration value $\\ c =$ \"FDC\"/> <xs:enumeration value $\\ c =$ \"SPC\"/> <xs:enumeration value $\\ c =$ \"OTHER\"/> </xs:restriction> </xs:simpleType> • When a fixed list may not be inclusive of all possible values, include the value, ‘other.’ When a fixed list is part of a mandatory element or attribute, consider including the value ‘unknown.’"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists\n\nContent: 8.9.4.1 In the previous section the value ‘other’ is described to be an extension policy. While this allows the user to say that there is a value other than those in the enumerated list that is appropriate, it does not define ahead of time what the value is. This is done by introducing a choice value: ‘Other: xxx’. This method allows the user to include more meaningful information that qualifies the term ‘other’. 8.9.4.2 An example where value is defined which has the pattern ‘Other: $\\mathrm { \\backslash { S } \\backslash { S } ^ { * } { } ^ { , } }$ , with ${ \\mathrm { \\backslash { S } \\backslash { S } ^ { * } } }$ representing a string is shown below: <xs:simpleType name $\\ c =$ \"otherNameType\"> <xs:restriction base $\\ c =$ \"xs:string\"> <xs:pattern value $\\ c =$ \"Other:\\S\\S\\*\"/> </xs:restriction> </xs:simpleType> 8.9.4.3 To make this a union with the simple type whose result is the enumerated list the example for processType illustrated above can be extended by <xs:simpleType"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists\n\nContent: name $\\ c =$ \"ProcessType2\"> <xs:restriction base $\\ c =$ \"xs:string\"> <xs:enumeration value $\\ c =$ \"R2R\"/> <xs:enumeration value $\\ c =$ \"FDC\"/> <xs:enumeration value $= ^ { \\prime }$ \"SPC\"/> </xs:restriction> </xs:simpleType> <xs:simpleType name $\\ c =$ \"extProcessType\"> <xs:union memberTypes $\\ c =$ \"ProcessType2 otherNameType\"/> </xs:simpleType> 8.9.4.4 This method allows the writer to use ‘R2R’, ‘FDC’, ‘SPC’ or ‘Other: XXX’. While it does not define the meaning of the ‘XXX’ it does allow an extension of the values at XML write time. When meanings of the extended values has been agreed upon this offers a method for incorporating these extended values without requiring schema changes.. <?xml version $\\underline { { \\boldsymbol { \\mathbf { \\Pi } } } } =$ \"1.0\" encoding $= \"$ UTF-8\"?> <root xmlns:xsi $\\ c =$ http://www.w3.org/2001/XMLSchema-instance xsi:NamespaceSchemaLocation $= \"$ C:\\standards\\XML\\E121\\ExtensionSample.xsd\"> <xyz>FDC</xyz> <abc>Other:WTW $<$ /abc> </root>"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists (Part 3)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.9.4  General Extendable Enumerated Lists\n\nContent: 8.9.4.5 Another advantage using this approach is that the ‘Other: WTW’ portion offers a flag to the reading application. If the reading application recognizes this string then it is aware that an extension is present and is able to take appropriate action. If this pattern is used consistently in SEMI it will become a standard pattern for the reader. Since this is a simple type it can be used as either an element value or an attribute value."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention\n\nContent: 8.10.1 Three schema files have been identified for at least each interface that a standard defines. In the case of a client interface services the three files are: DataTypes.xsd, Client-Binding.wsdl and Client-PortTypes.wsdl. Those standards that define services for multiple clients as well as for the equipment, several schema files will be defined. 8.10.2 Each defined standard that requires multiple interfaces to communicate shall provide a set of properly named schema files depending whether those services are intended for the equipment or for a particular client. Figure 1 shows an example of these schema files. 8.10.3 The following convention will be used with SEMI standards: <Standard Name>-<Version>[-<Service Role>]-<Schema Classification>.<Schema Type> Where: <Standard Name>:: $: =$ Short name of the standard or SEMI assigned “E” number ( Ex. E125-1 or E132-1 or E128 or CommonComponent) <Version> : $\\mathrel { \\mathop : } = \\mathrm { V } 0 3 0 5$ (Release or publication date of the"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention\n\nContent: standard) <Service Role> :: $\\mathbf { \\sigma } : =$ Only applies to web services or wsdl files . (Ex. SessionClient, SessionManager, SecurityAdmin) <Schema Classification> :: $: =$ “Schema”, “Binding” or ”PortType”. <Schema Type> :: $: =$ xsd or wsdl For data type definition schema files the following are acceptable names: Unit-V0305-Schema.xsd E125-V1104-Schema.xsd CommonComponents-V0705-Schema.xsd For Web Service files the following are acceptable names: E125-1-V0305-MetadataClient-Binding.wsdl E132-1-V1104-SessionClient-PortType.wsdl E132-1-V1104-SessionManager-PortType.wsdl NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention (Part 3)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # 8.10  Schema File Naming Convention\n\nContent: herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights are entirely their own responsibility."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # RELATED INFORMATION 1",
    "content": "NOTICE:  This related information is not an official part of SEMI E121 and was derived from the work of the North American Information and Control Committee.  This related information was approved for publication by full letter ballot on November 4, 2004."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1  Overview of XML Resources, Organizations and Standards",
    "content": "R1-1.1  There are an extensive number of resources in the area of XML.  Most of the information is readily available from organizations such as OMG, W3C, RosettaNet, ebXML, OASIS, Sun Micro Systems, IBM and others through their web sites. There has been a lot of work standardizing dictionaries and vocabularies for several industries and these documents can be used until further work is generated in this industry. Books are also widely available from several editorial companies like O’Reily, Wrox, SAMS, Addison Wesley and other to mention some. Titles vary from publisher to publisher but the information is in general the same. Next, is a list of these organizations and their role in the development of standards for XML."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.2  OMG",
    "content": "R1-1.2.1  The Object Management Group (OMG) is an open membership, not-for-profit consortium that produces and maintains computer industry specifications for interoperable enterprise applications. The membership roster, comprises of about 800 scientists from the industry, includes virtually every large company in the computer industry, and hundreds of smaller ones.  Their flagship specification is the multi-platform Model Driven Architecture (MDA), recently underway but already well known in the industry. It is based on the modeling specifications the MOF, the UML, XMI, and CWM. OMG’s own middleware platform is CORBA, which includes the Interface Definition Language OMG IDL, and protocol IIOP. The Object Management Architecture (OMA) defines standard services that will carry over into MDA work shortly. OMG Task Forces standardize Domain Facilities in industries such as healthcare, manufacturing, telecommunications, and others. This organization is of interest because of the work made in the areas of UML, XMI and MOF. Link information: www.OMG.org"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.3  W3C (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.3  W3C\n\nContent: R1-1.3.1 The World Wide Web Consortium was created in October 1994 to lead the World Wide Web to its full potential by developing common protocols that promote its evolution and ensure its interoperability. W3C has more than 500 Member organizations from around the world and has earned international recognition for its contributions to the growth of the Web. By promoting interoperability and encouraging an open forum for discussion, W3C commits to leading the technical evolution of the Web. In just over seven years, W3C has developed more than 35 technical specifications for the Web’s infrastructure. Some examples of those technical specifications are: The XML 1.0 Recommendation (published in February 1998). This was the first step towards the next generation Web, allowing each community to design languages that suit their particular needs and integrate them harmoniously into a general infrastructure based on XML. Since XML 1.0, a number of Recommendations have added to the XML infrastructure: XML Namespaces"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.3  W3C (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.3  W3C\n\nContent: was published in January 1999, Associating Style Sheets with XML documents were published in June 1999, and XSLT, for XML transformations, was published in November 1999. Web services and SOAP (Simple Object Application Protocol) recommendations are being voted and will be published in a near date. Link information: www.w3.org"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.4  ebXML",
    "content": "R1-1.4.1  ebXML (Electronic Business using eXtensible Markup Language), sponsored by UN/CEFACT and OASIS, is a modular suite of specifications that enables enterprises of any size and in any geographical location to conduct business over the Internet. Using ebXML, companies now have a standard method to exchange business messages, conduct trading relationships, communicate data in common terms and define and register business processes. Technical work on ebXML moves forward as a coordinated activity between members of UN/CEFACT and OASIS. Some of the standards driven by this consortia are: ebXML Messaging Services, Registries and Repositories, Collaborative Protocol Profile and Implementation, Interoperability and Conformance work is conducted within the OASIS technical process, because of the Consortium’s expertise in XML standards development. ebXML Core Components and Business Process Models is advanced within UN/CEFACT, because of its vast experience in EDI standards. Link information: www.ebXML.org"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.5  RossetaNet (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.5  RossetaNet\n\nContent: R1-1.5.1 A consortium of more than 400 of the world’s leading Electronic Components (EC), Information Technology (IT), Semiconductor Manufacturing (SM) and Solution Provider (SP) companies, RosettaNet is a selffunded, non-profit organization dedicated to creating, implementing and promoting open e-business standards. These standards form a common e-business language, aligning processes between trading partners on a global basis. RosettaNet is named after the Rosetta stone, which, carved with the same message in three languages, led to the understanding of hieroglyphics. RosettaNet, like the Stone, is breaking language barriers and making history. RosettaNet drives collaborative development and rapid deployment of Internet-based business standards, creating a common language and open e-business processes that provide measurable benefits and are vital to the evolution of the global, high technology trading network. Developed with the collaboration and expertise of leading high-tech companies, RosettaNet"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.5  RossetaNet (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.5  RossetaNet\n\nContent: standards offer a robust nonproprietary solution, encompassing data dictionaries, implementation framework, and business message schemas and process specifications, for e-business standardization. RosettaNet standards include the RosettaNet Business Dictionary, RosettaNet Technical Dictionary, RosettaNet Implementation Framework (RNIF) and RosettaNet Partner Interface Processes $\\textsuperscript { \\textregistered }$ $\\left( \\mathrm { P I P } \\circledast \\right)$ . Link information: www.rosetta.org"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.6  UN/CEFACT",
    "content": "R1-1.6.1  UN/CEFACT is the United Nations body whose mandate covers worldwide policy and technical development in the area of trade facilitation and electronic business. Headquartered in Geneva, it has developed and promoted many tools for the facilitation of global business processes including UN/EDIFACT, the international EDI standard. Its current work “programme” includes such topics as “Simpl-edi” and “Object Oriented edi” and it strongly supports the development and implementation of open interoperable, global standards and specifications for electronic business. Link information: www.unece.org/cefact"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.7  OASIS (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.7  OASIS\n\nContent: R1-1.7.1 OASIS is the international, not-for-profit consortium that advances electronic business by promoting open, collaborative development of interoperability specifications. The XML.ORG Registry provides as an open community clearinghouse for distributing and locating XML application schemas, vocabularies and related documents. OASIS serves as the home for industry groups and organizations interested in developing XML specifications. OASIS is a not-for-profit, global consortium that drives the development, convergence and adoption of e-business standards. OASIS produces worldwide standards for security, Web services, XML conformance, business transactions, electronic publishing, topic maps and interoperability within and between market places. OASIS has more than 400 corporate and individual members in 100 countries around the world. OASIS and the United Nations jointly sponsor ebXML, a global framework for e-business data exchange. OASIS operates XML.org, a community clearinghouse for XML application"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.7  OASIS (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.7  OASIS\n\nContent: schemas, vocabularies and related documents. OASIS hosts The XML Cover Pages, an online reference collection for interoperable markup language standards. The OASIS Network includes CGM Open and LegalXML. Link information: http://www.oasis-open.org"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.8  NIST (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.8  NIST\n\nContent: R1-1.8.1 Founded in 1901, NIST is a non-regulatory federal agency within the U.S. Commerce Department’s Technology Administration. NIST’s mission is to develop and promote measurements, standards, and technology to enhance productivity, facilitate trade, and improve the quality of life. NIST carries out its mission in four cooperative programs: NIST Laboratories, conducting research that advances the nation’s technology infrastructure and is needed by U.S. industry to continually improve products and services; the Baldrige National Quality Program, which promotes performance excellence among U.S. manufacturers, service companies, educational institutions, and health care providers; conducts outreach programs and manages the annual Malcolm Baldrige National Quality Award which recognizes performance excellence and quality achievement; the Manufacturing Extension Partnership, a nationwide network of local centers offering technical and business assistance to smaller manufacturers; and the Advanced Technology"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.8  NIST (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.8  NIST\n\nContent: Program, which accelerates the development of innovative technologies for broad national benefit by co-funding R&D partnerships with the private sector. One program in particular is SIMA. The SIMA Program seeks to provide U.S. manufacturers with capabilities enabling contextually meaningful data to be shared among business activities such that reliable information is accessible when and where it is needed. Link information: www.NIST.gov"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-1.9  ISO",
    "content": "R1-1.9.1  The International Organization for Standardization (ISO) is a worldwide federation of national standards bodies from some 140 countries, one from each country. ISO is a non-governmental organization established in 1947. The mission of ISO is to promote the development of standardization and related activities in the world with a view to facilitating the international exchange of goods and services, and to developing cooperation in the spheres of intellectual, scientific, technological and economic activity. ISO’s work results in international agreements that are published as International Standards. This guide may use some of the recommendations defined in ISO 11179 Document that defines a framework for the specification and standardization of data elements. Link information: www.ISO.org."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 1)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: R1-2.1 Attribute — A qualifier on an XML tag that provides additional information. For example, in the tag <slide: title $= ^ { \\mathsf { \\Gamma } }$ \"My Slide\"/>, title is an attribute, and My Slide is its value. R1-2.2 Binding — Construction of the code needed to process a well-defined bit of XML data. R1-2.3 Comment — Text in an XML document that is ignored, unless the parser is specifically told to recognize it. A comment is enclosed in a comment tag, like this: <!-- This is a comment $$ . R1-2.4 Content — The part of an XML document that occurs after the prolog, including the root element and everything it contains. R1-2.5 CDATA — A predefined XML tag for “Character DATA” that says “don’t interpret these characters”, as opposed to “Parsed Character Data” (PCDATA), in which the normal rules of XML syntax apply (for example, angle brackets demarcate XML tags, tags define XML elements, etc.). CDATA sections are typically used to show examples of XML syntax. Like this: <![CDATA[ <slide>..A"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 2)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: sample slide..</slide> ]]> which displays as: <slide>..A sample slide.. </slide> R1-2.6 Data — The contents of an element generally used when the element does not contain any sub elements. When it does, the more general term content is generally used. When the only text in an XML structure is contained in simple elements, and elements that have sub elements have little or no data mixed in, then that structure is often thought of as XML “data”, as opposed to an XML document. R1-2.7 Declaration — The very first thing in an XML document, which declares it as XML. The minimal declaration is <?xml version $= \" 1 . 0 \" ? >$ . The declaration is part of the document prolog. R1-2.8 Document — In general, an XML structure in which one or more elements contain text intermixed with sub elements. See also: data. R1-2.9 DOM — Document Object Model. A tree of objects with interfaces for traversing the tree and writing an XML version of it, as defined by the W3C specification. R1-2.10 Element — A unit of"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 3)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: XML data, delimited by tags. An XML element can enclose other elements. For example, in the XML structure, “<slideshow><slide>..</slide><slide>..</slide></slideshow>”, the <slideshow> element contains two <slide> elements. R1-2.11 Entity — A distinct, individual item that can be included in an XML document by referencing it. Such an entity reference can name an entity as small as a character (for example, “&lt” , which references the less-than symbol, or left-angle bracket $( < )$ . An entity reference can also reference an entire document, or external entity, or a collection of element definitions (a parameter entity). R1-2.12 Entity Reference — A reference to an entity that is substituted for the reference when the XML document is parsed. It may reference a predefined entity like &lt; or it may reference one that is defined in the schema. In the XML data, the reference could be to an entity that is defined in the local subset of the schema or to an external XML file (an external entity)."
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 4)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: The schema can also carve out a segment of schema specifications and give it a name so that it can be reused (included) at multiple points in the schema by defining a parameter entity. R1-2.13 Error — A SAX parsing error is generally a validation error—in other words, it occurs when an XML document is not valid, although it can also occur if the declaration specifies an XML version that the parser cannot handle. See also: fatal error, warning. R1-2.14 External Entity — An entity that exists as an external XML file, which is included in the XML document using an entity reference. R1-2.15 External Subset — That part of the schema that is defined by references to external .dtd or .xsd files. R1-2.16 Fatal Error — A fatal error occurs in the SAX parser when a document is not well formed, or otherwise cannot be processed. See also: error, warning. R1-2.17 General Entity — An entity that is referenced as part of an XML document’s content, as distinct from a parameter entity, which is referenced in"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 5)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: the schema. A general entity can be a parsed entity or an unparsed entity. R1-2.18 HTML — Hypertext Markup Language. The language of the Web. A system where every document has a globally unique location, and documents can link to one another. R1-2.19 Local Subset — That part of the schema that is defined within the current XML file. R1-2.20 Namespace — A standard that lets you specify a unique label to the set of element names defined by a schema. A document using that schema can be included in any other document without having a conflict between element names. The elements defined in your schema are then uniquely identified so that, for example, the parser can tell when an element called <name> should be interpreted according to your schema, rather than using the definition for an element called “name” in a different schema. R1-2.21 Normalization — The process of removing redundancy by modularizing, as with subroutines, and have removing superfluous differences by reducing them to a common"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 6)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: denominator. For example, reducing them to a single NL normalizes line endings from different systems, and multiple white space characters are normalized to one space. R1-2.22 Notation — A mechanism for defining a data format for a non-XML document referenced as an unparsed entity. This is a holdover from SGML that creaks a bit. The newer standard is to use MIME data types and namespaces to prevent naming conflicts. R1-2.23 OASIS — Organization for the Advancement of Structured Information Standards. Their home site is http://www.oasis-open.org/. The schema repository they sponsor is at http://www.XML.org. R1-2.24 Parsed Entity — A general entity which contains XML, and which is therefore parsed when inserted into the XML document, as opposed to an unparsed entity. R1-2.25 Parser — A module that reads in XML data from an input source and breaks it up into chunks so that your program knows when it is working with a tag, an attribute, or element data. A no validating parser ensures that the XML"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 7)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: data is well formed, but does not verify that it is valid. See also: validating parser. R1-2.26 Processing Instruction — Information contained in an XML structure that is intended to be interpreted by a specific application. R1-2.27 Prolog — The part of an XML document that precedes the XML data. The prolog includes the declaration and an optional schema. R1-2.28 Reference — See entity reference. R1-2.29 RDF — Resource Description Framework. A standard for defining the kind of data that an XML file contains. Such information could help ensure semantic integrity, for example by helping to make sure that a date is treated as a date, rather than simply as text. R1-2.30 RDF Schema — A standard for specifying consistency rules (for example, price must be greater than zero, discount must be less than $1 5 \\%$ ) that apply to the specifications contained in an RDF. R1-2.31 Root — The outermost element in an XML document. The element that contains all other elements. R1-2.32 SAX — “Simple API for"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 8)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: XML”. An event-driven interface in which the parser invokes one of several methods supplied by the caller when a “parsing event” occurs. “Events” include recognizing an XML tag, finding an error, encountering a reference to an external entity, or processing a schema specification. R1-2.33 Schema — A database-inspired method for specifying constraints on XML documents using an XMLbased language. Schemas address deficiencies in DTDs, such as the inability to put constraints on the kinds of data that can occur in a particular field (for example, all numeric). Since schemas are founded on XML, they are hierarchical, so it is easier to create an unambiguous specification, and possible to determine the scope over which a comment is meant to apply. R1-2.34 SGML — Standard Generalized Markup Language. The parent of both HTML and XML. However, while HTML shares SGML’s propensity for embedding presentation information in the markup, XML is a standard that allows information content to be totally"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 9)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: separated from the mechanisms for rendering/displaying that content. R1-2.35 Tag — A piece of text that describes a unit of data, or element, in XML. The tag is distinguishable as markup, as opposed to data, because it is surrounded by angle brackets ( $\\mathbf { \\bar { \\Phi } }$ and $>$ ). For example, the element <name>My Name</name> has the start tag <name>, the end tag </name>, which enclose the data “My Name”. To treat such markup syntax as data, you use an entity reference or a CDATA section. R1-2.36 Unicode — A standard defined by the Unicode Consortium that uses a 16-bit “code page” which maps digits to characters in languages around the world. Because 16 bits covers 32,768 codes, Unicode is large enough to include all the world’s languages, with the exception of ideographic languages that have a different character for every concept, like Chinese. For more info, see http://www.unicode.org/. R1-2.37 Unparsed Entity — A general entity that contains something other than XML. By its"
  },
  {
    "title": "SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML (Part 10)",
    "content": "Title: SEMI E121-0305 GUIDE FOR STYLE & USAGE OF XML FOR SEMICONDUCTOR MANUFACTURING APPLICATIONS - # R1-2  Glossary of Terms in XML\n\nContent: nature, then, an unparsed entity contains binary data. R1-2.38 URI — A “Universal Resource Identifier”. A URI is either a URL or a URN. (URLs and URNs are concrete entities that actually exist. A “URI” is an abstract superclass -- it’s a name we can use when we know we are dealing with either an URL or an URN, and we don’t care which. R1-2.39 URL — Universal Resource Locator. A pointer to a specific location (address) on the Web that is unique in the entire world. The first part of the URL defines the type of address. For example, http:/ identifies a Web location. The ftp:/ prefix identifies a downloadable file. Other prefixes include file:/ (a file on the local disk system) and mailto:/ (an email address). R1-2.40 URN — Universal Resource Name. A unique identifier that identifies an entity, but doesn’t tell where it is located. That lets the system look it up to see if a local copy exists before going out to find it on the Web. It also allows the web location to change, while still allowing"
  }
]