[
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 7.4  Operational Descriptions (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 7.4  Operational Descriptions\n\nContent: the case of equipment types that always have a one to one relationship between a control job and a process job it may be convenient for a process job abort or stop to automatically abort the respective control job. In the same sense, if a control job specifies more than one process job, it may be convenient for an abort or stop of all process jobs to automatically abort or stop the respective control job."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8  ControlJob Object Model",
    "content": "8.1  This specification only standardizes the ControlJob object’s interface.  The other objects provide a context for the ControlJob interface.  Since only the interface is standardized, it is not a requirement for equipment to implement a control job object, it is only required that the equipment provide an external interface that provides the services and behavior defined for the ControlJob."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.2  Material to Job Linkage",
    "content": "8.2.1  The equipment has relationships with many other components not illustrated in Figure 1.  In particular, from its knowledge based on substrate and carrier tracking capabilities, the equipment shall connect the process job material list to the materials in the carriers that it has.  It is the responsibility of the factory host to make sure that the description or identifiers of material contained in carriers can be mapped to the material identifiers in the process job definition."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.3  Control Jobs and Carriers",
    "content": "8.3.1  A control job may specify work for several carriers.  The supplier shall document the behavior of the equipment in the case where a carrier is specified for use in more than one control job."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4  Attribute Definitions",
    "content": "8.4.1  The attributes in Table 1 shall be accessible using the Object Services standard (SEMI E39).  Object services is a set of messages which may be required of any service provider which is modeled by objects.  An object model for a service provides a consistent naming convention for exchanging information between the service provider and user.  Object services implementations shall be consistent with the service’s object and state models.  For instance, if an attribute can only be modified in a certain state, then a request to set that attribute when the model is in the wrong state shall be rejected (fail). ControlJob Attributes shall be modifiable if and only if the ControlJob is not in either the EXECUTING or COMPLETED states by using OSS to change them (see $\\ P 1 4 . 3 . 1 )$ .  \nTable 1  ControlJob Attributes  \n8.4.2  A number of the ControlJob attributes are composite data types.  The constituent data is defined in Table 2.  \nTable 2  Attribute Data Definitions"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.3  ControlRule",
    "content": "8.4.3.1  For equipment that supports this attribute (field), the host sets this in order to achieve better host processing control capabilities.  For example, the host may have previously measured characteristics of the material to be processed.  A standard recipe is used based on the product and process step, but based on the measured characteristics, the application of the recipe is biased by the specified rule and the value that is passed to the rule (RuleValue).  However, use of ControlRule should not be considered to be limited to only this type of application."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.4  DataCollectionPlan",
    "content": "8.4.4.1  The DataCollectionPlan is a name given by the host to associate data collection activities to a specific control job.  In general, it provides a way for the equip-ment to then inform and coordinate with the host to receive data collection requests.  A DataCollectionPlan is generic and will be applied to many control jobs. The variable itself, DataCollectionPlan, will hold no significance for the equipment.  It is simply a label the equipment reports back when requested by the host.  Normally, the host upon receiving the ControlJob START event would include DataCollectionPlan as a data variable to be reported.  The host then knows that the time is appropriate to set up various trace reports and event reports on the equipment.  Potentially, all jobs that specify the same product type and process capability could specify the same DataCollectionPlan."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.5  OutputRule",
    "content": "8.4.5.1  This attribute can only be supported by equipment that has some means to determine the status of material that it has processed.  For equipment with that ability, the rule will usually take the form of a list of name value pairs.  The names will be material status and the values will be measurement thresholds that correspond to the status category (such as, Good, Reject, Rework, etc.).  Substrate (material) status changes should be recorded in substrate histories created by the equipment.  \n8.4.5.2  Equipment which also supports the MtrlOutbyStatus shall use the status determined by the OutputRule to place substrates at the Destination associated with MaterialStatus."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.6  PauseEvent",
    "content": "8.4.6.1  For equipment which can support it, this attribute contains a list of equipment events, specified by the host, at which the host expects the equipment to PAUSE the ControlJob.  Equipment suppliers shall document any events that can be used for the pausing of control jobs.  Pausing a control job causes it to stop initiating process jobs.  The host might use this to stop processing after one or more process jobs has started in order to await results before processing the rest of the material in the control job."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.7  ProcessOrderMgmt",
    "content": "8.4.7.1  This is an enumerated attribute that defines the order in which processing will occur.  This standard defines three enumerations.  For some equipment other enumerations may be possible.  If they are the supplier shall document them."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.7.2  LIST",
    "content": "8.4.7.2.1  When ProcessOrderMgmt is set to this value, process jobs shall be initiated in the order of the list in ProcessingCtrlSpec."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.7.3  ARRIVAL",
    "content": "8.4.7.3.1  When ProcessOrderMgmt is set to this value, process jobs shall be initiated as the material for the job arrives.  Any jobs that do not require material will be initiated first."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 8.4.7.4  OPTIMIZE",
    "content": "8.4.7.4.1  When ProcessOrderMgmt is set to this value, process jobs shall be initiated in an order to be determined by internal equipment algorithms, that optimize the throughput of material in the equipment."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 9  Control Job State Model – Behavior",
    "content": "9.1  The following state chart defines the behavior of the ControlJob."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 9.2  State Definitions (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 9.2  State Definitions\n\nContent: 9.2.1 QUEUED — A ControlJob is queued after its creation or de-selection. A newly created ControlJob is placed at the tail of the queue. 9.2.2 SELECTED — In this state, the ControlJob does not initiate process jobs specified in it and therefore predefined (based on recipe variable parameters) process conditions can be modified. The processing resource is reserved (not available for any other jobs) by the ControlJob in the SELECTED state. If materials, required by the ControlJob, for processing have not arrived at the equipment, the ControlJob will stay in this state until materials arrive. If the ControlJob or the first process job in the ControlJob does not require material, this state is exited immediately. A SELECTED ControlJob can be de-selected if specified materials have not arrived. 9.2.3 WAITING FOR START — The ControlJob is waiting to receive a start command manually or remotely from the host. The ControlJob transitions to this state only if the StartMethod is set to FALSE (UserStart) and materials have arrived. 9.2.4 EXECUTING"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 9.2  State Definitions (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 9.2  State Definitions\n\nContent: — In this state, each process job in the ProcessingCtrlSpec is initiated in order, based on the value of the ControlJob’s ProcessOrderMgmt attribute as required resources become available and material for the job has been verified. Process jobs that have been initiated but that are WAITINGFORSTART or PAUSED shall block the availability of the resources that they require (see SEMI E40). NOTE 1: Process jobs that have blocked available resources shall cause the ControlJob to stop initiating subsequent process jobs that use those resources. 9.2.5 PAUSED — When the ControlJob is paused it shall not commence the initiation of any more Process jobs. In this state, Process jobs that have not entered the “PROCESSING” state can be modified. Various attributes of the ControlJob can also be modified. This is equipment specific and shall be documented by the equipment supplier. 9.2.6 COMPLETED — A control job enters this state once all of its process jobs have been completed, stopped or aborted. Table 3 ControlJob State Transition Table 1"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10  Control Job Queue Model",
    "content": "10.1  The Queuing mechanism for control jobs will generally operate under FIFO (First in- First Out) constraints.\nThe commands used to monitor queue status and prevent deadlock conditions are specified here."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.2  Queue Integrity",
    "content": "10.2.1  To maintain queue integrity, only one operation shall be performed at any given time (e.g., the “Create” request shall be rejected by the equipment if the CJHOQ service is being processed).  The Queue is defined to be “locked” while it is performing an operation (and refusing any further operation until completion of the current operation)."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.3  Head of Queue Service",
    "content": "10.3.1  The Head of Queue service (CJHOQ) shall operate under the following rules:  \n1) All control jobs positioned between the specified control job and the head of the queue (including the job currently positioned at the head) will be moved back one position.  The specified control job will then be moved into the head of queue position.\n2) When the CJHOQ command is invoked, the queue will be “locked” to maintain integrity.\n3) In the case where only one control job exists in the queue, the command will perform no action on the queue."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.4  DeadLocks",
    "content": "10.4.1  The Head of Queue service (CJHOQ) requests a specific control job to be set as the next control job to be run.  In order to prevent deadlock when the job at Head of Queue and the job in the SELECTED state are both  \nawaiting material delivery, the CJHOQ command may be used to move a different job to the head of the queue position.  The potential dead lock is then broken by issuing the DE-SELECT service request."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.5  Utilization of Queue for Control Job Priority Management",
    "content": "10.5.1  Similar to Deadlock, certain cases may arise where a job at the head of the queue cannot be selected due to a lack of processing resources.  In this case, DE-SELECT command shall be rejected and consequently a series of DESELECT and CJHOQ commands may be issued in an attempt to find a job which can transition to SELECTED state.  \n10.5.2  To force a “hot job” to be the next job run, it could be necessary to send the CJStop message to the SELECTED job.  This case only happens when the job at the head of the queue (the hot job) does not yet have resources available.  \nNOTE 2:  Most equipment where this is possible can support parallel execution of Control Jobs.  Management of the queue(s) in this case is currently beyond the scope of this standard."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.6  Space in the Queue (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.6  Space in the Queue\n\nContent: 10.6.1 The QueueAvailableSpace variable data item is used to query the number of control job openings within the queue. The QueueAvailableSpace shall function according to the following rules: 1) This variable can only be guaranteed valid when no other operations are being performed simultan-eously on the queue. For example, don’t request this variable while a Create control job command is being processed by the equipment. 2) This variable shall be incremented whenever a control job in the queue is de-queued. That is, when a “Cancel”, “Abort”, or “Stop” command has been received and completed while the control job is queued. It should also be incremented when the SELECTED state is entered by a control job. However, if this transition occurs as a result of the “Deselect” command (at least one job in queue, and a control job in the SELECTED state), no change should be made to the variable value. 3) This variable should be decremented whenever a control job joins the queue. That is, when a “Cre-ate” command is received and accepted. It"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.6  Space in the Queue (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 10.6  Space in the Queue\n\nContent: should also be decremented if a “Deselect” command is issued on a control job in the SELECTED state and no other jobs currently reside in the queue. 4) The equipment should reject the “Create” command when this variable is equal to zero. 10.7 Getting a List of Queued Jobs 10.7.1 The QueuedCJobs Variable Data Item is used to query the names of the control jobs currently residing in the queue. It lists items starting at the head of the queue. 10.7.2 The QueuedCJobs Variable Data Item shall function according to the following rules: 1) This variable can only be guaranteed valid when no other operations are being performed simultan-eously on the queue. 2) This variable list will be modified whenever a suc-cessful “Create” command is received. Addition-ally, “Cancel”, “Abort”, and “Stop” commands issued on control jobs residing in the queue will modify this variable list. Any use of the “Deselect” command will also modify the variable list."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 11  Properties for Carriers",
    "content": "11.1  Compliance to Control Job Management requires that the equipment track the status of individual carriers.  In particular, the factory needs to know the status of carriers with respect to control jobs.  Carriers may have various properties that are beyond the scope of this standard.  However, there are specific properties that are needed for Control Jobs."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 11.2  Carrier Verification",
    "content": "11.2.1  The equipment needs to know when a carrier has been verified as proper.  Only process jobs associated with the carrier that has been verified shall be initiated by a control job.  Depending on the equipment’s capabilities, verification may include verification by an equipment read of the carrier’s ID (identification) and the reading of the substrate (e.g., wafer) slot map.  The ControlJob determines if the carrier is verified by checking the carrier’s  \nattributes that indicate the level to which a carrier has been verified.  This section is reserved for further specification of this requirement."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 11.3  Carrier Completion for Control Jobs",
    "content": "11.3.1  A carrier that has been loaded onto the equipment may go through three stages: first, it is in the “not accessed” stage until it is accessed by a control job.  When the carrier is at the substrate port and unloading of the substrates within the carrier begins, the carrier enters the “in access” stage.  Once it enters this stage, it remains in this stage until all material has been returned to the carrier, no active control job exists that is using it and no control jobs in the queue exist that reference it.  The equipment shall provide a property of the carrier that shows the current stage of all carriers.  The equipment shall provide a “CarrierComplete” or “CarrierStopped” event for each change in stage.  The event when the carrier enters the “in access” stage informs the host that the carrier may not be removed from the equipment.  The event when the carrier enters the “completed” stage informs the host that the carrier may be removed."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.1  Service Definitions",
    "content": "Table 4  Service Definitions Table"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.2  Parameter Definitions",
    "content": "Table 5  Parameter Definitions Table  \n12.2.1  Action Parameter — The Control Job services CJCancel, CJStop, and CJAbort can all cause Process Jobs to be terminated, as specified in SEMI E40. In these Control Job services, the parameter “Action” specifies the disposition of the Process Job objects for the terminated Process Jobs. “Action” specifies one of the following enumerated values: SAVEJOBS and REMOVEJOBS.  This Action parameter only affects Process Jobs that are in the QUEUED/POOLED state."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.3  Message Details (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.3  Message Details\n\nContent: 12.3.1 This section specifies parameter usage by the service messages. 12.3.2 Creating ControlJobs — ControlJobs shall be created by using the OSS (SEMI E39) Object Create message. The following table defines the use of the AttrSetting arguments to the Object Create service. Note: ObjType is a required argument of Object Create and therefore should not be reset by including it as an AttrSetting argument. In the table M indicates mandatory, O indicates optional, and R specifies restricted (shall be ignored if used). 12.3.3 The process jobs specified for a control job must exist prior to calling this message. If a process job does not exist, the Create service shall fail and the ObjStatus shall return a list of any PRJob identifiers that were not present. The Create request shall be rejected if the ControlJob queue is full. Newly created control jobs will be put at the end of the queue. Table 6 SetAttr Arguments Table 12.3.4 CJStart — Starts jobs that require a user start. The host sends this command only to a Control Job from which it has"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.3  Message Details (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 12.3  Message Details\n\nContent: received a WAITINGFORSTART event."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table\n\nContent: 12.3.5 CJPause — The ControlJob shall stop initiating process jobs. Process jobs in the EXECUTING state are not affected by this command. Table 8 CJ Pause Service Parameter Definitions Table 12.3.6 CJResume — The ControlJob shall resume initiating process jobs. Table 9 CJResume Service Parameter Definitions Table 12.3.7 CJCancel — Used to remove a ControlJob from the Queue. The command shall only succeed for jobs in the QUEUED state. Table 10 CJCancel Service Parameter Definitions Table 12.3.8 CJDeselect — Shall only succeed for jobs in the SELECTED state. Deselected jobs must trade places with the job that is currently at the head of the queue. If the job at the head of the queue cannot transition to the SELECTED state, then the deselect request shall be rejected. See the section on Control Job Queue Model for information on breaking possible deadlocks. Table 11 CJDeselect Service Parameter Definitions Table 12.3.9 CJStop — Stops the ControlJob from initiating any more process jobs. Equipment should issue"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table\n\nContent: a STOP command to all running process jobs. When the currently running process jobs have stopped, the ControlJob will send a complete event with a status code indicating the ControlJob has stopped. ControlJobStop shall only succeed on a job in the ACTIVE or QUEUED states. When CJStop is issued in the QUEUED state, its affect will be identical to that of CJCancel. Table 12 CJStop Service Parameter Definitions Table 12.3.10 CJAbort — Stops the control job from initiating any more process jobs. The currently running process jobs are sent the Abort command by the equipment. When the equipment has detected the successful ABORT of currently running process jobs, the ControlJob shall send a complete event with a status code indicating the job was aborted. ControlJobAbort shall only succeed on a job in the ACTIVE or QUEUED states. When CJAbort is issued in the QUEUED state, its affect will be identical to that of CJCancel. The equipment due to a serious alarm situation (operator risk) may internally generate this"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table (Part 3)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # Table 7  CJStart Service Parameter Definitions Table\n\nContent: command. Table 13 CJAbort Service Parameter Definitions Table 12.3.11 CJHOQ — The other jobs in the queue are pushed back (rest of queue order remains unchanged). Table 14 CJHOQ Service Parameter Definitions Table"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 13  Variable Data",
    "content": "13.1  For objects defined by Control Job Management, the identifiers of the objects and all of the attributes of the objects shall be available for inclusion in event reports associated with those objects. The following attribute is the most likely to be used: CtrlJobID.  \n13.2  The following table provides the definition of additional Variable Data that equipment shall support for Control Job Management.  \nTable 15  Variable Data Definitions Table"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.1  Serial Execution of Control Jobs",
    "content": "14.1.1  Control jobs are initiated in sequential order by the equipment.  The order is based on the queue.  A ControlJob shall not issue a complete event (message) until all substrates have been placed in destination carriers. However, in many cases equipment must support multiple control jobs running at once; in order to support the factory requirement for equipment productivity.  This will be particularly true for multi-module equipment.  The next ControlJob in the queue shall start as soon as possible after processing has begun for the last ProcessJob in the previous ControlJob’s processing control specification."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.2  Parallel Execution of Control Job",
    "content": "14.2.1  Some equipment may be able to support parallel execution of control jobs.  The supplier must fully document this behavior and any additional services needed to manage it."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.3  Modifying Control Jobs",
    "content": "14.3.1  Control jobs shall be modifiable if and only if they are not in either the EXECUTING or COMPLETED states.  Jobs shall be modified by using OSS to change their attributes.  Modifications shall be rejected if the equipment is in the wrong state or requested value changes are out of range."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.4  Set-up, Pre- and Post-Conditioning",
    "content": "14.4.1  Whenever equipment has completed some processing work, with or without material, the equip-ment can be considered to be “set-up” for a certain process capability.  Information about the equipment’s set-up is important to the factory in determining the best material routing.  The SetupName variable defined in this standard is set by the host after host directed processing or changes to equipment constants.  If the equipment is used for processing while off-line or not under host command, the value of the variable shall be set to “unknown”.  It shall also be set to “unknown” immediately after any changes to equipment constants."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.5  Event Relationships",
    "content": "14.5.1  This section is reserved for specification of the relationship between process job events and control job events."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 14.5.2  PRJob Paused",
    "content": "14.5.3  PRJob Aborted or Stopped"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # 15  Compliance",
    "content": "15.1  Implementations compliant to this standard shall implement all the messages as specified in $\\ S 1 2$ .  All mandatory parameters must be supported.  The supplier shall document support for any of the optional parameters. Any additional parameters and messages shall be fully documented by the supplier.  Additional messages shall be used to support additional functionality and not as a replacement for any of messages specified herein.  \n15.2  Table 16 provides a checklist for Control Job Mangement (CJM) compliance."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # RELATED INFORMATION 1 APPLICATION NOTES (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # RELATED INFORMATION 1 APPLICATION NOTES\n\nContent: NOTICE: The material contained in these Applications Notes is not an official part of SEMI E94 and is not intended to modify or supersede the official standard. Rather, these notes are auxiliary information describing possible methods for implementing the protocol described by the standard and are included as reference material. The standard should be referred to in all cases. SEMI makes no warranties or representations as to the suitability of the material set forth herein for any particular application. The determination of the suitability of the material is solely the responsibility of the user. Service messages are presented with a “C” language style of application interface. For illustrative purposes values for variables may be included using the $ { \\mathbf { \\tilde { \\Sigma } } } ^ { 6 6 } = { \\mathbf { \\vec { \\Sigma } } } ^ { 3 }$ in the argument list. If not used the optional arguments are not shown. Service names (e.g., PRJob) are prefixed to function name. The scenarios assume processing is for wafers. The"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # RELATED INFORMATION 1 APPLICATION NOTES (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # RELATED INFORMATION 1 APPLICATION NOTES\n\nContent: services used in these scenarios are PRJob for Processing Management, ControlJob for Control Job Management, and CMS for Carrier Management Services."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-1  ControlJob for a Batch Processing Tool",
    "content": "R1-1.1  Tool processes the contents of a single carrier as a batch.  This example demonstrates the simplicity of using control jobs for a simple situation.  Wafer order is maintained, and material is returned to the source carrier."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-2  ControlJob for a Single Wafer Processing Tool",
    "content": "R1-2.1  Will be added later."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-3  ControlJob for Single Wafer Processing with Recipe Variable Parameters",
    "content": "R1-3.1  Will be added later.  \nR1-4  Error Recovery of Batch Tool ControlJob, Carrier Slot Map Failure  \nR1-4.1  Will be added later."
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-5  Carrier Swap During Processing",
    "content": "R1-5.1  Multiple carriers are loaded to a batch processing tool that has buffering, after carriers are emptied, they are removed and new empty carriers are loaded.  In this example, it requires four carriers for a batch.  \n$\\mathrm { C J S } =$ Control Job State, PJS $\\ c =$ Process Job State"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-6  Using Cleaning Wafers (Part 1)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-6  Using Cleaning Wafers\n\nContent: R1-6.1 For this scenario we assume a single wafer processing tool, such as an RIE. The tool has three fixed load ports; two for product material, one for cleaning material. A cleaning wafer is run before the $1 ^ { \\mathrm { s t } }$ and $1 3 ^ { \\mathrm { t h } }$ wafer of each carrier of product wafers. Show the load and unload of the cleaning wafers and the running of the ControlJob for processing material. Note that control jobs do not provide functionality for dispositioning collateral material consumed during processing (the cleaning wafers). The equipment is responsible for providing mechanisms to determine when this collateral material has been consumed (should be replaced). NOTICE: SEMI makes no warranties or representations as to the suitability of the standard set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant"
  },
  {
    "title": "SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-6  Using Cleaning Wafers (Part 2)",
    "content": "Title: SEMI E94-0705SPECIFICATION FOR CONTROL JOB MANAGEMENT - # R1-6  Using Cleaning Wafers\n\nContent: literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM)",
    "content": "This specification was technically approved by the Global Silicon Wafer Committee and is the direct responsibility of the North American Silicon Wafer Committee. Current edition approved by the North American Regional Standards Committee on August 16, 2004.  Initially available at www.semi.org September 2004, to be published November 2004.  Previously published November 2001."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 1  Purpose",
    "content": "1.1  This document maps the services and data of SEMI E94 to SECS-II streams and functions and data definitions."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 2  Scope",
    "content": "2.1  This is a specification covering equipment supporting automated control job management.  \n2.2  This document applies to all implementations of SEMI E94 that use the SECS-II message protocol (SEMI E5).  Compliance to this standard requires compliance to both SEMI E94 and SEMI E5.  \nNOTICE: This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory or other limitations prior to use."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 5  Terminology",
    "content": "5.1  None."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6  Mapping",
    "content": "6.1  This section shows the specific SECS-II streams and functions that shall be used for SECS-II implementation of the services defined in SEMI E94, as well as the parameter mapping for data attached to services."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6.2.1  Services Message Mapping",
    "content": "6.2.1.1  Table 1 defines the relationships between SEMI E94 services and SECS-II messages."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 3  Limitations",
    "content": "3.1  This specification applies to semiconductor equipment that also uses SEMI E40 Process Jobs."
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 4.1  SEMI Standards",
    "content": "SEMI E5 SEMI Equipment Communications Standard 2 Message Content (SECS-II)\nSEMI E30 ⎯  Generic Model for Communications and Control of Manufacturing Equipment (GEM)\nSEMI E39.1 ⎯  SECS-II Protocol for Object Services Standard (OSS)\nSEMI E40 ⎯ Standard for Processing Management (PJM)\nSEMI E53 ⎯  Event Reporting (ER)\nSEMI E94 Specification for Control Job Management (CJM)\nNOTICE: Unless otherwise indicated, all documents cited shall be the latest published versions.  \nTable 1  Services Message Mapping Table"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6.2.2  Event Message Mapping",
    "content": "6.2.2.1  Table 2 defines the relationships between SEMI E94 collection events and SECS-II messages.  \nTable 2  Event Message Mapping Table"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6.2.3  Parameter Mapping",
    "content": "6.2.3.1  Table 3 defines the relationships between SEMI E94 service parameters and SECS-II data definitions.  \nTable 3  Parameter to SECS-II Data Items Mapping"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6.2.4  SECS-II Data Items without Corresponding SEMI E94 Parameters",
    "content": "6.2.4.1  Table 4 contains the SECS-II data items that do not correspond to SEMI E94’s service parameter.  \nTable 4  Additional Data Item Requirements Table"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 6.2.5  Variable Data Item Mapping",
    "content": "6.2.5.1  Table 5 shows the specific SECS-II data classes, and formats needed for SECS-II implementations of SEMI E94 variable data items.  \nTable 5  Variable Data Item Mapping"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 7  SECS-II Attribute Definitions (Part 1)",
    "content": "Title: SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 7  SECS-II Attribute Definitions\n\nContent: 7.1 ControlJob Object SECS-II Attributes Definitions 7.1.1 The following are the SECS-II structure definitions for the E94 ControlJob Object. Table 6 ControlJob Object Attribute Definitions NOTICE: SEMI makes no warranties or representations as to the suitability of the standards set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer's instructions, product labels, product data sheets, and other relevant literature, respecting any materials or equipment mentioned herein. These standards are subject to change without notice. By publication of this standard, Semiconductor Equipment and Materials International (SEMI) takes no position respecting the validity of any patent rights or copyrights asserted in connection with any items mentioned in this standard. Users of this standard are expressly advised that determination of any such patent rights or copyrights, and the"
  },
  {
    "title": "SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 7  SECS-II Attribute Definitions (Part 2)",
    "content": "Title: SEMI E94.1-1104 SPECIFICATION FOR SECS-II PROTOCOL FOR CONTROL JOB MANAGEMENT (CJM) - # 7  SECS-II Attribute Definitions\n\nContent: risk of infringement of such rights are entirely their own responsibility."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT",
    "content": "This specification was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee.  Current edition approved by the North American Regional Standards Committee on August 27, 2001.  Initially available at www.semi.org September 2001; to be published November 2001.  Originally published February 2000."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 1  Purpose",
    "content": "1.1  This standard addresses the area of processing content with the direct intention of developing common software standards, so that problems involving operator training, operation specifications, and efficient development can be resolved more easily.  \n1.2  This standard is written to be “tool-neutral” without reference to, or reliance on, specific capabilities of platforms or operating systems. Neither is it intended that choices of software tools or detailed implementation strategies be dictated.  \n1.3  Note that all figures in this standard are schematic, are not drawn to scale, and unless otherwise specified, are not intended to provide implementation details about number of buttons, button sizes, panel sizes, etc."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 2  Scope",
    "content": "2.1  This standard specification applies to manufacturing equipment used in the production of semiconductors.  \n2.2  This standard may be applicable to other areas such as the manufacture of flat panel displays, but specific application to these areas is outside the scope of this document.  \n2.3  This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 3  Referenced Standards",
    "content": "None."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 4  Terminology (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 4  Terminology\n\nContent: 4.1 condition — a property of a displayed object or value (textual or numeric) that visually indicates, if applicable, whether the current state of an object or the current value violates the defined bounds of normal operational states or parameters, whether that violation is categorized as a minor exception (a caution) or a severe exception (an alarm), and provides no visual indication if no exception has occurred. 4.2 display objects — user interface elements displayed on the screen, such as function selection buttons, keyboard input buttons, graphics representing the equipment, etc. 4.3 functional area — a grouping of one or more views presenting information and control capabilities to the user. 4.4 icon — an icon (diagrammatic image) is a bitmap or other image used in GUI environments such as windowing systems to show different types of objects, improve operability, and help the user better understand the functionality underlying buttons. 4.5 navigation model — the navigation model determines how a user"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 4  Terminology (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 4  Terminology\n\nContent: interacts with a system to access functionality and information. 4.6 salience — a salience is a solid (or textured), colored border shown around a display object to indicate an alarm, caution, or other condition, or to draw the user’s attention to the display object."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5  Requirements",
    "content": "5.1  Each of the following sections is designated with one of the following labels:  \n5.1.1  Sections designated:"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Description",
    "content": "5.2.1  This section specifies the general appearance and behavior of basic display objects used throughout the interface, including buttons, saliences, and dialog boxes. It is intended that the use of other types of display objects (choose lists, data display and data entry fields, scroll-bars, etc.) is specifically allowed, and their use is at the discretion of the implementers.  \n5.2.1.1  There are two types of display objects; selectable and non-selectable. Some are selectable by the user to initiate or execute an action. Non-selectable graphics and user interface elements (such as pipes and text field labels, respectively) are read only, and no action is initiated or executed."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.2.1  Button Size",
    "content": "Mandatory  \n5.2.2.1.1  When a touchscreen device is used, button sizes must be large enough to ensure selection on the targeted display."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.2.2  Button Dimensions",
    "content": "Recommended  \n5.2.2.2.1  It is recommended that buttons shall have a minimum dimension of approximately $1 . 5 \\ \\mathrm { c m }$ on the shortest side. If a smaller size is used, the space between buttons must be increased to avoid selection errors. For installations where a keyboard and a mouse, light pen or other pointing device is available, button sizes in the navigation panel and the command panel may be made somewhat smaller (approximately $1 { - } 1 . 2 5$ cm), and the size of the information panel increased proportionally."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.2.3  Button Behavior",
    "content": "Mandatory  \n5.2.2.3.1  One type of button behavior is momentary; that is, user selection of a button causes a brief display of the down (selected) state of the button, followed immediately by a display of the up (unselected) state. The other button behavior is two-state; the button remains in the down state after user selection. User reselection of the button, and/or selection of another button, and/or selection of another display object restores the display of the up state. In some cases, the software will control the display of the down state or restore the up state, without direct user interaction.  \n5.2.2.3.2  For 2-D buttons, the down state shall be indicated by hatching, cross-hatching, or otherwise texturing the button in such a manner that does not obscure the button label."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.2.4  Button Text",
    "content": "Mandatory  \n5.2.2.4.1  Text for all button labels shall have the first letter of words capitalized unless it is an article or preposition not occurring at the beginning or end of the label, or unless the word’s conventional usage is not capitalized. Button labels that are all capital letters are harder to read than mixed case labels. Additionally, text in all capitals appears larger, and the user may attach more importance to the button than necessary simply because the label is visually distracting."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.3  Saliences (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.3  Saliences\n\nContent: Conditional 5.2.3.1 Saliences, colored, textured, or both shall be displayed around buttons and other display objects to indicate their condition, which may include caution, alarm, user attention required or requested, processing, unfinished task notification, and other conditions. 5.2.3.2 A salience is displayed to draw the user’s attention to a display object when its condition is not normal or OK (in this case, the absence of a displayed salience shall indicate a normal or OK condition), or when the salience provides information that benefits the user in the performance of tasks or the monitoring of equipment functions and operations. 5.2.3.3 A salience shall not hide the display object it surrounds. Saliences shall not be used to indicate the state (open, closed, on, off, etc.) of display objects. 5.2.3.4 On color displays, alarm saliences shall appear bright red, caution saliences shall appear bright yellow, and processing and unfinished task saliences shall appear medium blue. User attention required"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.3  Saliences (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.3  Saliences\n\nContent: or requested saliences, (for example, “Ready to Load,” or “Ready to Unload”) shall appear medium green."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.4  Dialog Boxes",
    "content": "Description  \n5.2.4.1  Dialog boxes are secondary windows used to display supplemental information, solicit information from the user, or report errors.  \n5.2.4.2  Dialog boxes are used to provide additional information to the user; to display detailed information not shown on the information panel for controlling the system, and to display detailed information for monitoring system operation."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes\n\nContent: Mandatory 5.2.5.1 Dialog boxes (which are always temporary) are displayed in response to some action initiated by the user. When displayed, a dialog box shall overlay a portion of the information panel, and shall not obscure the title panel. If invoked by user selection of a display object on the information or command panels, all the display objects on those two panels shall be disabled until the dialog box is dismissed. The title and navigation panels remain enabled. At the explicit request of the user, the dialog box is dismissed, and the underlying information is refreshed. 5.2.5.2 Dialog boxes contain a title bar at the top, a display (free use) area, and one or more dialog box window control buttons arranged horizontally at the bottom. The title bar text reflects the command or the nature of the event that invoked the dialog box. Dialog box window control buttons are centered on the width of the dialog box, with any other buttons (Apply, Logout, etc.) right-aligned and visually separated from the"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes\n\nContent: window control buttons. If the underlying operating system will not allow this alignment, then it is allowed that other alignments may be used, but only if the alignment is consistent across all dialog boxes. 5.2.5.2.1 User selection of a dialog box control button controls the dismissal of the dialog box and, when applicable, controls whether the user accepts or rejects information or choices displayed, or desires no action be performed. 5.2.5.2.1.1 An “OK” dialog box control button, when selected by the user, indicates acceptance of any choices or user inputs made, if any, and causes the dismissal of the dialog box. If no choices or user inputs were made, selecting this button indicates acceptance of any default values displayed. If user choices or inputs are required, this button shall be disabled until the choices or inputs are made. 5.2.5.2.1.2 A “Cancel” dialog box control button, when selected by the user, indicates no action should be taken, causes the dismissal of the dialog box, and returns the"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes (Part 3)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes\n\nContent: user to the state that existed prior to the invocation of the dialog box. 5.2.5.2.1.3 A “Yes” dialog box control button is displayed when the dialog box message is in the form of a question. User selection indicates a positive response to the question asked and causes the dismissal of the dialog box. 5.2.5.2.1.4 A “No” dialog box control button is displayed when the dialog box message is in the form of a question. User selection indicates no action should be taken, causes the dismissal of the dialog box, and returns the user to the state that existed prior to the invocation of the dialog box. 5.2.5.2.1.5 A “Close” dialog box control button is displayed (often as the only dialog box control button) when the dialog box message contains only information and does not require the user to make or accept choices, and shall be used instead of an “OK” dialog box control button in this case. The “Close” dialog box control button shall also be used instead of a “Cancel” dialog box control button when the user"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes (Part 4)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.5  Dialog Boxes\n\nContent: cannot be returned to the state that existed prior to the invocation of the dialog box. User selection indicates no action should be taken and causes the dismissal of the dialog box. 5.2.5.2.1.6 An “Apply” dialog box control button, when selected by the user, indicates acceptance of any choices or user inputs made, if any, but does not dismiss the dialog box. This button shall be disabled until one or more user choices or inputs are made. After user selection of this button, it shall be disabled until additional choices or user inputs are made, if any. 5.2.5.3 Dialog boxes may not be resized or moved, but may display a button equivalent to the Cancel button in the title bar. 5.2.5.4 Dialog boxes are classified into the following three types: Information dialog box Data input/selection dialog box Message dialog box 5.2.5.5 To be compliant with this specification, at least one of these dialog box types shall be supported."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.6  Information Dialog Box",
    "content": "Conditional  \n5.2.6.1  This dialog box type is used to provide additional information to the user about some display object or topic addressed by the information panel. User selection of a display object on the information panel invokes an information dialog box, if appropriate for the display object selected. The window control button to dismiss the dialog box shall be the Close button. Use of an OK button in this case is not allowed.  \n5.2.6.2  Implementation of this dialog box type shall be conditional on the equipment having the capability of providing the required information."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Conditional (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Conditional\n\nContent: 5.2.7.1 This dialog box type is used to request data input or selection from the user. If no keyboard or keypad is available, and the user must input characters, an on-screen representation (“mimic”) of one or both shall be displayed as part of the dialog box. The window control buttons are the OK and Cancel buttons. 5.2.7.2 Implementation of this dialog box type shall be conditional on the presence of display objects that allow user input or selection. message text is located to the right of the icon. It is recommended that icons from the underlying operating system be used to represent the message type as follows: Information in the form of a simple message Progress, informing the user of an ongoing process Attention, alerting the user of possible danger, or inability to execute a command, or requesting confirmation (either as a statement or as a question) Error, informing the user of danger or inability to execute a command (if effect is severe) 5.2.8.2 Note that most style guides no longer recommend the use"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Conditional (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Conditional\n\nContent: of a question mark icon when the message is phrased as a question, as its meaning could be ambiguous in some cases. The attention icon should be used instead. 5.2.8.3 The first two message types use the Close window control button. The second two use OK and Cancel, or Yes and No (and sometimes Cancel) if the message is phrased as a question. It is recommended that buttons or other display objects that would cause an error message be disabled in those circumstances. 5.2.8.4 Implementation of this dialog box type shall be conditional on the equipment having the capability of providing the required information."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.2.8  Message Dialog Box",
    "content": "Conditional  \n5.2.8.1  This dialog box type is used to provide a message to the user (including the reporting of errors) or to request confirmation of a user initiated action. The"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3  Basic Network Navigation Model",
    "content": "5.3.1  This standard specifies a simple navigation model designed specifically to minimize the number of actions and the amount of time required of the user.  \n5.3.2  The basic network navigation model is capable of displaying a number of views within a single level of hierarchy. The user does not have to traverse up and down menu or view “trees” when exercising control and monitoring tasks. As shown in the figure below, the basic navigation model is a network, supporting horizontal (lateral) transfer, at any time, between any of the functional areas in the interface. The basic network navigation model does not support more than one view in any functional area. Expansion of detail for views is typically implemented using dialog boxes.  \n5.3.3  Note that the diagram is schematic; it shows that user selection of a functional area shall display its associated information panel. Only one information panel shall be displayed at any time."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.4  Network Navigation Model with Sub-navigation (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.4  Network Navigation Model with Sub-navigation\n\nContent: Conditional 5.3.4.1 While maintaining the same basic structure, this navigation model supports multiple views within functional areas on the network. If any functional area has more than one view, all functional areas in the interface shall consistently use one of the two view sub-navigation methods described below. Lateral transfer between any of the views within a functional area is supported either by providing a single row of tabs which may be selected to change views (Figure 6), or by providing view sub-navigation buttons (Figure 7) in a separate screen area dedicated solely to sub-navigation. Expansion of detail for each of these views is typically implemented using dialog boxes. 5.3.4.2 The grouping of tasks within functional areas reflects the natural flow of information, events, and tasks in a way that is familiar to the user and that directly supports the attainment of successful process and equipment performance goals. Functional areas are user task oriented,"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.4  Network Navigation Model with Sub-navigation (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.4  Network Navigation Model with Sub-navigation\n\nContent: collecting together logically related monitoring and control functions, reducing the need to navigate between views. 5.3.4.3 Note that the diagrams are schematic; they show that user selection of a functional area shall display its associated information panel. Only one information panel shall be displayed at any time. Similarly, user selection of a tab or sub-navigation button displays only one of the views available at any time."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.5  Display Layout",
    "content": "Description  \n5.3.5.1  The display layout is designed for ease of use with touchscreen input devices and does not require a keyboard or other pointing device. By dividing the screen into rectangular panels, provision is made to accommodate the display and input of information organized by the tasks users must accomplish in managing and monitoring processing, maintaining and repairing the equipment, and other relevant work."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.6  Basic Layout",
    "content": "Mandatory  \n5.3.6.1  The basic layout shall contain four panels as shown and oriented in Figure 8. At a minimum, the interface shall support the orientation of the command panel on the right-hand side, unless the enhanced layout (Section 5.3.7) is implemented.  \n5.3.6.2  All the panels are tiled edge to edge to create the display, and only the relative position of the panels is specified in this standard. Panels may or may not display a visible border. For an interface that is the primary display (typically, but not always at the front of equipment), an outer window frame allowing window resizing, closing, or positioning shall not be shown or enabled. This is to prevent the user from mistakenly “losing” the window, which may result in a dangerous condition. If desired, a logged-in user with sufficient privileges may be allowed to resize, but not minimize or close, the primary display window. Secondary instances of the interface (e.g., displayed at a maintenance node or displayed at a remote node) may show and enable the outer window frame."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.7  Enhanced Layout",
    "content": "Recommended  \n5.3.7.1  It is strongly recommended that left-handed users be allowed to change the location of the command panel to the left-hand side (see Figure 9(b)) to avoid obscuring the screen when reaching with their left hand to make selections on the command panel when it is located on the right-hand side of the screen."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.8  Title Panel",
    "content": "Description  \n5.3.8.1  The title panel is a horizontal area above the information and command panels, at the top of the interface window. It is always displayed and contains the host communications status display (if host communications is supported), date/time display, Login/Logout button (if security is supported), message display area, and the name of the current view. It may optionally contain a corporate identifier or logo, a display of critical parameters, an audible alarm silencing button, orientation graphics, a light tower representation, and other items that should always be displayed to ensure effective operation."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.9  Title Panel Basic Information",
    "content": "Mandatory  \n5.3.9.1  Shown below is the title panel with the mandatory display objects. The relative positions shown, with the top portion of the title panel containing the date/time display at the left, the current view name to its right, and with the message area below the top portion, are mandatory."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.10  Title Panel with Conditional Information",
    "content": "Conditional  \n5.3.10.1  Shown below is the title panel with the mandatory display objects, plus the conditional host communications status display and the conditional Login/Logout button. The relative positions shown, with the host communications status display left-most, and the Login/Logout button at the upper right, are mandatory."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.10.2  Title Panel Host Communications Status",
    "content": "Conditional  \n5.3.10.2.1  If the equipment supports host communication then status information shall be included in the title panel. Information such as communications status (i.e., whether communications is active), communications state (i.e., connected, disconnected, etc.), and whether the equipment is in a local or remote mode may be displayed here. The display of specific information is dependent on the host communication protocol which may impose additional specific requirements on what is displayed."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.10.3  Title Panel Login/Logout Button",
    "content": "Conditional  \n5.3.10.3.1  The Login/Logout button label reads “Login Here” until a user is logged in, then displays a user identifier until the user logs out. User selection of the Login/Logout button invokes a dialog box where the user may enter a user identifier and password, or, if already logged in, may select a button to log out. If required by the implementation, when this dialog box is displayed, all other functions in the interface window may be disabled, including the navigation panel."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # Recommended",
    "content": "5.3.11.1  Shown below is an example of a layout for the title panel incorporating some recommended display objects and their relative positions."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.3.11.2  Title Panel Alarms Button",
    "content": "Recommended  \n5.3.11.2.1  Although not recommended for new designs, the title panel may also contain an Alarms button that allows the user to respond to cautions and severe alarms. In this case, the Alarms navigation button in the navigation panel shall be omitted, and any alarms accessed through a title panel Alarms button shall be displayed in a dialog box, not as an information panel and its command panel."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4  Navigation Panel",
    "content": "Mandatory  \n5.4.1  Navigation buttons shall have a text label. In addition, they may also include an icon to graphically represent their function. When no icon is present, the button label shall be centered on the button. If an icon is present, the label shall be centered below the icon. Navigation buttons are arranged horizontally along the bottom of the display, in the navigation panel, which shall always be present."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.2  Required Navigation Functions (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.2  Required Navigation Functions\n\nContent: Mandatory 5.4.2.1 At a minimum, the user shall always be able to immediately access and respond to alarm and caution notifications, even when a dialog box is displayed on the current view. Dialog boxes shall not obscure the navigation panel. Additionally, the user shall always be able to immediately access other parts of the interface if such access is required to ensure the safe operation of the equipment. Only when prohibited by the operating system or other implementation limitations such that a displayed dialog box cannot be maintained during, or redisplayed after navigation, it is allowed that such access may be accomplished by displaying another dialog box that completely covers the originally displayed dialog box. When the overlaying dialog box is dismissed, the underlying dialog box is redisplayed, in the same state it was in prior to the invocation of the overlying dialog box (i.e., given the stated prohibition or limitations, it is not mandatory that access be provided through"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.2  Required Navigation Functions (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.2  Required Navigation Functions\n\nContent: navigation using the navigation panel). Immediate access shall mean that the user shall not have to dismiss or otherwise interact with any displayed dialog box in order to perform the required access. When the user navigates back or otherwise returns from the required access, the last selected view shall be displayed, along with any dialog box that was displayed, in the same state it was in. If no dialog box was displayed, the last selected view shall be displayed. 5.4.2.2 An allowed exception is a login and/or logout dialog box or screen if an implementation requires moda operation while logging in or out."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.3  Conditional Navigation Functions",
    "content": "Conditional  \n5.4.3.1  Except when absolutely prevented by the operating system or implementation limitations, the navigation panel shall always be available for user selection, even when a dialog box is displayed on the current view. This makes it possible for the user to directly and immediately access any functional area from anywhere within the user interface. Immediate access shall mean that the user shall not have to dismiss or otherwise interact with any displayed dialog box in order to perform the required access. When the user navigates back to a functional area, the last selected view is displayed, along with any dialog box that was displayed, in the same state it was in.  \n5.4.3.2  An allowed exception is a login and/or logout dialog box or screen if an implementation requires moda operation while logging in or out."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.4  Navigation Panel Layout",
    "content": "Mandatory  \n5.4.4.1  The figure below shows the navigation panel, with three buttons labeled “(Future)” indicating the positions where buttons may be placed if required by the specific implementation of the interface, or as a result of modifications or enhancements in future releases of the software. It is recommended that the navigation panel contain no more than ten buttons.  \n5.4.4.2  The navigation buttons shall be sequenced from left to right in descending order of expected frequency of use. The most frequently selected navigation button shall be left-most within the navigation panel; and the least frequently selected button shall be right-most."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.5  Navigation Panel Alarm and Help Buttons",
    "content": "Conditional  \n5.4.5.1  The two exceptions to the above ordering are the Alarms and Help navigation buttons, which, when they are supported in an implementation, shall be the next to right-most and right-most buttons, respectively. This placement ensures that the position of these buttons shall remain unchanged, even if subsequent interface modifications or enhancements require additional buttons. The Alarm button shall be placed so that the spacing between it and adjacent buttons is larger than the spacing between other buttons, to allow its selection quickly, and without error."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.6  Navigation Button Labels",
    "content": "Conditional  \n5.4.6.1  For each functional area, there is a corresponding navigation button identified by a text label (mandatory) and icon (recommended) identifying the functionality and information provided. The table below shows text labels (conditional) for the navigation buttons, a description of each functional area, and some recommended alternative labels.  \nTable 1  Functional Areas  \n5.4.6.2  The top to bottom ordering of the table reflects the left to right ordering of navigation buttons. Also allowed, but not recommended for new designs, is a left to right ordering of: System, Jobs, Equipment Setup, Recipes, History, Maintenance, and Configuration. The alternative labels specified in the table may be applied to this  \nordering also. Additional buttons, if required for a particular implementation, shall be added between the Setup and Alarm button positions."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences\n\nContent: Conditional 5.4.7.1 Only one navigation button at a time shall display a pressed appearance. Additionally, navigation buttons shall display colored salience coding for a number of purposes: 1, to indicate the user is viewing a functional area (medium blue salience); 2, to indicate an unfinished task (typically an open dialog box) in a functional area not currently displayed (medium blue salience); and 3, to inform the user that there are new or unacknowledged cautions or alarms (saturated yellow or saturated red salience, respectively). The caution and alarm saliences are displayed on the Alarms navigation button only. As an example, if the user has opened a dialog box in the Jobs functional area, and then selects the Recipes navigation button, the Recipes button shall display a pressed (down) appearance and a medium blue salience, and the Jobs button shall display an unpressed (up) appearance and a medium blue salience (Figure 14). This reminds the user that there is an open dialog box in"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences\n\nContent: the Jobs functional area. More than one navigation button may display the unfinished task salience. 5.4.7.2 The Jobs button may also display a medium green salience (not shown) to notify the user that the equipment is “Ready to Load,” “Ready to Unload,” “Ready to Run,” or is in a similar state such that the user’s attention is requested in the Jobs functional area. This is useful when the user has navigated to another functional area of the interface. If there is an unfinished task, its medium blue salience shall remain displayed, even if the user’s attention is requested. 5.4.7.3 The Alarm navigation button, in addition to the medium blue salience, displays a saturated (bright) yellow salience when there are new or unacknowledged cautions, or displays a saturated red salience when there are new or unacknowledged alarms. Only the severest level is displayed. That is, when there are both cautions and alarms, the red alarm salience shall be displayed. When there are no alarms and only"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences (Part 3)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.7  Navigation Panel Saliences\n\nContent: cautions, the caution salience shall be displayed. The figures below show the same situation as Figure 14, with Figure 15 showing a caution salience, and Figure 16 showing an alarm salience. If there are no cautions or alarms, the Alarm button displays a medium blue salience if the user is viewing the Alarms functional area, or if there is an unfinished task and another functional area is being viewed. If a caution or alarm occurs, the medium blue salience is replaced with the appropriate salience, and is only re-displayed when all cautions and alarms have been acknowledged or cleared."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8  Sub-navigation",
    "content": "Conditional  \n5.4.8.1  When sub-navigation is supported it shall be by a single row of tabs or buttons in a sub-navigation panel as shown below."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8.2  Sub-navigation Layout A — Tabs",
    "content": "5.4.8.2.1  Shown below are two orientations of the layout (right-hand and left-hand command panels), with subnavigation using tabs. This is the preferred method for new designs where more than one view per functional area is needed. User selection of a tab brings the tab to the front, displays its information and command panel, and allows the user access to its display objects. Use of tabs in each functional area must be consistent throughout the interface, even if there is only one view in a functional area, and thus, one tab."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8.3  Sub-navigation Layout $B$ — $S u b$ -navigation Panel With Buttons (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8.3  Sub-navigation Layout $B$ — $S u b$ -navigation Panel With Buttons\n\nContent: 5.4.8.3.1 Shown below are two orientations of the layout, with sub-navigation using view selection buttons in a subnavigation panel. The figure shows one possible relative location for a sub-navigation panel, but is not intended to restrict implementation. Other arrangements are allowed. However, if a sub-navigation panel is used, its size and location in each functional area must be consistent throughout the interface, even if there is only one view in a functional area, and thus, no buttons in the panel. 5.4.8.3.2 It is important in the layout to separate subnavigation methods from the global commands in the command panel. This limits the number of buttons needed in the command panel; and reduces or eliminates the need for multiple columns of buttons, which would alter the information panel display aspect ratio. If an information panel has a different aspect ratio than the others, its contents may appear to “jump” sideways when navigating,"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8.3  Sub-navigation Layout $B$ — $S u b$ -navigation Panel With Buttons (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.4.8.3  Sub-navigation Layout $B$ — $S u b$ -navigation Panel With Buttons\n\nContent: distracting the user. The separation of sub-navigation from commands accomplishes two important objectives; a) users do not become confused trying to differentiate sub-navigation from commands, and b) the aspect ratio of the information panel display is consistent for all views across all functional areas."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.5  Information Panel",
    "content": "Mandatory  \n5.5.1  The information panel displays a view or views of the information and graphics for each functional area. Graphics and other display objects are placed in this panel to achieve the control and monitoring capabilities required. If necessary, multiple views of information may be displayed within a functional area, one at a time, in the information panel.  \n5.5.2  When any functional areas have more than one view, the user must be able to switch between those views while remaining within the context of the current functional area. The ways the user may select among multiple views presented in this standard are called subnavigation methods to distinguish them from user navigation between functional areas using the navigation panel."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.6  Command Panel (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.6  Command Panel\n\nContent: Mandatory 5.6.1 The command panel is a vertical column of command buttons located to the right of the information panel (to the left if switched to accommodate left-handed users). Only buttons for common or global commands related to the current view displayed in the information panel shall be located in the command panel. If there are no common commands for an information panel, the command panel shall have no buttons. Each view in a functional area shall have its own command panel. To limit the number of command buttons needed in each command panel, user selection of a different view shall display that view and its associated command panel, with commands that apply only to the selected view. A command panel may be used for more than one view if it is suitable for that purpose. Command buttons or other display objects that have a more limited scope shall be located in the information panel. Restricting locally-acting commands and functions to the information panel makes clear to the user that only"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.6  Command Panel (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 5.6  Command Panel\n\nContent: general, global commands are located in the command panel. Buttons for navigation (i.e., that invoke the display of another view in the information panel) shall not be located in the command panel. It is recommended that multiple columns of buttons in the command panel be avoided."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 6  Compliance Statement (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 6  Compliance Statement\n\nContent: 6.1 In order to be compliant with this specification, the documentation accompanying an equipment shall include a Human Computer Interface (HCI) Compliance Statement that accurately indicates compliance with the individual requirements defined in this document. Requirements and recommended capabilities are defined in Table 2. 6.2 In order to be compliant with HCI, equipment must meet all requirements in each of three categories, as follows: 6.2.1 Mandatory: In order to be compliant with this standard, all of the mandatory requirements shall be both implemented and compliant as defined in this specification. 6.2.2 Conditional: In order to be compliant with this standard, each conditional requirement shall either be implemented as defined in this specification or shall both not be implemented in the user interface and not be supported in some other way by the equipment. (i.e., no conditional capability which is present on the equipment shall be implemented in a manner other than as defined in this"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 6  Compliance Statement (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 6  Compliance Statement\n\nContent: specification). 6.2.3 Recommended: Implementation of these features is at the discretion of the implementers. The only requirement for compliance with this specification for these capabilities is that they be accurately documented in the compliance statement for the equipment. 6.3 Each requirement/capability shall be marked “Yes” under “Implemented” if the equipment includes a feature which provides equivalent functionality as that defined in this specification even if that feature appears in a different form. Otherwise it shall be marked “No”. Table 2 HCI Compliance Statement 6.4 Each requirement/capability shall be marked “Yes” under “HCI Compliant” if the equipment includes a feature which conforms to all aspects of the requirement or recommended capability as defined in this specification. Otherwise it shall be marked “No”."
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 7  Related Documents (Part 1)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 7  Related Documents\n\nContent: 7.1 SEMATECH Documents Computer Integrated Manufacturing (CIM) Application Framework Specification SCC User-Interface Style Guide NOTICE: SEMI makes no warranties or representations as to the suitability of the standard set forth herein for any particular application. The determination of the suitability of the standard is solely the responsibility of the user. Users are cautioned to refer to manufacturer’s instructions, product labels, product data sheets, and other relevant literature respecting any materials mentioned herein. These standards are subject to change without notice. The user’s attention is called to the possibility that compliance with this standard may require use of copyrighted material or of an invention covered by patent rights. By publication of this standard, SEMI takes no position respecting the validity of any patent rights or copyrights asserted in connection with any item mentioned in this standard. Users of this standard are expressly advised that determination of any such"
  },
  {
    "title": "SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 7  Related Documents (Part 2)",
    "content": "Title: SEMI E95-1101 SPECIFICATION FOR HUMAN INTERFACE FOR SEMICONDUCTOR MANUFACTURING EQUIPMENT - # 7  Related Documents\n\nContent: patent rights or copyrights, and the risk of infringement of such rights, are entirely their own responsibility."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE",
    "content": "This guide was technically approved by the Global Information and Control Committee and is the direct responsibility of the North American Information and Control Committee. Current edition approved by the European Regional Standards Committee on June 11, 2001, and by the North American Regional Standards Committee on July 19, 2001.  Initially available at www.semi.org August 2001; to be published November 2001.  Originally published February 2000.  This document replaces PR5-0699 in its entirety."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose\n\nContent: 1.1 This guide describes technical architecture choices that enable application components to cooperate in a Computer Integrated Manufacturing (CIM) environment and reduce the effort required to integrate those components into a working solution. The CIM Framework technical architecture guide builds on publicly available specifications for distributed object computing. It defines manufacturing production systems requirements for the technical infrastructure needed for improved component interoperability, substitutability, and extensibility. It provides guidance for specifying components and addresses options for using an underlying distributed object communication infrastructure. 1.2 This guide provides guidance for the technical foundation of the SEMI Computer Integrated Manufacturing (CIM) Framework standards. It discusses a component-based architecture using object-oriented and framework technology that helps implementers achieve component interoperability and substitutability, application extensibility, and reuse. It establishes the role"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose\n\nContent: of distributed object communications infrastructure in providing necessary support for the framework technology. Specification methods for mapping a CIM Framework specification to alternative infrastructure technologies are also addressed by this technical architecture. However, these mappings are not intended to be prescriptive. Further work may be required to define additional mappings to emerging technologies. Many implementation issues that should be resolved for a particular software implementation are outside the scope of this guide. 1.3 Adhering to this guide for technical architecture alone does not provide interoperability between applications. While the technical architecture provides a foundation for interoperability, it is limited by the following factors: Multiple infrastructure implementation choices are possible, and interoperability across these environments is not guaranteed. The technical architecture intentionally limits its scope to only the most fundamental infrastructure requirements, leaving additional technical issues"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose\n\nContent: for future guide upgrades or for implementers’ discretion. Conformance to a specification for CIM Framework Domain Architecture is also required for interoperability of domain components. More complete semantics (including behavioral constraints and collaboration patterns) for components are needed to ensure consistent interactions among components developed by separate suppliers. 1.4 A guide for technical architecture is a necessary, but not a sufficient, basis to achieve the goals of the CIM Framework specifications. It does not mandate specific solutions to address the identified technical requirements because there are multiple implementation choices that meet these requirements. Rather, the technical architecture identifies those crucial technical requirements that should be considered by both CIM software suppliers and consumers. The proposed standard identifies the technical capabilities implementations should provide, but leaves the implementation options open. It is the responsibility of suppliers to provide and explain an"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose\n\nContent: implementation of each capability, and the responsibility of consumers to assess particular implementations for use in their factories. 1.5 This guide provides guidance on the technical tradeoffs for services provided by the distributed computing infrastructure for the purpose of supporting and enabling the domain specifications of CIM Framework components. These areas are: Distributed Object Communication — Provides the basic services to enable implementations supporting the CIM Framework interfaces to transparently locate other, possibly distributed implementations and exchange messages requesting standard CIM Framework operations. Interface Definition Language provides a formal specification of the CIM Framework interfaces that can be automatically transformed into conformant implementations ready for integration and interoperation. Exception Declarations — Identify the form and structure of return messages that inform requestors that a requested operation resulted in an anticipated, but abnormal outcome. Event Specification — Establishes"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose (Part 5)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 1  Purpose\n\nContent: the delivery mechanism, identification conventions, and data structures for reporting the occurrence of anticipated state changes to CIM Framework objects. Distributed Transactions — Define mechanisms needed to coordinate the start, completion or rollback of units-of-work that cross CIM Framework component boundaries. Component Manager Support — Identifies the component-level operations needed to create, locate, or remove instances of objects (and manage collections of those objects) that support the CIM Framework specified interfaces."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.1  Intended Audience",
    "content": "2.1.1  This document is intended for developers of components and applications, and integrators of MES systems that adhere to the CIM Framework specifications. It is also intended for system architects who contribute to the evolution of the CIM Framework architecture and guides based on implementation experience. A guide for technical architecture is focused on the software technologies that support the architectural goals for the CIM Framework rather than on the manufacturing domain concepts that the CIM Framework encompasses. The technical architecture perspective complements SEMI E81."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2  Architectural Issues Not Covered",
    "content": "2.2.1  A number of architectural issues are not covered within this document because they are beyond the scope of the CIM Framework standards and are not expected to come within the scope of the standards as they are revised. They are itemized here because a product architecture layered on the CIM Framework Technical Architecture should address these additional architecture issues. In these cases, other more general specifications emerging in the infrastructure technology areas are expected to provide these needed standards. The CIM Framework domain specifications do not require specific conformance in these areas to support component specifications."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2.2  Persistence",
    "content": "2.2.2.1  Persistence refers to the ability of an object to maintain a nonvolatile copy of its current state such that the object could recreate the state during a future initialization. There are various operations for object persistence, and problems can occur if objects with cross-references do not coordinate their persistence strategies and mechanisms. The CIM Framework excludes persistence as an implementation mechanism."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2.3  System Performance",
    "content": "2.2.3.1  System performance is highly dependent on the selection of hardware and software platforms for system execution. Tests should be performed to verify adequate system performance and scalability for the anticipated operating environment. Performance tuning mechanisms or measurement tools are excluded from the CIM Framework specifications as an implementation dependent mechanism."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2.4  Data Replication",
    "content": "2.2.4.1  Data replication is a technique used to provide additional fault tolerance or improve system performance in certain situations. The CIM Framework excludes specification of replication strategies as an implementation dependent mechanism."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2.5  Change Management",
    "content": "2.2.5.1  Change management is the ability to introduce and control changes to the system configuration. The CIM Framework encompasses change management in the domain context of document control, but the CIM Framework excludes the broader treatment of change management for the MES software configuration itself."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 2.2.6  Externalization",
    "content": "2.2.6.1  Externalization can be used to provide a form of persistence or to transfer object state between disjoint implementations. The ability of an object to externalize its data and state supports recovery of data and state for objects that terminated from memory. The CIM Framework excludes externalization as an implementation dependent mechanism.  \n2.3  This standard does not purport to address safety issues, if any, associated with its use.  It is the responsibility of the users of this standard to establish appropriate safety and health practices and determine the applicability of regulatory limitations prior to use."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3  Limitations",
    "content": "3.1  The CIM Framework should continue to evolve to meet the needs of a competitive and vital industry. The content of this framework represents a significant amount of real development experience from a number of commercial software suppliers and their customers. These specifications reflect the product architectures of those companies, as well as the requirements of their customers. This evolution process should continue as more products based on the CIM Framework are developed.  \n3.1.1  This guide acknowledges the following deficiencies that should be addressed in future revisions. These deficiencies are identified in the following sections."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures\n\nContent: 3.2.1 The CIM Framework provides a specification for MES software components, specified in terms of generalized manufacturing production systems requirements, that may be implemented using a variety of technical infrastructure foundations. While the intent of this guide is to provide both rigor in specification and flexibility to make infrastructure implementation choices, these goals often conflict. The use of mapping techniques complicates the task of integrating applications across technology boundaries. 3.2.2 While it is anticipated that a conformant implementation using either $\\mathbf { C O R B A } ^ { \\textregistered 1 }$ or the Microsoft®2 Distributed Component Object Model (DCOM) is feasible by mapping the specifications to the implementation, it is recognized that cross-infrastructure integration is significantly more difficult (for example, merging transaction models). The mapping described here offers more diverse implementation choices, but it does not guarantee that all of"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures\n\nContent: those chosen technologies easily work together in a single heterogeneous implementation. 3.2.3 Although the DCOM mapping provides a straightforward transform from the $\\mathrm { { O M G } ^ { \\mathbb { \\oplus } } }$ Interface Definition Language $( { \\mathrm { I D L } } ) ^ { \\mathrm { T M } ^ { 3 } }$ specifications for static invocation, the Microsoft OLE Automation interfaces may be required for dynamic invocation. There appears to be greater risk in being able to successfully map the CIM Framework to the OLE Automation interfaces. The requirement for dynamic invocation should be evaluated with this in mind. 3.2.4 Another issue with DCOM mapping concerns exceptions. DCOM returns exceptions using its return value HRESULT. Many CIM Framework operations already use return values and would not be able to return a HRESULT without restructuring the return mechanism for the operation results. 3.2.5 Finally, there has not yet been a detailed analysis of the CIM Framework interfaces to verify"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.2  Mapping to Alternate Distributed Computing Infrastructures\n\nContent: that they can be successfully mapped using the CORBA Interworking Architecture.4 This is especially true of the OLE Automation mapping resolution."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.3  Business Rules",
    "content": "3.3.1  The management of factory objects requires the use of a set of business rules; that is, procedures representing common business practices that should be applied under a given set of circumstances in response to some factory event. For instance, “Do not assign a process job to a machine which is scheduled for maintenance within 24 hours.” Factory systems implementations typically specify business rules as event-driven ECA (event-condition-action) or ECAA (eventcondition-action-alternative action) rules. For example:  \nevent –– request to edit a process specification;\ncondition –– invalid user access privilege;\naction –– deny access;\n(alternative action –– deny access and report breach of security).  \n3.3.2  Business rules can also be embodied in the sequencing logic of sequential process definitions. In this case the business rules define the criteria for making sequencing decisions that effect the flow of work through the factory.  \n3.3.3  Business rules are intended to be addressed in future revisions of this guide."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.4  Security and Access Control",
    "content": "3.4.1  The management of sensitive information regarding business processes and product specifications requires that MES implementations (especially distributed systems) provide some level of security and access control services. Typically, such services:  \nidentify and authenticate any factory object seeking sensitive information,\npermit access to information or operations based upon identity and privilege,\nprovide security-related audit trails,\nprovide secure communications (not susceptible to being intercepted nor malicious or inadvertent modification), and\nadminister an enterprise’s security policy.  \n3.4.2  Security and access control is intended to be addressed in future revisions of this guide."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.5  Internationalization",
    "content": "3.5.1  Specifications that deal with issues related to internationalization are emerging from several sources, including the OMG. This guide should encompass the need and ability to incorporate internationalization features into the CIM Framework specifications.  \n3.5.2  Internationalization are intended to be addressed in future revisions of this guide."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.6  Object Properties",
    "content": "3.6.1  Object properties refers to a technique that allows additional attributes (data) to be dynamically associated with an object without changing the interfaces of the objects to which the properties are attached. This can be used as a convenient dynamic extensibility mechanism that may be considered in future CIM Framework specifications.  \n3.6.2  Object properties are intended to be addressed in future revisions of this guide."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 3.7  Object Collections and Queries",
    "content": "3.7.1  Object collections and queries allow flexible access to aggregate data for a group of objects. This capability may be a candidate to replace the limited operations for collections found in the component manager interface.  \n3.7.2  Object collections and queries are intended to be addressed in future revisions of this guide."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 4.1  SEMI Standard",
    "content": "SEMI E81 — Provisional Specification for CIM Framework Domain Architecture  \nNOTE 1: As listed or revised, all documents cited shall be the latest publications of adopted standards."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.1  Abbreviations and Acronyms",
    "content": "5.1.1  ACID Atomicity Consistency Isolation Durability  \n5.1.2  CIM — Computer Integrated Manufacturing  \n5.1.3  ECA — Event-Condition-Action (rule)  \n5.1.4  ECAA Event-Condition-Action-Alternative Action (rule)  \n5.1.5  ENS — Event Notification System  \n5.1.6  ERP — Enterprise Resource Planning  \n5.1.7  GUI — Graphical User Interface  \n5.1.8  MES — Manufacturing Execution System  \n5.1.9  ODL — Object Definition Language  \n5.1.10  OMA — Object Management Architecture  \n5.1.11  OTS — Object Transaction Service"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: 5.2.1 application — 1. one or more programs consisting of a collection of interoperating objects which provide domain specific functionality to an end user or other applications. 2. functionality provided by one or more programs consisting of a collection of interoperating objects. 5.2.2 application interface — the interface provided by an application or application program. 5.2.3 application object — an object implementing an application interface. 5.2.4 architecture — the structure of the components of a program/system, their interrelationships, and principles and guidelines governing their design and evolution over time. 5.2.5 attribute — an identifiable association between an object and a value. An attribute may have functions to set and retrieve its value. 5.2.6 behavior — the effects of performing a requested service, including its results (e.g., changes in the state of an object). 5.2.7 binding — a specific choice of platform technologies and other implementation-specific criteria. 5.2.8 class — the shared common structure and"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: common behavior of a set of object implementations. 5.2.9 client — an object that uses the services of another object by sending messages to it or referencing its state. 5.2.10 collection — an object containing references to (collections of) other objects with services for managing them and providing access to them as a related group of objects. 5.2.11 component a reusable package of encapsulated objects and/or other components with well-specified, published interfaces. The component is the element of standardization and substitutability for the CIM Framework. 5.2.12 Computer Integrated Manufacturing — an approach that leverages the information handling capability of computers to manage manufacturing information and support or automate the execution of manufacturing operations. 5.2.13 conformance — adherence to a standard or specification in the implementation of a product, process, or service. 5.2.14 conformance requirement — identification in the specification of behavior and/or capabilities required by an implementation for it to"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: conform to that specification. 5.2.15 conforming implementation an implementation that satisfies all relevant specified conformance requirements. 5.2.16 event — an asynchronous message denoting the occurrence of some incident of importance. For example, state change or new object created. 5.2.17 event channel — the intermediate object that forwards published events to interested subscribers. 5.2.18 exception — an infrastructure mechanism used to notify a calling client of an operation that an unusual condition occurred in carrying out the operation. 5.2.19 extensibility — the ability to extend or specialize existing components and add new object classes or components while preserving architectural integrity and component conformance to standards. 5.2.20 framework — a collection of classes or components that provide a set of interoperable services and functionality for a particular domain. 5.2.21 implementation — the internal view of a class, object or module, including any non-public behavior. The specific code and functionality that"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: implements an interface. 5.2.22 implementation conformance statement — a statement made by the supplier of an implementation or system claiming to conform to one or more specifications and stating which capabilities have been implemented. It specifically includes the relevant optional capabilities and limits. 5.2.23 infrastructure — the services, facilities, and communications mechanisms that support the collaboration between and lifecycle of distributed objects. 5.2.24 inheritance — the ability to derive new classes, types or interfaces from existing classes, types or interfaces. For example, a derived class (“subclass”) inherits the instance variables and methods of the base class (“superclass”) and may add new instance variables and methods. In the CIM Framework, inheritance applies to interfaces and their specification of operations rather than implementations of classes. 5.2.25 instance — a software entity that has state, behavior and identity. The terms instance and object are interchangeable. An object is an instance of an"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 5)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: interface if it provides the operations, signatures, and semantics specified by that interface. An object is an instance of an implementation if its behavior is provided by that implementation. 5.2.26 interface — the external view of a class, object, or module that emphasizes its abstraction while hiding its structure and internal behavior. An interface definition ideally includes the semantics of attributes and operations. 5.2.27 interoperability — the ability for two applications or the parts of an application to cooperate. In the CIM Framework, interoperability requires that application components be able to support specified relationships, share data, invoke each others’ behavior (operations), return exceptions, and exchange events. 5.2.28 lifecycle — the life of an object, including creation, deletion, copy, and equivalence. 5.2.29 message in object oriented systems a message is the means by which a client object invokes the behavior specified by an operation of a server object. 5.2.30 message bus — a software infrastructure that"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 6)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: provides distributed communication between objects in component implementations. It can refer to an Object Request Broker, Microsoft DCOM, Java Remote Method Invocation or other infrastructure for conveying messages between objects. 5.2.31 name-value pair — a data structure that associates a name with an arbitrary value, typically used as an extensibility mechanism for conveying information by name-based retrieval. 5.2.32 namespace — a namespace is a bounded collection of names with a constraint to ensure that each name is unique within the collection. 5.2.33 object — a software entity that has state, behavior, and identity. The terms instance and object are interchangeable. An object is an instance of an interface if it provides the operations, signatures, and semantics specified by that interface. An object is an instance of an implementation if its behavior is provided by that implementation. 5.2.34 object services — interfaces for general services that are likely to be used in any program based on distributed objects. 5.2.35"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 7)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: operation — an operation is a specification entity, identified by an operation identifier, that denotes a service that can be requested. An operation has a signature that describes the legitimate values of request parameters and returned results, including any exceptions. 5.2.36 persistent object — an object that can survive the process or thread that created it. 5.2.37 productive entity productive entity is an abstraction of a physical unit, which is involved in any way in a production process (e.g. production or supporting equipment). A productive entity has its own internal logic and provides a software interface to access this logic 5.2.38 query a message sent to a server (e.g. the productive entity) by a client interested in some information from the server (state of the productive entity). A query may or may not have arguments and it always has an answer. The semantics of a query is that some information from the server is returned, but the query cannot effect any change to the state of the server. 5.2.39 service a function"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions (Part 8)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 5.2  Definitions\n\nContent: provided by a service provider that is performed through an operation specified by the provider. 5.2.40 service provider, server an object providing services to other objects as specified by its published operations. 5.2.41 signature a signature is the name, parameters, return values, and exceptions for a specific operation. 5.2.42 substitutability — the ability to replace a given component from one supplier with a functionally equivalent component from another supplier without impacting the other components or its clients in the system. 5.2.43 trader service — a collection of names with associated properties of features for each name and methods for manipulating and inspection that collection. 5.2.44 type — a declaration that describes the common properties and behavior for a collection of objects. Types classify objects according to a common interface; classes classify objects according to a common implementation."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6  Technical Architecture Guidance (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6  Technical Architecture Guidance\n\nContent: 6.1 The computing infrastructure provides the distributed computing environment for CIM Framework applications. This infrastructure includes the operating system, networking and communications, data storage and access, user interface and presentation services, event distribution, systems management, and many other elements. Of these many infrastructure elements, a guide for technical architecture specifies a small subset of key services that need to be standardized in order to facilitate and streamline system integration between conformant CIM Framework implementations. 6.2 The CIM Framework relies on publicly available specifications to define the use of infrastructure services wherever such published specifications exist. The largest single source for openly defined specifications for distributed object services is the Object Management Architecture.5 Reference to this guide does not imply that CIM Framework conformant implementations should implement the referenced services. The implementations that realize these"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6  Technical Architecture Guidance (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6  Technical Architecture Guidance\n\nContent: infrastructure technologies are outside the scope of this guide. The technology choices made by implementers should be kept transparent to the CIM Framework to the greatest extent possible."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: 6.3.1 The CIM Framework documents assume the use of software infrastructure to provide distributed communication between objects in an implementation. The acronym ORB was originated by the OMG to describe its distributed object communication infrastructure, but is sometimes used in a more general sense. In this document ORB is used only to refer to the OMG specified technology and the more general term “message bus” is used for the diverse class of distributed communication mechanisms for communication between objects. The message bus is used to allow objects to make requests and receive responses from other objects. An object can communicate through the message bus with objects that are local or remote. Location transparency allows the object to remain ignorant of the actual location of the object with which it communicates. 6.3.2 A primary criterion for a message bus implementation is its ability to deliver all messages specified by the interfaces of the CIM Framework components. To accomplish this, the message"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: bus should provide the ability to support or map a specified interface, including its inherited features, data types, operations, object references, and exceptions to and from runtime marshaled transport formats. 6.3.3 Alternate message bus implementation technologies are supported by the CIM Framework by mapping the OMG IDL for the CIM Framework interfaces into a specific message bus implementation. The Common Object Request Broker: Architecture and Specification contains sections that define this mapping from CORBA to COM and from CORBA to OLE Automation. These sections, called the “Interworking Architecture,” cover detailed rules for mapping OMG IDL, types, and exceptions to compatible interfaces in COM and OLE Automation. 6.3.4 From a high level perspective, the DCOM and CORBA message buses are comparable. The DCOM capabilities are roughly equivalent to those of an ORB. However, with a lower level analysis, differences show up in data types, inheritance, object identity, and the handling of exceptions. The"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: CORBA Interworking Architecture4 (Chapter 15, “Interworking Architecture,” Chapter 16, “Mapping COM to CORBA,” and Chapter 17, “Mapping OLE Automation to CORBA”) defines mapping approaches covering: Interface Mapping, Interface Composition Mapping, and Identity Mapping. 6.3.5 These areas should be addressed in order to provide a mapping between the OMG IDL used to specify CIM Framework interfaces and the message bus used for implementation. If the mapping is not specific (i.e., can occur in multiple ways) then two implementations may not necessarily be able to communicate even if they use the same message bus type. Although the CORBA Interworking Architecture is specific to Microsoft technologies, it could provide the foundation for future interworking mappings. 6.3.6 The current CIM Framework interfaces are specified in OMG IDL. The interfaces can be directly compiled and used with any of the available ORB implementations on the market. 6.3.7 The only way to provide such a direct solution using Microsoft DCOM"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: would be to create additional CIM Framework interface specifications in DCOM MIDL and/or OLE Automation ODL. This would allow direct support for message bus functionality using DCOM. For example, the CIM Framework memory management requirement of “in” for parameter passing (see Section 6.3.15) would be directly supported by MIDL and DCOM but since the CORBA exception model is significantly richer than the DCOM exception model, mapping CORBA exceptions to COM would require an additional protocol to be defined for DCOM. 6.3.8 The CORBA Interworking Architecture supports mapping the current CIM Framework interfaces defined in OMG IDL to DCOM MIDL or OLE Automation ODL. This mapping is detailed enough that the mapping should always provide the same MIDL/ODL solution. Even though the current scope does not include interoperability between implementations on DCOM and CORBA (see Section 3.2), the issue of mapping the interface is still the same. This would also provide a step towards true interoperability using CORBA/"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 5)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: DCOM bridge products that are beginning to become available. 6.3.9 Microsoft also provides an extension called OLE Automation. These interfaces are described in Object Definition Language (ODL). The OLE interfaces can be invoked dynamically by a client with no compile-time interface knowledge. The OLE data types are a subset of the types supported in DCOM, and there is no support for user-defined constructed types. The mapping solution differs for the DCOM and the OLE Automation. OLE Automation does not provide as clean a mapping from OMG IDL as DCOM does. This limitation may not allow some of the interfaces to translate completely to an OLE Automation implementation. Thus, component suppliers using an OLE Automation implementation should explain impact on interfaces that were not fully supported due to the Automation restrictions. 6.3.10 The CORBA Interworking Architecture covers mapping issues for the major areas of concern for the CIM Framework. The areas of primary importance are the Interface mapping,"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication (Part 6)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3  Distributed Object Communication\n\nContent: Interface composition mapping, Identity mapping, and Exception mapping. The CORBA Interworking Architecture gives detailed mappings for each of these areas and deals with the DCOM and OLE Automation mappings separately. The following five subsections summarize these mapping issues."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping\n\nContent: 6.3.11.1 The OMG IDL primitives, constructed data types, and object references map closely to DCOM. The inherited CORBA interfaces may be represented as multiple DCOM interfaces. The CORBA attributes may be mapped to get and set operations in DCOM interfaces. 6.3.11.2 The OMG IDL primitives map to OLE primitives except for special cases. The OLE interfaces do not support constructed data types and should be mapped to specially constructed interfaces. CORBA object references map to OLE Automation interface pointers. There are difficulties in mapping CORBA multiple inheritance to OLE Automation interfaces documented in the CORBA specification.4 CORBA attributes may be mapped to get and set operations in OLE Automation interfaces. 6.3.12 Aspects The total behavior of a piece of a productive entity in a factory can be viewed as the union of distinct behaviors. Each such isolated behavior (or functional area) is called an aspect of the productive entity. 6.3.12.1 There is great variety in productive entity behavior. There are"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping\n\nContent: generic aspects that are shared by all or most productive entities (such as recipe management or process state model or material tracking) and there are aspects that are specific to one productive entity type or to a particular productive entity model. The behavior of each productive entity is the union of the particular aspects of that productive entity. 6.3.12.2 Saying that two pieces of productive entities have a certain aspect does not necessarily mean that they behave absolutely the same way. There are two ways by which behavioral variation within an aspect can be modeled: Parameters and Variants. 6.3.13 Parameterized Aspects An aspect can have parameters. Differences in productive entities behavior are modeled by assigning different values to the parameters. For example if a physical structure aspect of the productive entity specifies that the productive entity has a material buffer, the number of material units (buffer size) that can be placed on the buffer is a possible parameter. The number of buffers the productive"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping\n\nContent: entity has can be another parameter. 6.3.14 Variants While parameterization is a very powerful tool, there are variations in behavior that cannot be simply modeled as different parameter values. In this case one can use variants. An aspect is said to have variants if there are some different behaviors related to the same aspect. For example the process control aspect can have a discrete variant and a continuous variant. In the discrete variant the productive entity processes discrete units of material (like the material within a magazine or a single wafer carrier), while in the continuous variant the productive entity processes continuously as long as there is material to be processed. 6.3.14.1 Differences between productive entities are best modeled as parameters when possible in order to avoid an explosion of the number of variants, while at the same time trying to maintain the clarity of the model. 6.3.14.2 A complete specification of the behavior of a piece of productive entity should specify variants for these aspects"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping\n\nContent: that have them. 6.3.15 Where do aspects and variants come from? They leverage on previous work done by the industry. GEM (Generic Equipment Model, SEMI E30) is a primary source for identifying generic aspects. Various SEMs (Specific Equipment Models) are a source for specific aspects and very likely for variants. Other SEMI standards like SEMI E-40 (Standard For Processing Management) cover other aspects neglected by GEM. 6.3.16 Specifying Productive Entity Interfaces in a Factory In order to specify the interface of a productive entity it is necessary first to identify the aspects (or variants of these aspects) supported by the productive entity, then to specify the interfaces associated with each aspect. The productive entity interface specification is then the sum of the interface specifications for all participating aspects. 6.3.16.1 The interface of an aspect (or variants of these aspects) is the sum of its Queries, Commands, Event Notifications and Service Requests and thus the problem of defining productive entity"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping (Part 5)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.11  Interface Mapping\n\nContent: interface is reduced to the problem of defining the interfaces of individual aspects (or variants of these aspects). 6.3.17 Architecture The productive entity in a factory is viewed as a composition of its aspects. The total productive entity behavior is therefore represented by the sum of all its aspects representing these behaviors. Each aspect specifies a specific behavior of productive entity and provides an interface for incoming messages (queries and commands)."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.17.1  An aspect has a name. The productive entity can answer a reference to one of its aspects given the aspect name:",
    "content": "AspectInterface aspectNamed(in string aspectName);  \n6.3.17.2  An AspectInterface is a virtual interface that represents a generic aspect. All aspect interfaces inherit from the generic AspectInterface. When an aspect has variants, the aspect interface itself is virtual, and all its variant interfaces inherit from it."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.17.3  Additionally the productive entity answers a list of the names of all its aspects:",
    "content": "StringList allAspectNames();  \n6.3.17.4  The usual scenario for a client is to acquire a reference to the productive entity. It then acquires references to the productive entity aspects of interest by querying the productive entity. The client then invokes methods on the aspect interfaces as required.  \n6.3.17.5  The client only needs to acquire aspect interfaces once when it first establishes communication with the productive entity. From then on it caches the productive entity interface as well as the references to the productive entity aspects for further use. The procedure of acquiring references needs to be repeated only in case the references become invalid (due to productive entity restart for example).  \n6.3.18  How To Add A New Aspect  The definition of an aspect follows the following aspect definition pattern. It includes the following items:"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.18.1  Aspect Name   Each aspect has a name that identifies it. (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.18.1  Aspect Name   Each aspect has a name that identifies it.\n\nContent: 6.3.18.2 Aspect Description The aspect description explains the productive entity behavior covered by the aspect. If the aspect has been derived from an existing standard, the description includes a reference to this standard. It explains the concepts and the used terminology, adds state models and state transition diagrams if required, and explains the interactions between the productive entity and the factory elements related to the aspect. If the interactions require certain sequences of messages, they are also described (as use cases or interaction diagrams). 6.3.18.3 The description also includes all the side effects and exceptions that can occur as a result of the interactions related to the aspect. 6.3.18.4 If the aspect has any relation or effects related to other aspects, they are also described here. 6.3.19 Variants If the aspect has variants, each variant is named and described. 6.3.19.1 IDL Usually the IDL will include a special module for the aspect. The module includes"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.18.1  Aspect Name   Each aspect has a name that identifies it. (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.18.1  Aspect Name   Each aspect has a name that identifies it.\n\nContent: data type definitions specific to the aspect and usually a single interface that provides the various queries and commands of the aspect. An aspect that has variants has an interface per variant. The interfaces for the variants can be inherited from a common (abstract) aspect interface. 6.3.19.1.1 An aspect that deals with service requests should also include an IDL definition for the server that provides the services. Which is to be done in a separate module. 6.3.19.2 Aspect Definition Example Here the Control State Aspect has been chosen as an example for aspect definition."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State\n\nContent: 6.3.19.2.2 Aspect Description The definition of the Control State Aspect is based on Generic Equipment Model (GEM) SEMI standard E30. NOTE 2: The state diagram presented here is simpler than the one in SEMI E30, since the internal sub-states are irrelevant to the productive entity interface, and the concept of HOST OFFLNE is obsolete in a distributed factory environment 6.3.19.2.2.1 The control state model defines the level of cooperation between the productive entity and the factory. It also specifies how the operator interacts in the different levels of factory control. 6.3.19.2.2.2 The control state model provides the factory with three levels of control over the productive entity: 6.3.19.2.3 OFFLINE In the OFFLINE state, operation of the productive entity is done by the operator. In the OFFLINE state the productive entity accepts a query to find out the current control state and the command to change its control state, but rejects all other queries or commands (raising the rejected exception). While in the"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State\n\nContent: OFFLINE state the productive entity produces no events and no service requests. 6.3.19.2.4 LOCAL In the LOCAL state the productive entity is operated by the operator. 6.3.19.2.4.1 In the LOCAL state the productive entity answers all queries from the factory and allows the factory to execute a limited set of commands. The commands that are prohibited are those that cause movement or directly affect the process. The productive entity sends events and asks for services from the factory. 6.3.19.2.5 REMOTE In the REMOTE state the productive entity is controlled by the factory. The factory has full access to all the necessary commands to operate the productive entity through the full process cycle in an automated manner. The degree of automation can vary from productive entity to productive entity and from factory to factory. Generally operators are required to intervene in setup operations, operator assist situations, etc. Therefore when in REMOTE state, even though theoretically fully under control of the factory, the"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State\n\nContent: productive entity should not restrict the operator from executing essential operations such as selecting a recipe, pausing or resuming the process, operator assists, material movement to/from the productive entity, initiating recipe download and other productive entity specific commands on a command by command basis as needed. At the very least the operator should be able to change the control state, actuate an emergency stop and interrupt processing (stop, abort or pause). 6.3.19.2.6 The following diagram depicts the productive entity Control State model. 6.3.19.2.7 As can be seen from the diagram, transition from any state is allowed to the two others. The aspect provides the factory methods for querying the current state, for initiating a transition to any of the states, and for events when state transitions occur. Variants : None IDL module ControlStateModule { // Type Definitions enum ControlState {OFFLINE, LOCAL, REMOTE); interface ControlState { // Queries ControlState getControlState() raises"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.19.2.1  Aspect Name  Control State\n\nContent: (EqBasicTypesModule:: CommunicationFailure); // Commands void changeControlStateToOffline() raises (EqBasicTypesModule:: CommunicationFailure); void changeControlStateToLocal() raises (EqBasicTypesModule:: CommunicationFailure); void changeControlStateToRemote() raises (EqBasicTypesModule:: CommunicationFailure); }; }; 6.3.19.2.8 The control state aspect can post the following events: ControlStateChangedToLocal ControlStateChangedToRemote controlStateChangedToOffline"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.20  Interface Composition Mapping",
    "content": "6.3.20.1  The DCOM interfaces do not support multiple inheritance. When multiple inheritance is used to extend functionality, the mapping is not very difficult. When multiple inheritance is used to “mix in” orthogonal behavior the mapping is more difficult. The CIM Framework interfaces that only use single inheritance provide the most reliable mapping. Interfaces that use multiple inheritance should follow the detailed mapping rules and ordering provided in the CORBA Interworking Architecture.  \n6.3.20.2  OLE Automation also has problems directly supporting the multiple inheritance of CORBA. The CORBA Interworking Architecture4 provides detailed mapping rules for making the conversion where multiple inheritance is used."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.21  Identity Mapping",
    "content": "6.3.21.1  CORBA and DCOM/OLE Automation have different notions of what object identity means. CORBA defines an object as a combination of the state and a set of operations that explicitly define the instance. An object reference is defined as a name that reliably and consistently denotes an instantiated object. A CORBA object exists until it is destroyed; its lifecycle is controlled by the server.  \n6.3.21.2  DCOM does not provide the same mechanism for identifying a particular object. DCOM objects are usually created when used and their state does not persist as an object instance. DCOM objects exist while they are referenced; their lifecycle is controlled by the client. This is true of OLE Automation objects as well.  \n6.3.21.3  The CORBA Interworking Architecture provides mapping solutions for managing the object lifecycle. The lifecycle issues should be minimized with the CIM Framework use of component managers to control object lifecycles. The implementation of DCOM lifecycle mapping should be encapsulated in the component manager."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.22  Naming",
    "content": "6.3.22.1  As a mechanism to support initialization between collaborating components, the name of each component manager should be registered in a publicly available namespace along with the object reference for the component manager. The same name may be reused unambiguously as long as all occurrences belong to distinct namespaces. Other objects should be able to obtain a handle (object reference) to each component manager by utilizing the namespace through the operations of a naming service. A trader service may also be used to perform lookup of component managers and other objects based on well documented search criteria. Additional objects may also be registered in the namespace or trader as appropriate. The component manager serves as the namespace for the objects it manages, providing object references for named objects. Implementations should provide documentation on how to obtain available object references in either the namespace or the trader."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.23  Memory Management",
    "content": "6.3.23.1  ORB implementations’ memory allocation and deallocation services should handle all three types of OMG IDL parameter passing:  \nin –– Memory is caller-allocated and read-only. The caller is responsible for memory deallocation. out –– Memory deallocation depends on the specific usage of the argument. inout –– Memory allocation and deallocation depend on the specific usage of the argument.  \n6.3.23.2  The CIM Framework uses only the in parameter passing mechanism. Within operations that have had objects passed by reference, any modification of the object occurs by using the in parameter as a reference. Supplier provided extensions to the CIM Framework that use either the out or inout parameter passing mechanism should document the caller and callee responsibilities with respect to memory allocation and deallocation."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24  Use of OMG IDL Module Packaging Constructs",
    "content": "6.3.24.1  All IDL statements included as part of the specification of SEMI E81 should be contained within one or more CIM Framework defined modules."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.2  CIMFW Module Conventions (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.2  CIMFW Module Conventions\n\nContent: 6.3.24.2.1 Each CIM Framework sub-document that specifies IDL declarations should provide a full listing of the IDL statements in a compilable IDL file. This file may be presented as an appendix to the specification prior to final adoption and preparation for distribution with the standard. The IDL file should include module statements to enclose all IDL declarations for that specification. 6.3.24.2.2 IDL files (or appendices) should begin with a comment identifying the correct name of the file that contains the enclosed IDL specification. The following hypothetical example illustrates the form of this comment. //File: CIMFactoryLabor.idl //Part of the CIM Framework for the Factory Labor Component 6.3.24.2.3 Every IDL appendix should contain the following statement identifying the top-level module that contains all CIM Framework declarations. module CIMFW{ }; 6.3.24.3 Lower Level Modules within the CIM Framework Module 6.3.24.3.1 The CIM Framework module should enclose second level modules that further package each"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.2  CIMFW Module Conventions (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.2  CIMFW Module Conventions\n\nContent: partition of the CIM Framework specification as defined in SEMI E81. All IDL declarations should thus be scoped, first, to the CIM Framework, and second, to the specific component of the framework. The following example illustrates the positioning of elements of the Factory Labor component within a component module. module CIMFW{ module FactoryLabor{ typedef ..., etc. }; }; 6.3.24.3.2 Subsequent decomposition of CIM Framework specifications into a third level of module containment may be necessary in some places, but should be avoided where possible to keep fully qualified names from getting to an unworkable length."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.4  Conventions for CIM Framework Dependencies",
    "content": "6.3.24.4.1  Each CIM Framework IDL file should include explicit statements identifying any other files in the CIM Framework specification set that contain modules that are referenced.  These statements should be in the form of #include statements.  In order to avoid circular references among related modules, a specification may need to partition a module into more than one file and include parts of the module at different points in the referencing file. This structure of IDL files is dependent on the specific implementation and which parts of the CIM Framework it implements and may be adjusted as needed to achieve successful compiles. The IDL files distributed with the standard should suggest a file structure to achieve a successful compile, but should not indicate that the file structure is specified as a part of the standard. The following example illustrates an include statement.  \n#include <CIMGlobal.idl>"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # module CIMFW{",
    "content": "6.3.24.4.2  All references to elements of separate modules will then need to be fully qualified with the module scoping.  For example, to reference a type defined in the CIMGlobal module, the reference should take a form similar to the following hypothetical example:  \n#include <CIMGlobal.idl>\nmodule CIMFW{ module FactoryLabor{ Global::MachineSequence\nassignedMachines ( ) raises\n(Global::FrameworkErrorSignal); };\n};  \n6.3.24.4.3  Fully qualified names may also be automatically generated if the target programming language compiler supports the “namespace” concepts. For example, the $\\mathbf { C } { + + }$ standard uses namespace and Java uses package to support namespaces."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.5  Guard Statements",
    "content": "6.3.24.5.1  To avoid the possibility of the same CIM Framework file being included more than once and thus causing multiple definition errors, each module should be preceded by the following type of guard statement.  \n#ifndef _CIM_FACTORY_LABOR_IDL_ #define _CIM_FACTORY_LABOR_IDL_ module\n};  \n#endif // _CIM_FACTORY_LABOR_IDL_  \n6.3.24.5.2  The guard name should be designated by the string that begins and ends with an underscore and includes an all caps version of the filename with embedded underscores to separate the parts of the name. The guard statement should be documented for each module."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.3.24.6  Naming Modules and IDL Files",
    "content": "6.3.24.6.1  All Module names for CIM Framework specifications are scoped within the CIMFW module and need not use redundant prefixing of the name with CIMFW. The names should be derived as closely as possible from the name of the CIM Framework specification they represent.  \n6.3.24.6.2  All Names should be composed of one or more words, abbreviations or acronyms concatenated together with capital letters used as delimiters between parts.  \n6.3.24.6.3  Names should be kept as short as possible while still providing understandable semantic associations for the subject module.  \n6.3.24.6.4  IDL File names should be based on the second level module contained within the CIMFW module."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4  Exception Declarations (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4  Exception Declarations\n\nContent: 6.4.1 Exceptions provide an alternative return mechanism for operations. When performing a normal return, control is returned to the point of invocation and the provided return values and output parameters are valid. Abnormal operation results raise an exception, which causes control to return to the defined exception handler and breaks the flow of control. Any data defined as part of the exception and provided by the called operation is valid and available to the exception handler. When an exception is raised, normal output parameters defined in the operation signature are not valid and are not available in the exception handler. 6.4.2 Exceptions are not communicated as an operation return code. An exception signifies that the postconditions for successful operation completion have not been satisfied. If, on the other hand, the operation merely needs to communicate which one of multiple post-conditions were met, then the operation should provide this information in a return code or return structure as part of the normal"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4  Exception Declarations (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4  Exception Declarations\n\nContent: operation completion. 6.4.3 Exception declarations in OMG IDL follow a $C$ struct-like data structure with the keyword exception taking the place of struct. It contains attributes that can be used to pass information about an exception condition to a service requester. An exception is declared with an identifier (ExceptionNameSignal, the exception name), which is accessible as a value when the exception is raised, allowing the client to determine which exception has been received. Data values associated with the exception, if declared, are accessible to the client. The keyword raises is used in the operation definition to specify that a user-defined exception may be raised (or thrown in implementation terminology). The CIM Framework specifications assume that an operation may raise a CORBA-defined standard system exception, thus these exceptions are not specified."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions: (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions:\n\nContent: Exceptions are not reserved for system or programming errors or failures, but should be included for any abnormal application behavior in the called service. This is consistent with CORBA usage of exceptions for application errors. Exception descriptions are shown as OMG IDL comments similar to descriptions for services. Return values should, if necessary, be implemented as fields in the exception definition. All state transition services (e.g., makeXXX services) should include the InvalidStateTransition-Signal exception in their list of raised exceptions. Services that perform a “find” or “lookup” function raise an appropriate <ObjectType> NotFound-Signal exception: a null return value is not an appropriate response. However, services that return a collection of objects do not raise an exception but simply return an empty collection. Services that perform “add” functions raise a <ObjectType>DuplicateSignal exception for the case where the object to be added is already in the target"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions: (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions:\n\nContent: collection or logical set. The exception includes a field containing a reference to the currently existing object. Services that perform “remove” functions raise a <ObjectType>NotAssignedSignal exception for the case when the given object is not in the collection it was to be removed from or <ObjectType> RemovalFailedSignal exception if the object could not be removed. Boolean query services should rarely raise an exception unless conditions are such that neither a true or false return value can be determined. 6.4.5 User-defined exceptions can be defined for any operation specified in IDL. Only user-defined exceptions that are defined and listed in the raises clause of an operation should be thrown. Interfacedefined or other standard system exceptions may be thrown without using a raises clause on an operation. The data contained in the user exception should help the caller interpret and deal with the exception. Specific data can be defined for each user exception. Any additional"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions: (Part 3)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions:\n\nContent: information that assists in debugging situations should be sent to a tracing or logging facility. 6.4.6 Operations should throw standard system exceptions when an error condition clearly matches the defined exception. This ability should be used judiciously as the receiver of the exception may not be able to distinguish between a system-thrown or userthrown exception. If a system exception does not clearly fit the situation at hand, then a user exception should be defined. Use of user-defined exceptions is part of the binding that should be considered for interoperability and substitutability. 6.4.7 The mapping defined for exceptions should support both the system exceptions and user exceptions. The CORBA model uses the concept of exceptions being raised to report error information. There should be exception specific data associated with the exception. The DCOM model provides error information by returning an HRESULT type. There is no facility for returning user-defined exception data."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions: (Part 4)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.4.4  The following conventions are used when defining exceptions:\n\nContent: 6.4.8 The CORBA Interworking Architecture provides a mapping for the CORBA System Exceptions to the DCOM HRESULT values. The additional exception information for User Exceptions can be returned in an exception structure and added as another parameter to methods that include the raises keyword. The OLE Automation mapping provides for the use of a PseudoAutomation Interface called a pseudo-exception. This is included in the interface as an additional out parameter. 6.4.9 The mapping of exceptions from CORBA to DCOM is very complex and requires an added parameter on many of the interfaces. The complete mapping rules are defined in the CORBA Interworking Architecture."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5  Event Specification (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5  Event Specification\n\nContent: 6.5.1 This guide uses a publish/subscribe model of events. Published events are sent to subscribers of the event in an asynchronous manner. The identity and quantity of subscribers are not known by the publisher of an event. The publisher is also known as the “supplier” and the subscriber known as the “consumer” of the event. Although the receipt of an event can alter the flow of control in the consumer, they should typically be used primarily as an information broadcast mechanism. Direct operation requests to another object should be used when affecting changes to critical flow of control to ensure message receipt by the intended recipient. 6.5.2 This guide suggests the use of an event delivery mechanism called “event channels.” Event channels can provide a coarse grain filtering capability for events. Consumers can subscribe to a specific event channel in order to receive a particular event type. The event broker specification of this guide extends this event channel capability by adding features for locating event channel,"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5  Event Specification (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5  Event Specification\n\nContent: registering for event delivery, and filtering the events of interest to minimize performance penalties when large numbers of events are present. 6.5.3 This guide supports creating, posting, and subscribing to events. It also provides the mechanisms to support subject-based addressing. When a consumer subscribes to events for a particular subject, it should be notified whenever an event for the subject is posted by any supplier."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.4  The event delivery requirements are summarized as follows:",
    "content": "Suppliers do not know who the consumers of news events are; therefore, suppliers do not need to get a “handle” for them.  \nNo response or answer is sent back from the consumer(s) to the supplier once the post is completed.  \nMessage delivery is based entirely on message context (subject)."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.5  Event Content (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.5  Event Content\n\nContent: 6.5.5.1 The specification of event content should have two parts: a header and a body. The header should consist of information of a general nature regarding the event, such as the name of its subject (a subject string used for identification); an aging factor (for determining event effectiveness and may be site specific); priority; and any filtering information relevant to event delivery at a general level. The event body should contain: the actual event message; the original time of the event; and data relevant to filtering by the consumer of the event. The body should also contain any information required by the consumer not used in the filtering process (called “News”). The body should be extended with object references as required to facilitate communication with any objects associated with the event. 6.5.5.2 The event header is constructed by the supplier of the event and is used by an Event Notification System (ENS) to route the event to any consumer registering interest in the event. Note that the structure of the header"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.5  Event Content (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.5  Event Content\n\nContent: may be specific to a particular ENS. The body of the event is constructed by the event supplier and is intended for use by the event consumer. Consumers of events express interest in an event type by passing the subject name and associated filter data along to the ENS. The ENS returns an original connection, called an event channel, to the consumer. 6.5.5.3 Name-value pairs are one mechanism that should be used to define data either in the header or body. Specific information within the body varies according to event type; issues such as allocation are implementation dependent."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.6  Subject String",
    "content": "6.5.6.1  The event subject string should be defined as a multi-level hierarchy to assist in event classification and filtering. The levels designate the CIM Framework issuing the event component, the issuing interface within that component, and the event type.  Each level should be delimited by a special character (e.g., a forward slash: “/”). An example of this syntax is /RecipeManagement/MachineRecipe/ParameterChanged."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.7  Filter Data and News (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.7  Filter Data and News\n\nContent: 6.5.7.1 Filter data are attribute names, values, and operators that are specified by the consumer and are used by the filter subsystem to further qualify an event. News consists of additional attributes and values that are received by the consumer but not used in the filtering process and thus are not specified by the consumer. The consumer specifies the attributes, values, and operators upon which the event data is filtered. The actual filtering is performed after the supplier sends an event but prior to the consumer receiving the event. The filterable data should be well known and standardized. News may be used by the consumer to further filter the event, but the attributes and values are not standardized. Additionally, news may be used to convey the identity of the object generating the event to any consumer of the event. 6.5.7.2 An Event Broker is required to support subscription to an event channel that has the specified subject and supports filtering. The actual filtering mechanism is an implementation dependency."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.7  Filter Data and News (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.5.7  Filter Data and News\n\nContent: Filter data is passed to the Event Broker by the consumer to qualify the particular events that the consumer is interested in receiving. The filter data specifies filterable items in which the consumer is interested plus operators and operands to perform the filtering. The filtering sub-system should use the filter data to ensure that a specific event is passed to the consumer. The interface is simple and does not try to construct advanced logic to build the filter. The results of the filtering are anded together, such that the passed event should meet all of the filter criteria. The need to specify logical operators (e.g., “or”) on the filter criteria or the use of query languages should be evaluated. Extensions to the filter structures would be required to support these additional capabilities. NOTE 2: The location of the filtering subsystem is an implementation detail."
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.6  Distributed Transactions (Part 1)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.6  Distributed Transactions\n\nContent: 6.6.1 Many operations defined in the CIM Framework are related to one another in complex ways that require multiple operations to be treated as a single unit of work. For example, grouping operations are combined with the ability to make an explicit decision to commit the aggregation of changes, or to abort all of the operations and return to the prior state. These grouping of operations are consistent with the familiar concept of a transaction (most commonly encountered in the context of database management systems). CIM Framework objects should be capable of participating in transactions as described below. However, the choice of how an object participates is implementation specific. For example, the implementer chooses the implementation technology and whether a change in object state is recoverable (that is, whether a change in state can be rolled back). 6.6.2 A transaction is a contract between two or more objects to perform some action based upon one or more requests in some context and having the ACID properties as"
  },
  {
    "title": "SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.6  Distributed Transactions (Part 2)",
    "content": "Title: SEMI E96-1101 GUIDE FOR CIM FRAMEWORK TECHNICAL ARCHITECTURE - # 6.6  Distributed Transactions\n\nContent: follows:6 Atomicity –– State changes are atomic; either all happen or none happen. These changes include database changes, messages and events. Consistency –– A correct transformation of state. Actions taken as a group do not violate any of the integrity constraints associated with the state. Isolation –– Even though transactions execute concurrently, it appears to each transaction T that others executed either before $\\mathrm { \\Delta T }$ or after T, but not both. Durability – Once a transaction completes successfully (commits), its changes to state survive failures. 6.6.3 For example, consider a lot that starts processing in a piece of equipment. The states of the lot and the equipment should change in order to accurately track the state of the factory. Coordinating the lot and equipment state changes as a transaction guarantees that factory state can be recovered accurately. 6.6.4 Transactions are created by a user of a service (the client) requesting an operation from a provider of a service (the server). To maintain"
  }
]